     1                                  ; 内核
     2                                  
     3                                  %include "./common/global_defs.asm"
     1                              <1> ; 全局常量定义
     2                              <1> 
     3                              <1> %ifndef _GLOBAL_DEFS_
     4                              <1>     %define _GLOBAL_DEFS_
     5                              <1> 
     6                              <1>     SDA_PHY_ADDR        equ     0x00007e00	; 系统数据区的起始物理地址
     7                              <1>     PML5_PHY_ADDR       equ     0x00009000	; 内核 5 级头表物理地址
     8                              <1>     PML4_PHY_ADDR       equ     0x0000a000	; 内核 4 级头表物理地址
     9                              <1>     PDPT_PHY_ADDR       equ     0x0000b000	; 对应于低端 2MB 的内核页目录指针表物理地址
    10                              <1>     PDT_PHY_ADDR        equ     0x0000c000	; 对应于低端 2MB 的页目录表物理地址
    11                              <1>     PT_PHY_ADDR         equ     0x0000d000	; 对应于低端 2MB 的内核页表的物理地址
    12                              <1>     IDT_PHY_ADDR        equ     0x0000e000	; 中断描述符表的物理地址
    13                              <1>     LDR_PHY_ADDR        equ     0x0000f000	; 用于安装内核加载器的起始物理地址
    14                              <1>     GDT_PHY_ADDR        equ     0x00010000	; 全局描述符表 GDT 的物理地址
    15                              <1>     CORE_PHY_ADDR       equ     0x00020000	; 内核的起始物理地址
    16                              <1>     COR_PDPT_ADDR       equ     0x00100000	; 从这个物理地址开始的 1MB 是内核的 254 个页目录指针表
    17                              <1> 
    18                              <1>     LDR_START_SECTOR    equ     1      	        ; 内核加载器在硬盘上的起始逻辑扇区号
    19                              <1>     COR_START_SECTOR    equ     9      	        ; 内核程序在硬盘上的起始逻辑扇区号
    20                              <1> 
    21                              <1>     ; 虚拟内存空间的高端起始于线性地址 0xffff800000000000
    22                              <1>     UPPER_LINEAR_START  equ     0xffff800000000000  
    23                              <1>     UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR	    ; 内核的高端线性地址
    24                              <1>     UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000	        ; 文本显示缓冲区的高端起始线性地址
    25                              <1>     UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR	    ; 系统数据区的高端线性地址
    26                              <1>     UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR	    ; GDT 的高端线性地址
    27                              <1>     UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR	    ; IDT 的高端线性地址
    28                              <1> 
    29                              <1>     ; 与全局描述符表有关的选择子定义, 及内存管理有关的常量定义
    30                              <1>     CORE_CODE64_SEL     equ     0x0018	; 内核代码段的描述符选择子(RPL=00)
    31                              <1>     CORE_STACK64_SEL    equ     0x0020	; 内核栈段的描述符选择子(RPL=00)
    32                              <1>     RESVD_DESC_SEL      equ     0x002b	; 保留的描述符选择子
    33                              <1>     USER_CODE64_SEL     equ     0x003b	; 3 特权级代码段的描述符选择子(RPL=11)
    34                              <1>     USER_STACK64_SEL    equ     0x0033	; 3 特权级栈段的描述符选择子(RPL=11)
    35                              <1> 
    36                              <1>     PHY_MEMORY_SIZE     equ     32    	            ; 物理内存大小(MB), 要求至少 3MB
    37                              <1>     CORE_ALLOC_START    equ     0xffff800000200000	; 在虚拟地址空间高端(内核)分配内存时的起始地址
    38                              <1>     USER_ALLOC_START    equ     0x0000000000000000	; 在每个任务虚拟地址空间低端分配内存时的起始地址
    39                              <1> 
    40                              <1>     ; 创建任务时, 需要分配一个物理页作为新任务的 4 级头表, 并分配一个临时的线性地址来初始化这个页
    41                              <1>     NEW_PML4_LINEAR     equ     0xffffff7ffffff000	; 用来映射新任务 4 级头表的线性地址
    42                              <1>     LAPIC_START_ADDR    equ     0xffffff7fffffe000	; LOCAL APIC 寄存器的起始线性地址
    43                              <1>     IOAPIC_START_ADDR   equ     0xffffff7fffffd000	; I/O APIC 寄存器的起始线性地址
    44                              <1>     AP_START_UP_ADDR    equ     0x0000f000 	        ; 应用处理器(AP)启动代码的物理地址
    45                              <1>     SUGG_PREEM_SLICE    equ     55          	    ; 推荐的任务/线程抢占时间片长度(毫秒)
    46                              <1> 
    47                              <1>     ; 多处理器环境下的自旋锁加锁宏。需要两个参数: 寄存器, 以及一个对应宽度的锁变量
    48                              <1>     %macro  SET_SPIN_LOCK 2             ; 两个参数, 分别是寄存器 %1 和锁变量 %2
    49                              <1>             %%spin_lock:
    50                              <1>                     cmp %2, 0           ; 看一眼锁现在是不是 0
    51                              <1>                     je %%get_lock      	; 如果是 0，说明没人占，跳过去抢
    52                              <1>                     pause				; 不是 0，先喘口气（降低 CPU 占用）
    53                              <1>                     jmp %%spin_lock    	; 继续看
    54                              <1>             %%get_lock:
    55                              <1>                     mov %1, 1
    56                              <1>                     xchg %1, %2         ; 用 xchg 的“原子交换”能力抢锁，抢不到就一直循环（自旋）
    57                              <1>                     cmp %1, 0          	; 交换回来的 %2 旧值是 0 吗？
    58                              <1>                     jne %%spin_lock   	; 不是 0 说明别人先插了旗，回到开头重抢
    59                              <1>     %endmacro
    60                              <1> 
    61                              <1> %endif
     4                                  
     5                                  SECTION core_header                                 ; 内核头部
     6 00000000 [D6100000]                  length      dd core_end                         ; 内核总长度
     7 00000004 [710C0000]                  init_entry  dd init                             ; 内核入口点
     8 00000008 0000000000000000            position    dq 0                                ; 内核加载虚拟地址
     9                                  
    10                                  SECTION core_data                                   ; 内核数据段
    11 00000000 41435049206973206E-         acpi_error  db "ACPI is not supported or data error.", 0x0d, 0x0a, 0
    11 00000009 6F7420737570706F72-
    11 00000012 746564206F72206461-
    11 0000001B 7461206572726F722E-
    11 00000024 0D0A00             
    12                                  
    13 00000027 00                          num_cpus    db 0                                ; 逻辑处理器数量
    14 00000028 00<rep 100h>                cpu_list    times 256 db 0                      ; Local APIC ID的列表
    15 00000128 00000000                    lapic_addr  dd 0                                ; Local APIC 的物理地址
    16                                  
    17 0000012C 00000000                    ioapic_addr dd 0                                ; I/O APIC 的物理地址
    18 00000130 00                          ioapic_id   db 0                                ; I/O APIC ID
    19                                  
    20 00000131 00000000                    clocks_1ms  dd 0                                ; 处理器在1ms内经历的时钟数
    21                                  
    22 00000135 457865637574696E67-         welcome     db "Executing in 64-bit mode.", 0x0d, 0x0a, 0
    22 0000013E 20696E2036342D6269-
    22 00000147 74206D6F64652E0D0A-
    22 00000150 00                 
    23 00000151 0000000000000000            tss_ptr     dq 0                                ; 任务状态段TSS从此处开始
    24                                  
    25 00000159 [0609000000000000]          sys_entry   dq get_screen_row
    26 00000161 [8208000000000000]                      dq get_cmos_time
    27 00000169 [DE00000000000000]                      dq put_cstringxy64
    28 00000171 [200B000000000000]                      dq create_process
    29 00000179 [FF0A000000000000]                      dq get_current_pid
    30 00000181 [0B0B000000000000]                      dq terminate_process
    31                                  
    32 00000189 0000000000000000            pcb_ptr     dq 0                                ; 进程控制块PCB首节点的线性地址
    33 00000191 0000000000000000            cur_pcb     dq 0                                ; 当前任务的PCB线性地址 
    34                                  
    35                                  SECTION core_code                                   ; 内核代码段
    36                                  
    37                                  %include "./common/core_utils64.asm"
     1                              <1> ; 内核通用代码
     2                              <1> 
     3                              <1> ; 在多处理器环境中使用时, 需要在内核程序中定义宏 __MP__
     4                              <1> 
     5                              <1> %include "./common/global_defs.asm"
     1                              <2> ; 全局常量定义
     2                              <2> 
     3                              <2> %ifndef _GLOBAL_DEFS_
     4                              <2>     %define _GLOBAL_DEFS_
     5                              <2> 
     6                              <2>     SDA_PHY_ADDR        equ     0x00007e00	; 系统数据区的起始物理地址
     7                              <2>     PML5_PHY_ADDR       equ     0x00009000	; 内核 5 级头表物理地址
     8                              <2>     PML4_PHY_ADDR       equ     0x0000a000	; 内核 4 级头表物理地址
     9                              <2>     PDPT_PHY_ADDR       equ     0x0000b000	; 对应于低端 2MB 的内核页目录指针表物理地址
    10                              <2>     PDT_PHY_ADDR        equ     0x0000c000	; 对应于低端 2MB 的页目录表物理地址
    11                              <2>     PT_PHY_ADDR         equ     0x0000d000	; 对应于低端 2MB 的内核页表的物理地址
    12                              <2>     IDT_PHY_ADDR        equ     0x0000e000	; 中断描述符表的物理地址
    13                              <2>     LDR_PHY_ADDR        equ     0x0000f000	; 用于安装内核加载器的起始物理地址
    14                              <2>     GDT_PHY_ADDR        equ     0x00010000	; 全局描述符表 GDT 的物理地址
    15                              <2>     CORE_PHY_ADDR       equ     0x00020000	; 内核的起始物理地址
    16                              <2>     COR_PDPT_ADDR       equ     0x00100000	; 从这个物理地址开始的 1MB 是内核的 254 个页目录指针表
    17                              <2> 
    18                              <2>     LDR_START_SECTOR    equ     1      	        ; 内核加载器在硬盘上的起始逻辑扇区号
    19                              <2>     COR_START_SECTOR    equ     9      	        ; 内核程序在硬盘上的起始逻辑扇区号
    20                              <2> 
    21                              <2>     ; 虚拟内存空间的高端起始于线性地址 0xffff800000000000
    22                              <2>     UPPER_LINEAR_START  equ     0xffff800000000000  
    23                              <2>     UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR	    ; 内核的高端线性地址
    24                              <2>     UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000	        ; 文本显示缓冲区的高端起始线性地址
    25                              <2>     UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR	    ; 系统数据区的高端线性地址
    26                              <2>     UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR	    ; GDT 的高端线性地址
    27                              <2>     UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR	    ; IDT 的高端线性地址
    28                              <2> 
    29                              <2>     ; 与全局描述符表有关的选择子定义, 及内存管理有关的常量定义
    30                              <2>     CORE_CODE64_SEL     equ     0x0018	; 内核代码段的描述符选择子(RPL=00)
    31                              <2>     CORE_STACK64_SEL    equ     0x0020	; 内核栈段的描述符选择子(RPL=00)
    32                              <2>     RESVD_DESC_SEL      equ     0x002b	; 保留的描述符选择子
    33                              <2>     USER_CODE64_SEL     equ     0x003b	; 3 特权级代码段的描述符选择子(RPL=11)
    34                              <2>     USER_STACK64_SEL    equ     0x0033	; 3 特权级栈段的描述符选择子(RPL=11)
    35                              <2> 
    36                              <2>     PHY_MEMORY_SIZE     equ     32    	            ; 物理内存大小(MB), 要求至少 3MB
    37                              <2>     CORE_ALLOC_START    equ     0xffff800000200000	; 在虚拟地址空间高端(内核)分配内存时的起始地址
    38                              <2>     USER_ALLOC_START    equ     0x0000000000000000	; 在每个任务虚拟地址空间低端分配内存时的起始地址
    39                              <2> 
    40                              <2>     ; 创建任务时, 需要分配一个物理页作为新任务的 4 级头表, 并分配一个临时的线性地址来初始化这个页
    41                              <2>     NEW_PML4_LINEAR     equ     0xffffff7ffffff000	; 用来映射新任务 4 级头表的线性地址
    42                              <2>     LAPIC_START_ADDR    equ     0xffffff7fffffe000	; LOCAL APIC 寄存器的起始线性地址
    43                              <2>     IOAPIC_START_ADDR   equ     0xffffff7fffffd000	; I/O APIC 寄存器的起始线性地址
    44                              <2>     AP_START_UP_ADDR    equ     0x0000f000 	        ; 应用处理器(AP)启动代码的物理地址
    45                              <2>     SUGG_PREEM_SLICE    equ     55          	    ; 推荐的任务/线程抢占时间片长度(毫秒)
    46                              <2> 
    47                              <2>     ; 多处理器环境下的自旋锁加锁宏。需要两个参数: 寄存器, 以及一个对应宽度的锁变量
    48                              <2>     %macro  SET_SPIN_LOCK 2             ; 两个参数, 分别是寄存器 %1 和锁变量 %2
    49                              <2>             %%spin_lock:
    50                              <2>                     cmp %2, 0           ; 看一眼锁现在是不是 0
    51                              <2>                     je %%get_lock      	; 如果是 0，说明没人占，跳过去抢
    52                              <2>                     pause				; 不是 0，先喘口气（降低 CPU 占用）
    53                              <2>                     jmp %%spin_lock    	; 继续看
    54                              <2>             %%get_lock:
    55                              <2>                     mov %1, 1
    56                              <2>                     xchg %1, %2         ; 用 xchg 的“原子交换”能力抢锁，抢不到就一直循环（自旋）
    57                              <2>                     cmp %1, 0          	; 交换回来的 %2 旧值是 0 吗？
    58                              <2>                     jne %%spin_lock   	; 不是 0 说明别人先插了旗，回到开头重抢
    59                              <2>     %endmacro
    60                              <2> 
    61                              <2> %endif
     6                              <1> 
     7                              <1> 	[bits 64]
     8                              <1> 
     9                              <1> ; ------------------------------------------------------------
    10                              <1> ; put_string64
    11                              <1> ; 功能: 显示 0 终止的字符串并移动光标
    12                              <1> ; 输入: rbx=字符串的线性地址
    13                              <1> ; ------------------------------------------------------------
    14                              <1> %ifdef __MP__
    15                              <1> _prn_str_locker dq 0
    16                              <1> %endif
    17                              <1> 
    18                              <1> put_string64:
    19 00000000 53                  <1> 	push rbx 
    20 00000001 51                  <1> 	push rcx 
    21                              <1> 
    22 00000002 9C                  <1> 	pushfq 
    23 00000003 FA                  <1> 	cli 
    24                              <1> %ifdef __MP__
    25                              <1> 	SET_SPIN_LOCK rcx, qword [rel _prn_str_locker]		; 上锁
    26                              <1> %endif 
    27                              <1> 
    28                              <1> .getc:
    29 00000004 8A0B                <1> 	mov cl, [rbx]
    30 00000006 08C9                <1> 	or cl, cl 							; 检查是不是 0
    31 00000008 740A                <1> 	jz .exit 							; 如果是 0 跳转到退出代码
    32 0000000A E809000000          <1> 	call put_char 
    33 0000000F 48FFC3              <1> 	inc rbx 
    34 00000012 EBF0                <1> 	jmp .getc
    35                              <1> 
    36                              <1> .exit:
    37                              <1> %ifdef __MP__ 
    38                              <1> 	mov qword [rel _prn_str_locker], 0					; 释放锁
    39                              <1> %endif
    40 00000014 9D                  <1> 	popfq
    41                              <1> 
    42 00000015 59                  <1> 	pop rcx 
    43 00000016 5B                  <1> 	pop rbx 
    44                              <1> 
    45 00000017 C3                  <1> 	ret 
    46                              <1> 	
    47                              <1> ; ------------------------------------------------------------
    48                              <1> ; put_char
    49                              <1> ; 功能: 在屏幕上的当前光标处显示一个字符并推进光标(ldr.asm 中 put_char 的 64 位版本)
    50                              <1> ; 输入: cl=字符ASCII码
    51                              <1> ; ------------------------------------------------------------
    52                              <1> put_char:
    53 00000018 50                  <1> 	push rax 
    54 00000019 53                  <1> 	push rbx 
    55 0000001A 51                  <1> 	push rcx 
    56 0000001B 52                  <1> 	push rdx 
    57 0000001C 56                  <1> 	push rsi 
    58 0000001D 57                  <1> 	push rdi 
    59                              <1> 
    60                              <1> 	; 获取光标位置
    61 0000001E 66BAD403            <1> 	mov dx, 0x3d4
    62 00000022 B00E                <1> 	mov al, 0x0e 
    63 00000024 EE                  <1> 	out dx, al 
    64 00000025 66FFC2              <1> 	inc dx 
    65 00000028 EC                  <1> 	in al, dx 								; 高字
    66 00000029 88C4                <1> 	mov ah, al 
    67                              <1> 
    68 0000002B 66FFCA              <1> 	dec dx 
    69 0000002E B00F                <1> 	mov al, 0x0f 
    70 00000030 EE                  <1> 	out dx, al 
    71 00000031 66FFC2              <1> 	inc dx 
    72 00000034 EC                  <1> 	in al, dx 								; 低字
    73 00000035 6689C3              <1> 	mov bx, ax 								; 此时 bx 中存储了字符的数目, 一个字符占两个字节
    74 00000038 4881E3FFFF0000      <1> 	and rbx, 0x000000000000ffff 			; 准备使用 64 位寻址方式访问显存
    75                              <1> 
    76 0000003F 80F90D              <1> 	cmp cl, 0x0d							; 回车符?
    77 00000042 750E                <1> 	jnz .put_0a
    78 00000044 6689D8              <1> 	mov ax, bx 
    79 00000047 B350                <1> 	mov bl, 80
    80 00000049 F6F3                <1> 	div bl 
    81 0000004B F6E3                <1> 	mul bl 									; 移到本行起始
    82 0000004D 6689C3              <1> 	mov bx, ax 	
    83 00000050 EB6C                <1> 	jmp .set_cursor
    84                              <1> 
    85                              <1> .put_0a:
    86 00000052 80F90A              <1> 	cmp cl, 0x0a 							; 换行符?
    87 00000055 7506                <1> 	jnz .put_other
    88 00000057 6683C350            <1> 	add bx, 80								; 平移一行
    89 0000005B EB16                <1> 	jmp .roll_screen
    90                              <1> 
    91                              <1> .put_other:						
    92 0000005D 66D1E3              <1> 	shl bx, 1								; 转换成字节数
    93 00000060 48B800800B000080FF- <1> 	mov rax, UPPER_TEXT_VIDEO
    93 00000069 FF                  <1>
    94 0000006A 880C18              <1> 	mov [rax + rbx], cl 					; 写入字符
    95                              <1> 
    96 0000006D 66D1EB              <1> 	shr bx, 1								; 转回字符数
    97 00000070 66FFC3              <1> 	inc bx 
    98                              <1> 
    99                              <1> .roll_screen:
   100 00000073 6681FBD007          <1> 	cmp bx, 2000							; 光标超出屏幕? 滚屏
   101 00000078 7C44                <1> 	jl .set_cursor 
   102                              <1> 	
   103 0000007A 6653                <1> 	push bx 
   104                              <1> 
   105 0000007C FC                  <1> 	cld 									; 清除方向标志位
   106 0000007D 48BEA0800B000080FF- <1> 	mov rsi, UPPER_TEXT_VIDEO + 0xa0		; 源地址
   106 00000086 FF                  <1>
   107 00000087 48BF00800B000080FF- <1> 	mov rdi, UPPER_TEXT_VIDEO				; 目标地址
   107 00000090 FF                  <1>
   108 00000091 B9E0010000          <1> 	mov rcx, 480							; 480 == 24 x 80 x 2 / 8。前 24 行向上平移一行
   109 00000096 F348A5              <1> 	rep movsq								
   110                              <1> 
   111 00000099 66BB000F            <1> 	mov bx, 3840							; 24 x 80 x 2。清除最后一行
   112 0000009D B950000000          <1> 	mov rcx, 80
   113                              <1> .cls:
   114 000000A2 48B800800B000080FF- <1> 	mov rax, UPPER_TEXT_VIDEO
   114 000000AB FF                  <1>
   115 000000AC 66C704182007        <1> 	mov word [rax + rbx], 0x0720
   116 000000B2 6683C302            <1> 	add bx, 2 
   117 000000B6 E2EA                <1> 	loop .cls 
   118                              <1> 
   119 000000B8 665B                <1> 	pop bx 									; 考虑换行符
   120 000000BA 6683EB50            <1> 	sub bx, 80
   121                              <1> 
   122                              <1> .set_cursor:
   123 000000BE 66BAD403            <1> 	mov dx, 0x3d4
   124 000000C2 B00E                <1> 	mov al, 0x0e 
   125 000000C4 EE                  <1> 	out dx, al 
   126 000000C5 66FFC2              <1> 	inc dx 									; 0x3d5
   127 000000C8 88F8                <1> 	mov al, bh 
   128 000000CA EE                  <1> 	out dx, al 
   129                              <1> 
   130 000000CB 66FFCA              <1> 	dec dx 									; 0x3d4
   131 000000CE B00F                <1> 	mov al, 0x0f 
   132 000000D0 EE                  <1> 	out dx, al 
   133 000000D1 66FFC2              <1> 	inc dx 									; 0x3d5
   134 000000D4 88D8                <1> 	mov al, bl 
   135 000000D6 EE                  <1> 	out dx, al 
   136                              <1> 
   137 000000D7 5F                  <1> 	pop rdi 
   138 000000D8 5E                  <1> 	pop rsi 
   139 000000D9 5A                  <1> 	pop rdx 
   140 000000DA 59                  <1> 	pop rcx 
   141 000000DB 5B                  <1> 	pop rbx 
   142 000000DC 58                  <1> 	pop rax 
   143                              <1> 
   144 000000DD C3                  <1> 	ret 
   145                              <1> 
   146                              <1> ; ------------------------------------------------------------
   147                              <1> ; put_cstringxy64
   148                              <1> ; 功能: 在指定位置用指定颜色显示 0 终止的字符串，只适用于打印图形字符。由于各程序打印时的坐标位置不同，互不干扰，不需要加锁和互斥。
   149                              <1> ; 输入: rbx=字符串首地址, dh=行, dl=列, r9b=颜色属性
   150                              <1> ; ------------------------------------------------------------
   151                              <1> %ifdef __MP__ 
   152                              <1> _prnxy_locker dp 0
   153                              <1> %endif 
   154                              <1> 
   155                              <1> put_cstringxy64:
   156 000000DE 50                  <1> 	push rax 
   157 000000DF 53                  <1> 	push rbx 
   158 000000E0 51                  <1> 	push rcx 
   159 000000E1 52                  <1> 	push rdx 
   160 000000E2 4150                <1> 	push r8 
   161                              <1> 
   162                              <1> 	; 指定坐标位置在显存内的偏移量
   163 000000E4 88F0                <1> 	mov al, dh 
   164 000000E6 B5A0                <1> 	mov ch, 160									; 每行 80 个字符, 占用 160 字节
   165 000000E8 F6E5                <1> 	mul ch 
   166 000000EA D0E2                <1> 	shl dl, 1									; 每个字符占两字节
   167 000000EC 6681E2FF00          <1> 	and dx, 0x00ff
   168 000000F1 6601D0              <1> 	add ax, dx 									; 得到相应显存偏移
   169 000000F4 4825FFFF0000        <1> 	and rax, 0x000000000000ffff
   170                              <1> 
   171 000000FA 9C                  <1> 	pushfq										; 将 RFLAGS 寄存器的全部 64 位标志位压入当前栈顶
   172 000000FB FA                  <1> 	cli 
   173                              <1> 
   174                              <1> %ifdef __MP__									; 读写显存时加锁
   175                              <1> 	SET_SPIN_LOCK r8, qword [rel _prnxy_locker]
   176                              <1> %endif 
   177                              <1> 
   178 000000FC 49B800800B000080FF- <1> 	mov r8, UPPER_TEXT_VIDEO					; 显存起始线性地址
   178 00000105 FF                  <1>
   179                              <1> .nextc:
   180 00000106 8A13                <1> 	mov dl, [rbx]								; 获取将要显示的字符
   181 00000108 08D2                <1> 	or dl, dl 
   182 0000010A 7412                <1> 	jz .exit 
   183 0000010C 41881400            <1> 	mov byte [r8 + rax], dl 					; 字符内容
   184 00000110 45884C0001          <1> 	mov byte [r8 + rax + 1], r9b 				; 字符颜色
   185 00000115 48FFC3              <1> 	inc rbx 
   186 00000118 4883C002            <1> 	add rax, 2
   187 0000011C EBE8                <1> 	jmp .nextc
   188                              <1> .exit:
   189 0000011E 4D31C0              <1> 	xor r8, r8 
   190                              <1> 
   191                              <1> %ifdef __MP__									; 读写显存时释放锁
   192                              <1> 	mov qword [rel _prnxy_locker], 0
   193                              <1> %endif 
   194                              <1> 
   195 00000121 9D                  <1> 	popfq 
   196                              <1> 
   197 00000122 4158                <1> 	pop r8 
   198 00000124 5A                  <1> 	pop rdx 
   199 00000125 59                  <1> 	pop rcx 
   200 00000126 5B                  <1> 	pop rbx 
   201 00000127 58                  <1> 	pop rax 
   202                              <1> 
   203 00000128 C3                  <1> 	ret 
   204                              <1> 
   205                              <1> ; ------------------------------------------------------------
   206                              <1> ; make_interrupt_gate
   207                              <1> ; 功能: 创建 64 位的中断门
   208                              <1> ; 输入: rax=处理程序的线性地址
   209                              <1> ; 输出: rdi 与 rsi 组成中断门(中断门、陷阱门格式见书中 148 页)
   210                              <1> ; ------------------------------------------------------------
   211                              <1> make_interrupt_gate:
   212 00000129 4889C7              <1> 	mov rdi, rax 
   213 0000012C 48C1EF20            <1> 	shr rdi, 32 						; 门的高 64 位, 其中高 32 位是保留
   214                              <1> 
   215 00000130 50                  <1> 	push rax 							; 借助栈构造, 先压入完整 rax, 也就是门的低 64 位, 在对其修改
   216 00000131 66C74424021800      <1> 	mov word [rsp + 2], CORE_CODE64_SEL	; 填入选择子
   217 00000138 89442404            <1> 	mov [rsp + 4], eax 					; 填入线性地址 31~16 位
   218 0000013C 66C7442404008E      <1> 	mov word [rsp + 4], 0x8e00			; 填入属性, P=1, TYPE=64 的中断门, 覆盖填入
   219 00000143 5E                  <1> 	pop rsi 
   220                              <1> 
   221 00000144 C3                  <1> 	ret 								; 可以参考书中 155 页的图
   222                              <1> 
   223                              <1> ; ------------------------------------------------------------
   224                              <1> ; make_tss_descriptor
   225                              <1> ; 功能: 创建 64 位的 TSS 描述符
   226                              <1> ; 输入: rax=TSS 的线性地址
   227                              <1> ; 输出: rdi:rsi=TSS 描述符(LDT, TSS 描述符格式见书中 200 页)
   228                              <1> ; ------------------------------------------------------------
   229                              <1> make_tss_descriptor:
   230 00000145 50                  <1> 	push rax 
   231                              <1> 
   232 00000146 4889C7              <1> 	mov rdi, rax 
   233 00000149 48C1EF20            <1> 	shr rdi, 32							; 得到门高 64 位, 存在 rdi 中
   234                              <1> 
   235 0000014D 50                  <1> 	push rax 							; 借助栈构造, 先压入完整 rax, 也就是门的低 64 位, 在对其修改
   236 0000014E 48C1242410          <1> 	shl qword [rsp], 16 				; 将线性地址 23~0 位移到正确位置
   237 00000153 66C704246800        <1> 	mov word [rsp], 104					; 填入段界限标准长度
   238 00000159 8A442405            <1> 	mov al, [rsp + 5]
   239 0000015D 88442407            <1> 	mov [rsp + 7], al 					; 将线性地址 31~24 位移到正确位置
   240 00000161 C644240589          <1> 	mov byte [rsp + 5], 0x89 			; P=1, DPL=0, TYPE=0b1001(64 位 TSS)
   241 00000166 C644240600          <1> 	mov byte [rsp + 6], 0				; G, 0, 0, AVL, limit
   242 0000016B 5E                  <1> 	pop rsi								; 门低 64 位
   243                              <1> 
   244 0000016C 58                  <1> 	pop rax 
   245                              <1> 
   246 0000016D C3                  <1> 	ret 
   247                              <1> 
   248                              <1> ; ------------------------------------------------------------
   249                              <1> ; mount_idt_entry
   250                              <1> ; 功能: 在中断描述符表 IDT 中安装门描述符
   251                              <1> ; 输入: r8=中断向量, rdi 与 rsi 组成中断门
   252                              <1> ; ------------------------------------------------------------
   253                              <1> mount_idt_entry:
   254 0000016E 4150                <1> 	push r8
   255 00000170 4151                <1> 	push r9 
   256                              <1> 
   257 00000172 49C1E004            <1> 	shl r8, 4 							; 中断号乘以 16 得到表内偏移, 每个中断门 16 字节大小
   258 00000176 49B900E000000080FF- <1> 	mov r9, UPPER_IDT_LINEAR			; 中断描述符表的高端地址
   258 0000017F FF                  <1>
   259 00000180 4B893401            <1> 	mov [r9 + r8], rsi 
   260 00000184 4B897C0108          <1> 	mov [r9 + r8 + 8], rdi 
   261                              <1> 
   262 00000189 4159                <1> 	pop r9 
   263 0000018B 4158                <1> 	pop r8 
   264                              <1> 
   265 0000018D C3                  <1> 	ret  
   266                              <1> 
   267                              <1> ; ------------------------------------------------------------
   268                              <1> ; init_8259
   269                              <1> ; 功能: 初始化8259中断控制器，包括重新设置向量号
   270                              <1> ; ------------------------------------------------------------
   271                              <1> init_8259:
   272 0000018E 50                  <1> 	push rax
   273                              <1> 
   274 0000018F B011                <1> 	mov al, 0x11
   275 00000191 E620                <1> 	out 0x20, al                    	; ICW1: 边沿触发/级联方式
   276 00000193 B020                <1> 	mov al, 0x20
   277 00000195 E621                <1> 	out 0x21, al  						; ICW2: 起始中断向量（避开前31个异常的向量）
   278 00000197 B004                <1> 	mov al, 0x04
   279 00000199 E621                <1> 	out 0x21, al  						; ICW3: 从片级联到 IR2
   280 0000019B B001                <1> 	mov al, 0x01
   281 0000019D E621                <1> 	out 0x21, al                  		; ICW4: 非总线缓冲，全嵌套，正常 EOI
   282                              <1> 
   283 0000019F B011                <1> 	mov al, 0x11
   284 000001A1 E6A0                <1> 	out 0xa0, al                  		; ICW1: 边沿触发/级联方式
   285 000001A3 B028                <1> 	mov al, 0x28
   286 000001A5 E6A1                <1> 	out 0xa1, al                  		; ICW2: 起始中断向量-->0x28
   287 000001A7 B002                <1> 	mov al, 0x02
   288 000001A9 E6A1                <1> 	out 0xa1, al                  		; ICW3: 从片识别标志，级联到主片 IR2
   289 000001AB B001                <1> 	mov al, 0x01
   290 000001AD E6A1                <1> 	out 0xa1, al                  		; ICW4: 非总线缓冲，全嵌套，正常 EOI
   291                              <1> 
   292 000001AF 58                  <1> 	pop rax
   293 000001B0 C3                  <1> 	ret
   294                              <1> 
   295                              <1> ; ------------------------------------------------------------
   296                              <1> ; read_hard_disk_0
   297                              <1> ; 功能: 从硬盘读取一个逻辑扇区
   298                              <1> ; 输入: rax=逻辑扇区号, rbx=目标缓冲区线性地址
   299                              <1> ; 输出: rbx=rbx+512
   300                              <1> ; ------------------------------------------------------------
   301                              <1> %ifdef __MP__
   302                              <1> _read_hdd_locker dq 0						
   303                              <1> %endif
   304                              <1> 
   305                              <1> read_hard_disk_0:
   306 000001B1 50                  <1> 	push rax 
   307 000001B2 51                  <1> 	push rcx 
   308 000001B3 52                  <1> 	push rdx 
   309 000001B4 9C                  <1> 	pushfq
   310                              <1> 
   311 000001B5 FA                  <1> 	cli 
   312                              <1> 
   313                              <1> %ifdef __MP__
   314                              <1> 	SET_SPIN_LOCK rdx, qword [rel _read_hdd_locker]
   315                              <1> %endif
   316                              <1> 
   317 000001B6 50                  <1> 	push rax 
   318                              <1> 
   319 000001B7 66BAF201            <1> 	mov dx, 0x1f2 								; 0x1f2
   320 000001BB B001                <1> 	mov al, 1
   321 000001BD EE                  <1> 	out dx, al 									; 读取扇区数
   322                              <1> 
   323 000001BE 66FFC2              <1> 	inc dx 										; 0x1f3 
   324 000001C1 58                  <1> 	pop rax 
   325 000001C2 EE                  <1> 	out dx, al 									; LBA 地址 7~0
   326                              <1> 
   327 000001C3 B108                <1> 	mov cl, 8 
   328                              <1> 
   329 000001C5 66FFC2              <1> 	inc dx 										; 0x1f4
   330 000001C8 48D3E8              <1> 	shr rax, cl 
   331 000001CB EE                  <1> 	out dx, al 									; LBA 地址 15~8
   332                              <1> 
   333 000001CC 66FFC2              <1> 	inc dx 										; 0x1f5
   334 000001CF 48D3E8              <1> 	shr rax, cl 
   335 000001D2 EE                  <1> 	out dx, al 									; LBA 地址 23~16
   336                              <1> 
   337 000001D3 66FFC2              <1> 	inc dx 										; 0x1f6
   338 000001D6 48D3E8              <1> 	shr rax, cl 
   339 000001D9 0CE0                <1> 	or al, 0xe0 								; 第一硬盘, LBA 地址 27~24
   340 000001DB EE                  <1> 	out dx, al 
   341                              <1> 
   342 000001DC 66FFC2              <1> 	inc dx 										; 0x1f6
   343 000001DF B020                <1> 	mov al, 0x20 								; 读命令
   344 000001E1 EE                  <1> 	out dx, al 
   345                              <1> 
   346                              <1> .waits:
   347 000001E2 EC                  <1> 	in al, dx 
   348 000001E3 A808                <1> 	test al, 8
   349 000001E5 74FB                <1> 	jz .waits
   350                              <1> 	; 不忙且硬盘已经准备好传输数据
   351 000001E7 B900010000          <1> 	mov rcx, 256								; 总共要读的字数=2字节
   352 000001EC 66BAF001            <1> 	mov dx, 0x1f0 
   353                              <1> .readw:
   354 000001F0 66ED                <1> 	in ax, dx 
   355 000001F2 668903              <1> 	mov [rbx], ax 
   356 000001F5 4883C302            <1> 	add rbx, 2
   357 000001F9 E2F5                <1> 	loop .readw 
   358                              <1> 
   359                              <1> %ifdef __MP__
   360                              <1> 	mov qword [rel _read_hdd_locker], 0
   361                              <1> %endif
   362                              <1> 
   363 000001FB 9D                  <1> 	popfq
   364 000001FC 5A                  <1> 	pop rdx 
   365 000001FD 59                  <1> 	pop rcx 
   366 000001FE 58                  <1> 	pop rax 
   367                              <1> 
   368 000001FF C3                  <1> 	ret 
   369                              <1> 
   370                              <1> ; ------------------------------------------------------------
   371                              <1> ; allocate_a_4k_page
   372                              <1> ; 功能: 分配一个 4KB 的页
   373                              <1> ; 输出: rax=页的物理地址
   374                              <1> ; ------------------------------------------------------------	
   375 00000200 FF<rep 40h>         <1> _page_bit_map times 2 * 1024 / 4 / 8 db 0xff 		; 对应物理内存前 512 页(2MB), 见书中 193 页
   376 00000240 00<rep 3C0h>        <1> 	times (PHY_MEMORY_SIZE - 2) * 1024 / 4 / 8 db 0	; 存放后续的页面
   377                              <1> _page_map_len equ $ - _page_bit_map
   378                              <1> 
   379                              <1> allocate_a_4k_page:
   380 00000600 4831C0              <1> 	xor rax, rax 
   381                              <1> .b1:
   382 00000603 F0480FAB05F4FBFFFF  <1> 	lock bts [rel _page_bit_map], rax 				; 多处理器需要 lock, 这是一个指令前缀，用于将随后的指令变成原子操作
   383 0000060C 730B                <1> 	jnc .b2 
   384 0000060E 48FFC0              <1> 	inc rax 
   385 00000611 483D00200000        <1> 	cmp rax, _page_map_len * 8
   386 00000617 7CEA                <1> 	jl .b1 
   387                              <1> 
   388                              <1> 	; 对我们这个简单的系统来说，通常不存在页面不够分配的情况。对于一个流行的系统来说, 
   389                              <1> 	; 如果页面不够分配，需要在这里执行虚拟内存管理，即，回收已经注销的页面，或者执行页面的换入和换出。
   390                              <1> .b2:
   391 00000619 48C1E00C            <1> 	shl rax, 12										; rax 是位数, 转换为内存要乘 4098
   392                              <1> 
   393 0000061D C3                  <1> 	ret 
   394                              <1> 
   395                              <1> ; ------------------------------------------------------------
   396                              <1> ; lin_to_lin_of_pml4e
   397                              <1> ; 功能: 返回指定的线性地址所对应的 4 级头表项的线性地址
   398                              <1> ; 输入: r13=线性地址
   399                              <1> ; 输出: r14=对应的 4 级头表项的线性地址
   400                              <1> ; ------------------------------------------------------------
   401                              <1> lin_to_lin_of_pml4e:
   402 0000061E 4155                <1> 	push r13 
   403                              <1> 
   404 00000620 49BE0000000080FF00- <1> 	mov r14, 0x0000_ff80_0000_0000 			; 保留 4 级头表索引部分
   404 00000629 00                  <1>
   405 0000062A 4D21F5              <1> 	and r13, r14 	
   406 0000062D 49C1ED24            <1> 	shr r13, 36								; 右移到低位, 相当于偏移 = 索引 * 8
   407                              <1> 
   408                              <1> 	; 这个利用了递归映射, 还记得在 ldr.asm 中我们将 4 级头表中最后一个项填入了其本身的地址, 
   409                              <1> 	; 而 0xffff_ffff_ffff_f000 这个线性地址前缀会一直访问最后一个表项, 得到的也一直是 4 级头表的地址
   410 00000631 49C7C600F0FFFF      <1> 	mov r14, 0xffff_ffff_ffff_f000			; 访问 4 级头表所用的地址前缀
   411 00000638 4D01EE              <1> 	add r14, r13 							
   412                              <1> 
   413 0000063B 415D                <1> 	pop r13 
   414                              <1> 
   415 0000063D C3                  <1> 	ret 
   416                              <1> 
   417                              <1> ; ------------------------------------------------------------
   418                              <1> ; lin_to_lin_of_pdpte
   419                              <1> ; 功能: 返回指定的线性地址所对应的页目录指针项的线性地址
   420                              <1> ; 输入: r13=线性地址
   421                              <1> ; 输出: r14=对应的页目录指针项的线性地址
   422                              <1> ; ------------------------------------------------------------
   423                              <1> lin_to_lin_of_pdpte:
   424 0000063E 4155                <1> 	push r13 
   425                              <1> 
   426 00000640 49BE000000C0FFFF00- <1> 	mov r14, 0x0000_ffff_c000_0000			; 保留 4 级头表索引和页目录指针表索引部分
   426 00000649 00                  <1>
   427 0000064A 4D21F5              <1> 	and r13, r14 
   428 0000064D 49C1ED1B            <1> 	shr r13, 27								
   429                              <1> 
   430                              <1> 	; 同上
   431 00000651 49C7C60000E0FF      <1> 	mov r14, 0xffff_ffff_ffe0_0000
   432 00000658 4D01EE              <1> 	add r14, r13 
   433                              <1> 
   434 0000065B 415D                <1> 	pop r13
   435                              <1> 
   436 0000065D C3                  <1> 	ret 
   437                              <1> 
   438                              <1> ; ------------------------------------------------------------
   439                              <1> ; lin_to_lin_of_pdte
   440                              <1> ; 功能: 返回指定的线性地址所对应的页目录项的线性地址
   441                              <1> ; 输入: r13=线性地址
   442                              <1> ; 输出: r14=对应的页目录项的线性地址
   443                              <1> ; ------------------------------------------------------------
   444                              <1> lin_to_lin_of_pdte:
   445 0000065E 4155                <1> 	push r13 
   446                              <1> 
   447 00000660 49BE0000E0FFFFFF00- <1> 	mov r14, 0x0000_ffff_ffe0_0000			; 保留 4 级头表索引、页目录指针表索引和页目录表
   447 00000669 00                  <1>
   448 0000066A 4D21F5              <1> 	and r13, r14 
   449 0000066D 49C1ED12            <1> 	shr r13, 18								
   450                              <1> 
   451                              <1> 	; 同上
   452 00000671 49C7C6000000C0      <1> 	mov r14, 0xffff_ffff_c000_0000
   453 00000678 4D01EE              <1> 	add r14, r13 
   454                              <1> 
   455 0000067B 415D                <1> 	pop r13
   456                              <1> 
   457 0000067D C3                  <1> 	ret 
   458                              <1> 
   459                              <1> ; ------------------------------------------------------------
   460                              <1> ; lin_to_lin_of_pte
   461                              <1> ; 功能: 返回指定的线性地址所对应的页表项的线性地址
   462                              <1> ; 输入: r13=线性地址
   463                              <1> ; 输出: r14=对应的页表项的线性地址
   464                              <1> ; ------------------------------------------------------------
   465                              <1> lin_to_lin_of_pte:
   466 0000067E 4155                <1> 	push r13 
   467                              <1> 
   468 00000680 49BE00F0FFFFFFFF00- <1> 	mov r14, 0x0000_ffff_ffff_f000			; 保留 4 级头表、页目录指针表、页目录表和页表的索引部分
   468 00000689 00                  <1>
   469 0000068A 4D21F5              <1> 	and r13, r14 
   470 0000068D 49C1ED09            <1> 	shr r13, 9								
   471                              <1> 
   472                              <1> 	; 同上
   473 00000691 49BE0000000080FFFF- <1> 	mov r14, 0xffff_ff80_0000_0000
   473 0000069A FF                  <1>
   474 0000069B 4D01EE              <1> 	add r14, r13 
   475                              <1> 
   476 0000069E 415D                <1> 	pop r13
   477                              <1> 
   478 000006A0 C3                  <1> 	ret 
   479                              <1> 
   480                              <1> 
   481                              <1> ; ------------------------------------------------------------
   482                              <1> ; find_pte_for_laddr
   483                              <1> ; 功能: 为指定的线性地址寻找到页表项线性地址
   484                              <1> ; 注意: 不保证线程安全, 如果需要在外部加锁, 关中断. 使用了 rcx, rax, r14 寄存器, 但不负责维护内容不变, 如果需要在外部 push, pop
   485                              <1> ; 输入: r13=线性地址
   486                              <1> ; 输出: r14=页表项线性地址
   487                              <1> ; ------------------------------------------------------------
   488                              <1> find_pte_for_laddr:
   489                              <1> 	; 四级头表一定存在, 检查对应地址的四级头表项是否存在
   490 000006A1 E878FFFFFF          <1> 	call lin_to_lin_of_pml4e							; 得到四级头表项的线性地址
   491 000006A6 49F70601000000      <1> 	test qword [r14], 1									; 看 P 位是否为 1 判断表项是否存在
   492 000006AD 752B                <1> 	jnz .b0
   493                              <1> 
   494                              <1> 	; 创建并安装该线性地址所对应的 4 级头表项(创建页目录指针表)
   495 000006AF E84CFFFFFF          <1> 	call allocate_a_4k_page								; 分配一个页作为页目录指针表
   496 000006B4 4883C807            <1> 	or rax, 0x07										; rax 是分配页的物理地址, 添加属性位 U/S=R/W=P=1
   497 000006B8 498906              <1> 	mov [r14], rax 										; 在 4 级头表中登记 4 级头表项
   498                              <1> 
   499                              <1> 	; 清空刚分配的页目录指针表
   500 000006BB E87EFFFFFF          <1> 	call lin_to_lin_of_pdpte
   501 000006C0 49C1EE0C            <1> 	shr r14, 12
   502 000006C4 49C1E60C            <1> 	shl r14, 12											; 得到页目录指针表的线性地址, 低 12 位是页目录指针项在页目录指针表内的偏移
   503 000006C8 B900020000          <1> 	mov rcx, 512
   504                              <1> .cls0:
   505 000006CD 49C70600000000      <1> 	mov qword [r14], 0
   506 000006D4 4983C608            <1> 	add r14, 8
   507 000006D8 E2F3                <1> 	loop .cls0
   508                              <1> 
   509                              <1> .b0:
   510                              <1> 	; 检查该线性地址对应的页目录指针项是否存在
   511 000006DA E85FFFFFFF          <1> 	call lin_to_lin_of_pdpte 							; 得到页目录指针项的线性地址
   512 000006DF 49F70601000000      <1> 	test qword [r14], 1									; 看 P 位是否为 1 判断表项是否存在
   513 000006E6 752B                <1> 	jnz .b1 
   514                              <1> 
   515                              <1> 	; 创建并安装该线性地址对应的页目录指针项
   516 000006E8 E813FFFFFF          <1> 	call allocate_a_4k_page								; 分配一个页作为页目录表
   517 000006ED 4883C807            <1> 	or rax, 0x07
   518 000006F1 498906              <1> 	mov [r14], rax 
   519                              <1> 
   520                              <1> 	; 清空刚分配的页目录表
   521 000006F4 E865FFFFFF          <1> 	call lin_to_lin_of_pdte 
   522 000006F9 49C1EE0C            <1> 	shr r14, 12
   523 000006FD 49C1E60C            <1> 	shl r14, 12 
   524 00000701 B900020000          <1> 	mov rcx, 512 
   525                              <1> .cls1:
   526 00000706 49C70600000000      <1> 	mov qword [r14], 0
   527 0000070D 4983C608            <1> 	add r14, 8
   528 00000711 E2F3                <1> 	loop .cls1 
   529                              <1> 
   530                              <1> .b1:
   531                              <1> 	; 检查该线性地址对应的页目录指针项是否存在
   532 00000713 E846FFFFFF          <1> 	call lin_to_lin_of_pdte 
   533 00000718 49F70601000000      <1> 	test qword [r14], 1
   534 0000071F 752B                <1> 	jnz .b2 
   535                              <1> 
   536                              <1> 	; 创建并安装该线性地址对应的页目录项, 即分配页表
   537 00000721 E8DAFEFFFF          <1> 	call allocate_a_4k_page
   538 00000726 4883C807            <1> 	or rax, 0x07
   539 0000072A 498906              <1> 	mov [r14], rax 
   540                              <1> 
   541                              <1> 	; 清空刚分配的页表
   542 0000072D E84CFFFFFF          <1> 	call lin_to_lin_of_pte 
   543 00000732 49C1EE0C            <1> 	shr r14, 12
   544 00000736 49C1E60C            <1> 	shl r14, 12
   545 0000073A B900020000          <1> 	mov rcx, 512
   546                              <1> 
   547                              <1> .cls2:
   548 0000073F 49C70600000000      <1> 	mov qword [r14], 0
   549 00000746 4983C608            <1> 	add r14, 8
   550 0000074A E2F3                <1> 	loop .cls2 
   551                              <1> 
   552                              <1> .b2:
   553                              <1> 	; 检查该线性地址所对应的页表项是否存在
   554 0000074C E82DFFFFFF          <1> 	call lin_to_lin_of_pte 
   555                              <1> 
   556 00000751 C3                  <1> 	ret 
   557                              <1> 
   558                              <1> ; ------------------------------------------------------------
   559                              <1> ; setup_paging_for_laddr
   560                              <1> ; 功能: 为指定的线性地址安装分页
   561                              <1> ; 输入: r13=线性地址
   562                              <1> ; ------------------------------------------------------------
   563                              <1> %ifdef __MP__
   564                              <1> _spaging_locker dq 0
   565                              <1> %endif
   566                              <1> 
   567                              <1> setup_paging_for_laddr:
   568 00000752 51                  <1> 	push rcx 
   569 00000753 50                  <1> 	push rax 
   570 00000754 4156                <1> 	push r14 
   571 00000756 9C                  <1> 	pushfq
   572                              <1> 
   573 00000757 FA                  <1> 	cli 
   574                              <1> 
   575                              <1> %ifdef __MP__
   576                              <1> 	SET_SPIN_LOCK r14, qword [rel _spaging_locker]
   577                              <1> %endif 
   578                              <1> 
   579 00000758 E844FFFFFF          <1> 	call find_pte_for_laddr
   580 0000075D 49F70601000000      <1> 	test qword [r14], 1
   581 00000764 750C                <1> 	jnz .exit
   582                              <1> 
   583                              <1> 	; 创建并安装该地址对应的页表项, 即最终分配的页
   584 00000766 E895FEFFFF          <1> 	call allocate_a_4k_page
   585 0000076B 4883C807            <1> 	or rax, 0x07										; 设置属性
   586 0000076F 498906              <1> 	mov [r14], rax 
   587                              <1> 
   588                              <1> .exit:
   589                              <1> %ifdef __MP__
   590                              <1> 	mov qword [rel _spaging_locker], 0
   591                              <1> %endif
   592 00000772 9D                  <1> 	popfq 
   593                              <1> 
   594 00000773 415E                <1> 	pop r14 
   595 00000775 58                  <1> 	pop rax 
   596 00000776 59                  <1> 	pop rcx 
   597                              <1> 
   598 00000777 C3                  <1> 	ret 
   599                              <1> ; ------------------------------------------------------------
   600                              <1> ; mapping_laddr_to_page
   601                              <1> ; 功能: 建立线性地址到物理页的映射, 即, 为指定的线性地址安装指定的物理页
   602                              <1> ; 输入: r13=线性地址, rax=页的物理地址（含属性）
   603                              <1> ; ------------------------------------------------------------
   604                              <1> %ifdef __MP__
   605                              <1> _mapping_locker dq 0
   606                              <1> %endif
   607                              <1> 
   608                              <1> mapping_laddr_to_page:
   609 00000778 51                  <1> 	push rcx 
   610 00000779 4156                <1> 	push r14 
   611 0000077B 9C                  <1> 	pushfq
   612                              <1> 
   613 0000077C FA                  <1> 	cli 
   614                              <1> 
   615                              <1> %ifdef __MP__
   616                              <1> 	SET_SPIN_LOCK r14, qword [rel _mapping_locker]
   617                              <1> %endif
   618                              <1> 
   619 0000077D 50                  <1> 	push rax 
   620 0000077E E81EFFFFFF          <1> 	call find_pte_for_laddr								; 得到页表项的线性地址
   621 00000783 58                  <1> 	pop rax 
   622 00000784 498906              <1> 	mov [r14], rax 										; 在页表项中写入页的物理地址
   623                              <1> 
   624                              <1> %ifdef __MP__
   625                              <1> 	mov qword [rel _mapping_locker], 0
   626                              <1> %endif
   627                              <1> 
   628 00000787 9D                  <1> 	popfq
   629 00000788 415E                <1> 	pop r14 
   630 0000078A 59                  <1> 	pop rcx 
   631                              <1> 
   632 0000078B C3                  <1> 	ret 
   633                              <1> 	
   634                              <1> ; ------------------------------------------------------------
   635                              <1> ; core_memory_allocate
   636                              <1> ; 功能: 在虚拟地址空间的高端（内核）分配内存
   637                              <1> ; 输入: rcx=请求分配的字节数
   638                              <1> ; 输出: r13=本次分配的起始线性地址, r14=下次分配的起始线性地址
   639                              <1> ; ------------------------------------------------------------
   640 0000078C 000020000080FFFF    <1> _core_next_linear dq CORE_ALLOC_START
   641                              <1> 
   642                              <1> %ifdef __MP__
   643                              <1> _core_alloc_locker dq 0
   644                              <1> %endif
   645                              <1> 
   646                              <1> core_memory_allocate:
   647 00000794 9C                  <1> 	pushfq 
   648 00000795 FA                  <1> 	cli 
   649                              <1> %ifdef __MP__
   650                              <1> 	SET_SPIN_LOCK r14, qword [rel _core_alloc_locker]
   651                              <1> %endif
   652 00000796 4C8B2DEFFFFFFF      <1> 	mov r13, [rel _core_next_linear]					; 起始地址
   653 0000079D 4D8D740D00          <1> 	lea r14, [r13 + rcx]								; 下次分配的起始地址
   654                              <1> 
   655 000007A2 49F7C607000000      <1> 	test r14, 0x07 										; 进行 8 字节对齐处理
   656 000007A9 740C                <1> 	jz .algn
   657 000007AB 4983C608            <1> 	add r14, 0x08
   658 000007AF 49C1EE03            <1> 	shr r14, 3
   659 000007B3 49C1E603            <1> 	shl r14, 3											; 最低的 3 个比特变 0
   660                              <1> 
   661                              <1> .algn:
   662 000007B7 4C8935CEFFFFFF      <1> 	mov qword [rel _core_next_linear], r14 				; 写回, 保留, 下一次用
   663                              <1> 
   664                              <1> %ifdef __MP__
   665                              <1> 	mov qword [rel _core_alloc_locker], 0
   666                              <1> %endif
   667                              <1> 
   668 000007BE 9D                  <1> 	popfq
   669                              <1> 
   670 000007BF 4155                <1> 	push r13 
   671 000007C1 4156                <1> 	push r14 
   672                              <1> 
   673                              <1> 	; 以下为请求的内存分配页。R13 为本次分配的线性地址；R14 为下次分配的线性地址
   674 000007C3 49C1ED0C            <1> 	shr r13, 12
   675 000007C7 49C1E50C            <1> 	shl r13, 12											; 清除页内偏移
   676 000007CB 49C1EE0C            <1> 	shr r14, 12
   677 000007CF 49C1E60C            <1> 	shl r14, 12
   678                              <1> .next:
   679 000007D3 E87AFFFFFF          <1> 	call setup_paging_for_laddr							; 安装线性地址所在页
   680 000007D8 4981C500100000      <1> 	add r13, 0x1000
   681 000007DF 4D39F5              <1> 	cmp r13, r14 
   682 000007E2 7EEF                <1> 	jle .next 
   683                              <1> 
   684 000007E4 415E                <1> 	pop r14 
   685 000007E6 415D                <1> 	pop r13 
   686                              <1> 
   687 000007E8 C3                  <1> 	ret 
   688                              <1> 
   689                              <1> ; ------------------------------------------------------------
   690                              <1> ; user_memory_allocate
   691                              <1> ; 功能: 在用户任务的私有空间（低端）分配内存
   692                              <1> ; 输入: r11=任务控制块 PCB 的线性地址, rcx=希望分配的字节数
   693                              <1> ; 输出: r13=本次分配的起始线性地址, r14=下次分配的起始线性地址
   694                              <1> ; ------------------------------------------------------------
   695                              <1> user_memory_allocate:
   696 000007E9 4D8B6B18            <1> 	mov r13, [r11 + 24]								; 获得本次分配的起始线性地址
   697 000007ED 4D8D740D00          <1> 	lea r14, [r13 + rcx]							; 下次分配的起始线性地址
   698                              <1> 
   699 000007F2 49F7C607000000      <1> 	test r14, 0x07									; 是否按 8 字节对齐
   700 000007F9 740C                <1> 	jz .algn
   701 000007FB 49C1EE03            <1> 	shr r14, 3 										; 8 字节向上取整
   702 000007FF 49C1E603            <1> 	shl r14, 3 
   703 00000803 4983C608            <1> 	add r14, 0x08 
   704                              <1> 
   705                              <1> .algn:
   706 00000807 4D897318            <1> 	mov [r11 + 24], r14 							; 写回 PCB 中
   707                              <1> 
   708 0000080B 4155                <1> 	push r13 
   709 0000080D 4156                <1> 	push r14 
   710                              <1> 
   711                              <1> 	; 以下为请求的内存分配页
   712 0000080F 49C1ED0C            <1> 	shr r13, 12										; 清除页内便宜
   713 00000813 49C1E50C            <1> 	shl r13, 12
   714 00000817 49C1EE0C            <1> 	shr r14, 12
   715 0000081B 49C1E60C            <1> 	shl r14, 12
   716                              <1> 
   717                              <1> .next:
   718 0000081F E82EFFFFFF          <1> 	call setup_paging_for_laddr						; 为当前线性地址安装页
   719 00000824 4981C500100000      <1> 	add r13, 0x1000
   720 0000082B 4D39F5              <1> 	cmp r13, r14 
   721 0000082E 7EEF                <1> 	jle .next
   722                              <1> 
   723 00000830 415E                <1> 	pop r14
   724 00000832 415D                <1> 	pop r13 
   725                              <1> 
   726 00000834 C3                  <1> 	ret 
   727                              <1> 
   728                              <1> ; ------------------------------------------------------------
   729                              <1> ; copy_current_pml4
   730                              <1> ; 功能: 创建新的 4 级头表，并复制当前 4 级头表的内容
   731                              <1> ; 输出: rax=新 4 级头表的物理地址及属性
   732                              <1> ; ------------------------------------------------------------
   733                              <1> %ifdef __MP__
   734                              <1> _copy_locker dq 0
   735                              <1> %endif
   736                              <1> 
   737                              <1> copy_current_pml4:
   738 00000835 56                  <1> 	push rsi 
   739 00000836 57                  <1> 	push rdi 
   740 00000837 4155                <1> 	push r13 
   741 00000839 51                  <1> 	push rcx 
   742 0000083A 9C                  <1> 	pushfq
   743                              <1> 
   744 0000083B FA                  <1> 	cli 
   745                              <1> 
   746                              <1> %ifdef __MP__
   747                              <1> 	SET_SPIN_LOCK rcx, qword [rel _copy_locker]
   748                              <1> %endif
   749                              <1> 
   750 0000083C E8BFFDFFFF          <1> 	call allocate_a_4k_page						; 分配一个物理页
   751 00000841 4883C807            <1> 	or rax, 0x07 								; 添加属性
   752 00000845 49BD00F0FFFF7FFFFF- <1> 	mov r13, NEW_PML4_LINEAR					; 用指定的线性地址映射和访问刚分配的这个物理页
   752 0000084E FF                  <1>
   753 0000084F E824FFFFFF          <1> 	call mapping_laddr_to_page
   754                              <1> 
   755                              <1> 	; 目标表项在页部件的转换速查缓冲器 TLB 的缓存, 需要用 invlpg 执行刷新
   756 00000854 410F017D00          <1> 	invlpg [r13]
   757                              <1> 
   758 00000859 48C7C600F0FFFF      <1> 	mov rsi, 0xffff_ffff_ffff_f000				; rsi -> 当前活动4级头表的线性地址(还是利用递归映射)
   759 00000860 4C89EF              <1> 	mov rdi, r13 								; rdi -> 新 4 级头表的线性地址
   760 00000863 B900020000          <1> 	mov rcx, 512								; rcx -> 要复制的目录项数
   761 00000868 FC                  <1> 	cld 										; 将 RFLAGS 中的方向标志位（DF）设置为 0, 即地址自动递增
   762 00000869 F348A5              <1> 	repe movsq
   763                              <1> 
   764 0000086C 498985F80F0000      <1> 	mov [r13 + 0xff8], rax 						; 0xff8 = 512 * 8, 新 4 级头表的 511 号表项指向它自己, 方便递归映射 
   765 00000873 410F01BDF80F0000    <1> 	invlpg [r13 + 0xff8]
   766                              <1> 
   767                              <1> %ifdef __MP__
   768                              <1> 	mov qword [rel _copy_locker], 0
   769                              <1> %endif
   770                              <1> 
   771 0000087B 9D                  <1> 	popfq
   772 0000087C 59                  <1> 	pop rcx 
   773 0000087D 415D                <1> 	pop r13
   774 0000087F 5F                  <1> 	pop rdi 
   775 00000880 5E                  <1> 	pop rsi 
   776                              <1> 
   777 00000881 C3                  <1> 	ret 
   778                              <1> 
   779                              <1> ; ------------------------------------------------------------
   780                              <1> ; get_cmos_time
   781                              <1> ; 功能: 从 CMOS 中获取当前时间, 详情见书中 225 页
   782                              <1> ; 输入: rbx=缓冲区线性地址
   783                              <1> ; ------------------------------------------------------------
   784                              <1> %ifdef __MP__
   785                              <1> _cmos_locker dq 0
   786                              <1> %endif
   787                              <1> 
   788                              <1> get_cmos_time:
   789 00000882 50                  <1> 	push rax 
   790 00000883 9C                  <1> 	pushfq
   791 00000884 FA                  <1> 	cli 
   792                              <1> 
   793                              <1> %ifdef __MP__
   794                              <1> 	SET_SPIN_LOCK rax, qword [rel _cmos_locker]
   795                              <1> %endif
   796                              <1> 
   797                              <1> .w0:
   798 00000885 B08A                <1> 	mov al, 0x8a 
   799 00000887 E670                <1> 	out 0x70, al 
   800 00000889 E471                <1> 	in al, 0x71 								; 读寄存器 A
   801 0000088B A880                <1> 	test al, 0x80 								; 测试第 7 位 UIP, 等待更新周期结束
   802 0000088D 75F6                <1> 	jnz .w0 
   803                              <1> 
   804 0000088F B084                <1> 	mov al, 0x84 
   805 00000891 E670                <1> 	out 0x70, al 
   806 00000893 E471                <1> 	in al, 0x71 								; 读RTC当前时间(时)
   807 00000895 88C4                <1> 	mov ah, al 									; BCD 编码, 用两个寄存器处理
   808                              <1> 
   809 00000897 C0EC04              <1> 	shr ah, 4									; 处理高四位						
   810 0000089A 80E40F              <1> 	and ah, 0x0f 
   811 0000089D 80C430              <1> 	add ah, 0x30 								; 转换成 ASCII
   812 000008A0 8823                <1> 	mov [rbx], ah 
   813                              <1> 
   814 000008A2 240F                <1> 	and al, 0x0f 								; 处理低四位
   815 000008A4 0430                <1> 	add al, 0x30 
   816 000008A6 884301              <1> 	mov [rbx + 1], al 
   817                              <1> 
   818 000008A9 C643023A            <1> 	mov byte [rbx + 2], ":"
   819                              <1> 
   820 000008AD B082                <1> 	mov al, 0x82 
   821 000008AF E670                <1> 	out 0x70, al 
   822 000008B1 E471                <1> 	in al, 0x71									; 读RTC当前时间(分)
   823 000008B3 88C4                <1> 	mov ah, al 
   824                              <1> 
   825 000008B5 C0EC04              <1> 	shr ah, 4			
   826 000008B8 80E40F              <1> 	and ah, 0x0f 
   827 000008BB 80C430              <1> 	add ah, 0x30 
   828 000008BE 886303              <1> 	mov [rbx + 3], ah 
   829                              <1> 
   830 000008C1 240F                <1> 	and al, 0x0f 
   831 000008C3 0430                <1> 	add al, 0x30 
   832 000008C5 884304              <1> 	mov [rbx + 4], al 
   833                              <1> 
   834 000008C8 C643053A            <1> 	mov byte [rbx + 5], ":"
   835                              <1> 
   836 000008CC B080                <1> 	mov al, 0x80 
   837 000008CE E670                <1> 	out 0x70, al 
   838 000008D0 E471                <1> 	in al, 0x71									; 读RTC当前时间(秒)
   839 000008D2 88C4                <1> 	mov ah, al 
   840                              <1> 
   841 000008D4 C0EC04              <1> 	shr ah, 4
   842 000008D7 80E40F              <1> 	and ah, 0x0f 
   843 000008DA 80C430              <1> 	add ah, 0x30
   844 000008DD 886306              <1> 	mov [rbx + 6], ah 
   845                              <1> 
   846 000008E0 240F                <1> 	and al, 0x0f 
   847 000008E2 0430                <1> 	add al, 0x30 
   848 000008E4 884307              <1> 	mov [rbx + 7], al 
   849                              <1> 
   850 000008E7 C6430800            <1> 	mov byte [rbx + 8], 0						; 终止字符
   851                              <1> 
   852                              <1> %ifdef __MP__
   853                              <1> 	mov qword [rel _cmos_locker], 0
   854                              <1> %endif
   855                              <1> 
   856 000008EB 9D                  <1> 	popfq
   857 000008EC 58                  <1> 	pop rax 
   858                              <1> 
   859 000008ED C3                  <1> 	ret 
   860                              <1> 
   861                              <1> ; ------------------------------------------------------------
   862                              <1> ; generate_process_id
   863                              <1> ; 功能: 生成唯一的进程标识
   864                              <1> ; 输出: rax=进程标识
   865                              <1> ; ------------------------------------------------------------
   866 000008EE 0000000000000000    <1> _process_id dq 0
   867                              <1> 
   868                              <1> generate_process_id:
   869 000008F6 B801000000          <1> 	mov rax, 1
   870 000008FB F0480FC105EAFFFFFF  <1> 	lock xadd qword [rel _process_id], rax 		; lock 前缀确保这条指令是原子操作, xadd 是 "交换并相加" 指令, 会将源操作数和目的操作数相加，结果存入目的操作数，同时将目的操作数的原始值存入源操作数
   871                              <1> 	
   872 00000904 C3                  <1> 	ret 
   873                              <1> 
   874                              <1> ; ------------------------------------------------------------
   875                              <1> ; get_screen_row
   876                              <1> ; 功能: 返回下一个屏幕坐标行的行号
   877                              <1> ; 输出: dh=行号
   878                              <1> ; ------------------------------------------------------------
   879 00000905 08                  <1> _screen_row db 8 								; 前边已经显示了 7 行, 所以从 8 开始
   880                              <1> 
   881                              <1> get_screen_row:
   882 00000906 B601                <1> 	mov dh, 1
   883 00000908 F00FC035F5FFFFFF    <1> 	lock xadd byte [rel _screen_row], dh 
   884                              <1> 
   885 00000910 C3                  <1> 	ret 
    38                                  
    39                                      [bits 64]
    40                                  
    41                                  ; ------------------------------------------------------------
    42                                  ; general_interrupt_handler
    43                                  ; 功能: 通用中断处理
    44                                  ; ------------------------------------------------------------
    45                                  general_interrupt_handler:
    46 00000911 48CF                        iretq
    47                                  
    48                                  ; ------------------------------------------------------------
    49                                  ; general_exception_handler
    50                                  ; 功能: 通用异常处理
    51                                  ; ------------------------------------------------------------
    52                                  general_exception_handler:
    53 00000913 4C8B3D(08000000)            mov r15, [rel position]                         ; 在 24 行 0 列显示红底白字的错误信息
    54 0000091A 498D9F[2F090000]            lea rbx, [r15 + exceptm]
    55 00000921 B618                        mov dh, 24
    56 00000923 B200                        mov dl, 0
    57 00000925 41B14F                      mov r9b, 0x4f 
    58 00000928 E8B1F7FFFF                  call put_cstringxy64                            ; 在 core_utils64.asm 中实现
    59                                  
    60 0000092D FA                          cli 
    61 0000092E F4                          hlt                                             ; 停机且不接受外部硬件中断
    62                                  
    63 0000092F 412065786365707469-     exceptm         db "A exception raised, halt.", 0    ; 发生异常时的错误信息
    63 00000938 6F6E20726169736564-
    63 00000941 2C2068616C742E00   
    64                                  
    65                                  ; ------------------------------------------------------------
    66                                  ; general_8259ints_handler
    67                                  ; 功能: 通用的 8259 中断处理过程
    68                                  ; ------------------------------------------------------------
    69                                  general_8259ints_handler:
    70 00000949 50                          push rax 
    71                                  
    72 0000094A B020                        mov al, 0x20                                    ; 中断结束命令 EOI
    73 0000094C E6A0                        out 0xa0, al                                    ; 向从片发送
    74 0000094E E620                        out 0x20, al                                    ; 向主片发送
    75                                  
    76 00000950 58                          pop rax 
    77                                  
    78 00000951 48CF                        iretq
    79                                  
    80                                  ; ------------------------------------------------------------
    81                                  ; rtm_interrupt_handle
    82                                  ; 功能: 实时时钟中断处理过程(任务切换)
    83                                  ; ------------------------------------------------------------
    84                                  rtm_interrupt_handle:
    85                                      ; 进入中断时, 硬件自动关闭可屏蔽中断, iret 指令自动恢复中断发生前的 IF 状态，无需软件手动设置
    86                                  
    87 00000953 4150                        push r8 
    88 00000955 50                          push rax 
    89 00000956 53                          push rbx 
    90                                  
    91                                      ; mov al, 0x20                                    ; 中断结束命令 EOI
    92                                      ; out 0xa0, al                                    ; 向从片发送
    93                                      ; out 0x20, al                                    ; 向主片发送
    94                                  
    95 00000957 B00C                        mov al, 0x0c                                    ; 寄存器 c 的索引, 且开放 NMI
    96 00000959 E670                        out 0x70, al
    97 0000095B E471                        in al, 0x71                                     ; 读一下 RTC 的寄存器C, 否则只发生一次中断, 此处不考虑闹钟和周期性中断的情况
    98                                  
    99                                      ; 除非是 NMI、SMI、INIT、ExtINT、SIPI 或者 INIT-Deassert 引发的中断, 否则中断处理过程必须包含一条写 EOI 寄存器的指令
   100 0000095D 49B800E0FFFF7FFFFF-         mov r8, LAPIC_START_ADDR                        ; 给 Local APIC 发送中断结束命令
   100 00000966 FF                 
   101 00000967 41C780B00000000000-         mov dword [r8 + 0xb0], 0
   101 00000970 0000               
   102                                  
   103                                      ; 以下开始执行任务切换
   104                                      ; 任务切换的原理是, 它发生在所有任务的全局空间。在任务 A 的全局空间执行任务切换，切换到任务 B, 实际上也是从任务 B 的全局空间返回任务B的私有空间。
   105                                  
   106                                      ; 从 PCB 链表中寻找就绪任务
   107 00000972 4C8B05(91010000)            mov r8, [rel cur_pcb]                           ; 定位当前任务的 PCB 节点
   108                                  .again:
   109 00000979 4D8B8018010000              mov r8, [r8 + 280]                              ; 获取下一个节点
   110 00000980 4C3B05(91010000)            cmp r8, [rel cur_pcb]                           ; 是否转一圈回到当前节点?
   111 00000987 0F842F010000                jz .return                                      ; 返回
   112                                   
   113 0000098D 4983781000                  cmp qword [r8 + 16], 0                          ; 是否是就绪任务?
   114 00000992 7402                        jz .found                                       ; 切换任务
   115 00000994 EBE3                        jmp .again  
   116                                  
   117                                  .found:
   118 00000996 488B05(91010000)            mov rax, [rel cur_pcb]                          ; 取得当前任务的 PCB 的线性地址
   119 0000099D 4883781002                  cmp qword [rax + 16], 2                         ; 当前任务可能已经被标记为终止, 我们就不用保存当前任务状态
   120 000009A2 7479                        jz .restore
   121                                  
   122                                      ; 保存当前任务的状态以便将来恢复执行
   123 000009A4 48C7401000000000            mov qword [rax + 16], 0                         ; 置任务状态为就绪
   124                                      ; mov [rax + 64], rax                           ; 不需设置，将来恢复执行时从栈中弹出, 因为下面把当前任务的 rip 设置成了 .return, 也就是, 当这个任务在被切换到时, 会从 .return 开始执行, pop rax ...
   125                                      ; mov [rax + 72], rbx                           ; 不需设置，将来恢复执行时从栈中弹出
   126 000009AC 48894850                    mov [rax + 80], rcx
   127 000009B0 48895058                    mov [rax + 88], rdx
   128 000009B4 48897060                    mov [rax + 96], rsi
   129 000009B8 48897868                    mov [rax + 104], rdi
   130 000009BC 48896870                    mov [rax + 112], rbp
   131 000009C0 48896078                    mov [rax + 120], rsp
   132                                      ; mov [rax + 128], r8                           ; 不需设置，将来恢复执行时从栈中弹出
   133 000009C4 4C898888000000              mov [rax + 136], r9
   134 000009CB 4C899090000000              mov [rax + 144], r10
   135 000009D2 4C899898000000              mov [rax + 152], r11
   136 000009D9 4C89A0A0000000              mov [rax + 160], r12
   137 000009E0 4C89A8A8000000              mov [rax + 168], r13
   138 000009E7 4C89B0B0000000              mov [rax + 176], r14
   139 000009EE 4C89B8B8000000              mov [rax + 184], r15
   140 000009F5 488B1D(08000000)            mov rbx, [rel position]
   141 000009FC 488D9B[BC0A0000]            lea rbx, [rbx + .return]
   142 00000A03 488998C0000000              mov [rax + 192], rbx                            ; RIP 为中断返回点
   143 00000A0A 8C88C8000000                mov [rax + 200], cs
   144 00000A10 8C90D0000000                mov [rax + 208], ss
   145 00000A16 9C                          pushfq
   146 00000A17 8F80E8000000                pop qword [rax + 232]
   147                                  
   148                                  .restore:
   149                                      ; 恢复新任务的状态
   150 00000A1D 4C8905(91010000)            mov [rel cur_pcb], r8                           ; 将当前任务设置为新任务
   151 00000A24 49C7401001000000            mov qword [r8 + 16], 1                          ; 置任务状态为忙
   152                                  
   153 00000A2C 498B4020                    mov rax, [r8 + 32]                              ; 取 PCB 中的 RSP0
   154 00000A30 488B1D(51010000)            mov rbx, [rel tss_ptr]
   155 00000A37 48894304                    mov [rbx + 4], rax                              ; 置 TSS 的 RSP0
   156                                  
   157 00000A3B 498B4038                    mov rax, [r8 + 56]                              ; 设置 cr3, 切换地址空间
   158 00000A3F 0F22D8                      mov cr3, rax 
   159                                  
   160 00000A42 498B4040                    mov rax, [r8 + 64]
   161 00000A46 498B5848                    mov rbx, [r8 + 72]
   162 00000A4A 498B4850                    mov rcx, [r8 + 80]
   163 00000A4E 498B5058                    mov rdx, [r8 + 88]
   164 00000A52 498B7060                    mov rsi, [r8 + 96]
   165 00000A56 498B7868                    mov rdi, [r8 + 104]
   166 00000A5A 498B6870                    mov rbp, [r8 + 112]
   167 00000A5E 498B6078                    mov rsp, [r8 + 120]
   168 00000A62 4D8B8888000000              mov r9, [r8 + 136]
   169 00000A69 4D8B9090000000              mov r10, [r8 + 144]
   170 00000A70 4D8B9898000000              mov r11, [r8 + 152]
   171 00000A77 4D8BA0A0000000              mov r12, [r8 + 160]
   172 00000A7E 4D8BA8A8000000              mov r13, [r8 + 168]
   173 00000A85 4D8BB0B0000000              mov r14, [r8 + 176]
   174 00000A8C 4D8BB8B8000000              mov r15, [r8 + 184]
   175                                  
   176 00000A93 41FFB0D0000000              push qword [r8 + 208]                           ; SS
   177 00000A9A 41FF7078                    push qword [r8 + 120]                           ; RSP
   178 00000A9E 41FFB0E8000000              push qword [r8 + 232]                           ; RFLAGS
   179 00000AA5 41FFB0C8000000              push qword [r8 + 200]                           ; CS
   180 00000AAC 41FFB0C0000000              push qword [r8 + 192]                           ; RIP
   181                                  
   182 00000AB3 4D8B8080000000              mov r8, [r8 + 128]                              ; 恢复 R8 的值
   183                                  
   184 00000ABA 48CF                        iretq                                           ; 转入新任务局部空间执行
   185                                  
   186                                  .return:
   187 00000ABC 5B                          pop rbx 
   188 00000ABD 58                          pop rax 
   189 00000ABE 4158                        pop r8 
   190                                  
   191 00000AC0 48CF                        iretq
   192                                  
   193                                  ; ------------------------------------------------------------
   194                                  ; append_to_pcb_link
   195                                  ; 功能: 在 PCB 链上追加任务控制块
   196                                  ; 输入: r11=PCB 线性基地址
   197                                  ; ------------------------------------------------------------
   198                                  append_to_pcb_link:
   199 00000AC2 50                          push rax 
   200 00000AC3 53                          push rbx 
   201                                  
   202 00000AC4 FA                          cli 
   203                                  
   204 00000AC5 488B1D(89010000)            mov rbx, [rel pcb_ptr]                          ; 取得链表首节点的线性地址
   205 00000ACC 4809DB                      or rbx, rbx 
   206 00000ACF 7513                        jnz .not_empty                                  ; 链表非空就跳转
   207 00000AD1 4D891B                      mov [r11], r11                                  ; 唯一的节点, 前驱是自己
   208 00000AD4 4D899B18010000              mov [r11 + 280], r11                            ; 后继节点也是自己
   209 00000ADB 4C891D(89010000)            mov [rel pcb_ptr], r11                          ; 填入内核
   210 00000AE2 EB17                        jmp .return 
   211                                  
   212                                  .not_empty:
   213                                      ; rbx=头节点, rax=头节点的前驱节点, r11=追加的节点
   214 00000AE4 488B03                      mov rax, [rbx]                                  ; 取得头节点的前驱线性地址
   215 00000AE7 4C899818010000              mov [rax + 280], r11                            ; 头节点的后继是追加节点
   216 00000AEE 49899B18010000              mov [r11 + 280], rbx                            ; 追加节点的后继是头节点
   217 00000AF5 498903                      mov [r11], rax                                  ; 追加节点的前驱是头节点的前驱
   218 00000AF8 4C891B                      mov [rbx], r11                                  ; 头节点的前驱是追加节点
   219                                  
   220                                  .return:
   221 00000AFB FB                          sti 
   222                                  
   223 00000AFC 5B                          pop rbx 
   224 00000AFD 58                          pop rax 
   225                                  
   226 00000AFE C3                          ret 
   227                                  
   228                                  ; ------------------------------------------------------------
   229                                  ; get_current_pid
   230                                  ; 功能: 返回当前任务（进程）的标识
   231                                  ; 输出: rax=当前任务（进程）的标识
   232                                  ; ------------------------------------------------------------
   233                                  get_current_pid:
   234 00000AFF 488B05(91010000)            mov rax, [rel cur_pcb]
   235 00000B06 488B4008                    mov rax, [rax + 8]
   236                                  
   237 00000B0A C3                          ret 
   238                                  
   239                                  ; ------------------------------------------------------------
   240                                  ; terminate_process
   241                                  ; 功能: 终止当前任务
   242                                  ; ------------------------------------------------------------
   243                                  terminate_process:
   244 00000B0B FA                          cli                                             ; 执行流改变期间禁止时钟中断引发的任务切换
   245                                  
   246 00000B0C 488B05(91010000)            mov rax, [rel cur_pcb]                          ; 定位到当前任务的 PCB 节点
   247 00000B13 48C7401002000000            mov qword [rax + 16], 2                         ; 状态=终止
   248                                      
   249 00000B1B E933FEFFFF                  jmp rtm_interrupt_handle                        ; 执行任务调度, 将控制权交给处理器
   250                                  
   251                                  ; ------------------------------------------------------------
   252                                  ; create_process
   253                                  ; 功能: 创建新的任务, 即分配好空间, 创建并填入 PCB
   254                                  ; 输入: r8=程序的起始逻辑扇区号
   255                                  ; ------------------------------------------------------------
   256                                  create_process:
   257 00000B20 50                          push rax
   258 00000B21 53                          push rbx
   259 00000B22 51                          push rcx
   260 00000B23 52                          push rdx
   261 00000B24 56                          push rsi
   262 00000B25 57                          push rdi
   263 00000B26 55                          push rbp
   264 00000B27 4150                        push r8
   265 00000B29 4151                        push r9
   266 00000B2B 4152                        push r10
   267 00000B2D 4153                        push r11
   268 00000B2F 4154                        push r12
   269 00000B31 4155                        push r13
   270 00000B33 4156                        push r14
   271 00000B35 4157                        push r15
   272                                  
   273                                      ; 在内核空间创建任务控制块 PCB, 来记录任务相关信息, 内核通过任务控制块来跟踪和识别任务, 并对任务进行管理和控制
   274 00000B37 B900020000                  mov rcx, 512                                    ; 任务控制块 PCB 的尺寸, PCB 的格式见书中 205 图
   275 00000B3C E853FCFFFF                  call core_memory_allocate                       ; 在内核分配地址
   276                                  
   277 00000B41 4D89EB                      mov r11, r13                                    ; r11 寄存器用来保存 PCB 线性地址
   278                                  
   279 00000B44 49C7431800000000            mov qword [r11 + 24], USER_ALLOC_START          ; 填写 PCB 的下一次内存分配时可用线性地址
   280                                      
   281                                      ; 从当前的四级头表复制并创建新任务的四级头表
   282 00000B4C E8E4FCFFFF                  call copy_current_pml4                          ; 在 core_utils64.asm 中实现
   283 00000B51 49894338                    mov [r11 + 56], rax                             ; 填写 PCB 的 CR3, 默认 PCD=PWT=0(这两个属性忘记的话可以看看书中 123 页)
   284                                  
   285                                      ; 以下，切换到新任务的地址空间，并清空其 4 级头表的前半部分。
   286                                      ; 我们正在地址空间的高端执行，可正常执行内核代码并访问内核数据，同时，当前使用的栈位于地址空间高端的栈。
   287 00000B55 410F20DF                    mov r15, cr3                                    ; 保存控制寄存器, 本次是临时切换, 还要再切回来
   288 00000B59 0F22D8                      mov cr3, rax                                    ; 切换到新四级头表的新地址空间
   289                                  
   290                                      ; 清空四级头表的前半部分, 即局部地址
   291 00000B5C 48C7C000F0FFFF              mov rax, 0xffff_ffff_ffff_f000                  ; 四级头表线性地址, 还是递归映射...
   292 00000B63 B900010000                  mov rcx, 256
   293                                  .clsp:
   294 00000B68 48C70000000000              mov qword [rax], 0
   295 00000B6F 4883C008                    add rax, 8
   296 00000B73 E2F3                        loop .clsp
   297                                  
   298 00000B75 0F20D8                      mov rax, cr3                                    ; 刷新 TLB
   299 00000B78 0F22D8                      mov cr3, rax 
   300                                  
   301                                      ; 为新任务分配 0 特权级使用的栈空间
   302 00000B7B B900000100                  mov rcx, 4096 * 16                              ; 在内核地址开辟空间
   303 00000B80 E80FFCFFFF                  call core_memory_allocate
   304 00000B85 4D897320                    mov [r11 + 32], r14                             ; 填入 PCB 中 RSP0, 满减栈, 所以写入结尾地址
   305                                  
   306                                      ; 为新任务分配 3 特权级使用的栈空间
   307 00000B89 B900000100                  mov rcx, 4096 * 16                              ; 在用户地址开辟空间
   308 00000B8E E856FCFFFF                  call user_memory_allocate
   309 00000B93 4D897378                    mov [r11 + 120], r14                            ; 填入 PCB 中 RSP
   310                                  
   311 00000B97 49C7431000000000            mov qword [r11 + 16], 0                         ; PCB 中的任务状态填为就绪    
   312                                  
   313                                      ; 以下开始加载用户程序
   314 00000B9F B900020000                  mov rcx, 512                                    ; 在用户空间开辟一个缓冲区
   315 00000BA4 E840FCFFFF                  call user_memory_allocate
   316 00000BA9 4C89EB                      mov rbx, r13 
   317 00000BAC 4C89C0                      mov rax, r8                                     ; r8 中存的用户程序起始扇区号         
   318 00000BAF E8FDF5FFFF                  call read_hard_disk_0
   319                                  
   320 00000BB4 4D896D10                    mov [r13 + 16], r13                             ; 在程序头填写它自己的起始线性地址
   321 00000BB8 4D89EE                      mov r14, r13 
   322 00000BBB 4D037508                    add r14, [r13 + 8]
   323 00000BBF 4D89B3C0000000              mov [r11 + 192], r14                            ; 在 PCB 中登记程序入口的线性地址
   324                                  
   325                                      ; 以下读取程序剩下代码
   326 00000BC6 498B4D00                    mov rcx, [r13]                                  ; 程序尺寸(在程序头部记录)
   327 00000BCA 48F7C1FF010000              test rcx, 0x1ff                                 ; 能被 512 整除吗?
   328 00000BD1 740F                        jz .y512
   329 00000BD3 48C1E909                    shr rcx, 9                                      ; 不能就凑整
   330 00000BD7 48C1E109                    shl rcx, 9
   331 00000BDB 4881C100020000              add rcx, 512
   332                                  .y512:
   333 00000BE2 4881E900020000              sub rcx, 512                                    ; 减去已读一个扇区的长度
   334 00000BE9 7416                        jz .rdok 
   335 00000BEB E8F9FBFFFF                  call user_memory_allocate                       ; 先分配内存在读数据
   336 00000BF0 48C1E909                    shr rcx, 9                                      ; 除以 512, 计算还需要读的扇区数
   337 00000BF4 48FFC0                      inc rax                                         ; 起始扇区号
   338                                  .b1:
   339 00000BF7 E8B5F5FFFF                  call read_hard_disk_0
   340 00000BFC 48FFC0                      inc rax 
   341 00000BFF E2F6                        loop .b1 
   342                                  
   343                                  .rdok:
   344 00000C01 49C783C80000003B00-         mov qword [r11 + 200], USER_CODE64_SEL          ; 填写 PCB 中代码段选择子
   344 00000C0A 0000               
   345 00000C0C 49C783D00000003300-         mov qword [r11 + 208], USER_STACK64_SEL         ; 填写 PCB 中栈段选择子
   345 00000C15 0000               
   346                                  
   347 00000C17 9C                          pushfq
   348 00000C18 418F83E8000000              pop qword [r11 + 232]                           ; 填写 PCB 中 RFLAGS
   349                                  
   350 00000C1F E8D2FCFFFF                  call generate_process_id
   351 00000C24 49894308                    mov [r11 + 8], rax                              ; 填入 PCB 中当前任务标识
   352                                  
   353 00000C28 E895FEFFFF                  call append_to_pcb_link                         ; 将 PCB 添加到进程控制链表尾部
   354                                  
   355 00000C2D 410F22DF                    mov cr3, r15                                    ; 切换到原任务地址空间
   356                                  
   357 00000C31 415F                        pop r15
   358 00000C33 415E                        pop r14
   359 00000C35 415D                        pop r13
   360 00000C37 415C                        pop r12
   361 00000C39 415B                        pop r11
   362 00000C3B 415A                        pop r10
   363 00000C3D 4159                        pop r9
   364 00000C3F 4158                        pop r8
   365 00000C41 5D                          pop rbp
   366 00000C42 5F                          pop rdi
   367 00000C43 5E                          pop rsi
   368 00000C44 5A                          pop rdx
   369 00000C45 59                          pop rcx
   370 00000C46 5B                          pop rbx
   371 00000C47 58                          pop rax
   372                                  
   373 00000C48 C3                          ret
   374                                  ; ------------------------------------------------------------
   375                                  ; syscall_procedure
   376                                  ; 功能: 系统调用的处理过程
   377                                  ; 注意: rcx 和 r11 由处理器使用, 保存 rip 和 rflags 的内容; rbp 和 r15 由此例程占用. 如有必要, 请用户程序在调用 syscall 前保存它们, 在系统调用返回后自行恢复.
   378                                  ; ------------------------------------------------------------
   379                                  syscall_procedure: 
   380 00000C49 4889E5                      mov rbp, rsp 
   381 00000C4C 4C8B3D(51010000)            mov r15, [rel tss_ptr]
   382 00000C53 498B6704                    mov rsp, [r15 + 4]                              ; 使用 TSS 的 RSP0 作为安全栈
   383                                  
   384 00000C57 FB                          sti                                             ; 恢复中断
   385                                  
   386 00000C58 4C8B3D(08000000)            mov r15, [rel position]
   387 00000C5F 4D03BCC7[59010000]          add r15, [r15 + rax * 8 + sys_entry]
   388 00000C67 41FFD7                      call r15
   389                                  
   390 00000C6A FA                          cli                                             ; 关中断, 恢复栈
   391 00000C6B 4889EC                      mov rsp, rbp 
   392 00000C6E 480F07                      o64 sysret
   393                                  
   394                                  ; ------------------------------------------------------------
   395                                  ; init
   396                                  ; 功能: 初始化内核工作环境
   397                                  ; ------------------------------------------------------------
   398                                  init: 
   399                                      ; 将 GDT 的线性地址映射到虚拟内存高端的相同位置。
   400                                      ; 处理器不支持 64 位立即数到内存地址的操作, 所以用两条指令完成。
   401 00000C71 48B8000001000080FF-         mov rax, UPPER_GDT_LINEAR                       ; GDT 高端线性地址
   401 00000C7A FF                 
   402 00000C7B 48890425047E0000            mov qword [SDA_PHY_ADDR + 4], rax
   403                                  
   404 00000C83 0F011425027E0000            lgdt [SDA_PHY_ADDR + 2]                
   405                                  
   406                                      ; 将栈映射到高端
   407                                      ; 64 位模式下不支持源操作数为 64 位立即数的加法操作。
   408 00000C8B 48B8000000000080FF-         mov rax, UPPER_LINEAR_START
   408 00000C94 FF                 
   409 00000C95 4801C4                      add rsp, rax 
   410                                  
   411                                      ; 准备让处理器从虚拟地址空间的高端开始执行（现在依然在低端执行）
   412 00000C98 48B8000000000080FF-         mov rax, UPPER_LINEAR_START
   412 00000CA1 FF                 
   413 00000CA2 480105(08000000)            add [rel position], rax                         ; 更新 position 处地址, 采用相对寻址方式
   414 00000CA9 488B05(08000000)            mov rax, [rel position]
   415 00000CB0 4805[B80C0000]              add rax, .to_upper
   416 00000CB6 FFE0                        jmp rax                                         ; 用 jmp 改变 rip
   417                                  
   418                                  .to_upper:
   419                                      ; 接下来初始化中断描述符表 IDT，并为 32 个异常以及 224 个中断安装门描述符
   420                                  
   421                                      ; 为 32 个异常创建通用处理过程的中断门
   422 00000CB8 4C8B0D(08000000)            mov r9, [rel position]
   423 00000CBF 498D81[13090000]            lea rax, [r9 + general_exception_handler]
   424 00000CC6 E85EF4FFFF                  call make_interrupt_gate                        ; 在 core_utils64.asm 中实现
   425                                  
   426 00000CCB 4D31C0                      xor r8, r8  
   427                                  .idt0:                                              ; 32 个异常
   428 00000CCE E89BF4FFFF                  call mount_idt_entry                            ; 在 core_utils64.asm 中实现
   429 00000CD3 49FFC0                      inc r8 
   430 00000CD6 4983F81F                    cmp r8, 31 
   431 00000CDA 7EF2                        jle .idt0
   432                                  
   433                                      ; 创建并安装中断门
   434 00000CDC 498D81[11090000]            lea rax, [r9 + general_interrupt_handler]       
   435 00000CE3 E841F4FFFF                  call make_interrupt_gate                        ; 在 core_utils64.asm 中实现
   436                                  
   437 00000CE8 41B820000000                mov r8, 32 
   438                                  .idt1:
   439 00000CEE E87BF4FFFF                  call mount_idt_entry                            ; 在 core_utils64.asm 中实现
   440 00000CF3 49FFC0                      inc r8 
   441 00000CF6 4981F8FF000000              cmp r8, 255
   442 00000CFD 7EEF                        jle .idt1
   443                                  
   444 00000CFF 48B800E000000080FF-         mov rax, UPPER_IDT_LINEAR                       ; 中断描述符表 IDT 的高端线性地址
   444 00000D08 FF                 
   445 00000D09 48BB007E00000080FF-         mov rbx, UPPER_SDA_LINEAR                       ; 系统数据区 SDA 的高端线性地址
   445 00000D12 FF                 
   446 00000D13 66C7430CFF0F                mov word [rbx + 0x0c], 256 * 16 - 1
   447 00000D19 4889430E                    mov qword [rbx + 0x0e], rax                     ; 将 IDT 的线性地址和界限写入内核空间保存
   448                                      
   449                                  
   450 00000D1D 0F015B0C                    lidt [rbx + 0x0c]                               ; 加载 IDT
   451                                  
   452 00000D21 E868F4FFFF                  call init_8259                                  ; 初始化 8259 中断控制器，包括重新设置中断向量号
   453                                  
   454 00000D26 498D81[49090000]            lea rax, [r9 + general_8259ints_handler]        ; 得到通用 8259 中断处理过程的线性地址
   455 00000D2D E8F7F3FFFF                  call make_interrupt_gate                        ; 在 core_utils64.asm 中实现
   456                                  
   457 00000D32 41B820000000                mov r8, 0x20
   458                                  .8259:
   459 00000D38 E831F4FFFF                  call mount_idt_entry                            ; 在 core_utils64.asm 中实现
   460 00000D3D 49FFC0                      inc r8
   461 00000D40 4983F82F                    cmp r8, 0x2f                                    ; 8259 用来收集外部硬件中断信号, 提供 16 个中断向量, 将之前的覆盖
   462 00000D44 7EF2                        jle .8259
   463                                  
   464 00000D46 FB                          sti                                             ; 开放硬件中断
   465                                  
   466                                      ; 在 64 位模式下显示的第一条信息!
   467 00000D47 4C8B3D(08000000)            mov r15, [rel position]
   468 00000D4E 498D9F[35010000]            lea rbx, [r15 + welcome]
   469 00000D55 E8A6F2FFFF                  call put_string64                               ; 在 core_utils64.asm 中实现
   470                                  
   471                                      ; 安装系统服务(syscall, sysret)所需的代码段和栈段描述符
   472 00000D5A 4883EC10                    sub rsp, 16                                     ; 开辟 16 字节空间操作 GDT, GDTR
   473 00000D5E 0F010424                    sgdt [rsp]
   474 00000D62 4831DB                      xor rbx, rbx 
   475 00000D65 668B1C24                    mov bx, [rsp]                                   ; 得到 GDT 界限值(表的总字节数 - 1 == 下标)
   476 00000D69 66FFC3                      inc bx
   477 00000D6C 48035C2402                  add rbx, [rsp + 2]                              ; GDT 基址 + GDT 界限值 + 1 == 新描述符的地址
   478                                      ; 增加新的描述符, 这里可以看书中 182 页的图, 将之前设置的四个描述符也画全了
   479                                  
   480                                      ; 创建 4# 描述符, 栈/数据段描述符, DPL= 0
   481 00000D71 C703FFFF0000                mov dword [rbx], 0x0000ffff
   482 00000D77 C743040092CF00              mov dword [rbx + 4], 0x00cf9200                
   483                                      ; 创建 5# 描述符, 兼容模式下代码段描述符, 暂不支持, 位置保留, 设为全 0
   484 00000D7E C7430800000000              mov dword [rbx + 8], 0  
   485 00000D85 C7430C00000000              mov dword [rbx + 12], 0
   486                                      ; 创建 6# 描述符, 栈/数据段描述符, DPL= 3
   487 00000D8C C74310FFFF0000              mov dword [rbx + 16], 0x0000ffff
   488 00000D93 C7431400F2CF00              mov dword [rbx + 20], 0x00cff200
   489                                      ; 创建 7# 描述符, 64 位模式的代码段描述符, DPL= 3
   490 00000D9A C74318FFFF0000              mov dword [rbx + 24], 0x0000ffff
   491 00000DA1 C7431C00F8AF00              mov dword [rbx + 28], 0x00aff800
   492                                  
   493                                      ; 安装任务状态段 TSS 的描述符, 见书中 200 页
   494 00000DA8 B968000000                  mov rcx, 104                                    ; TSS 标准长度
   495 00000DAD E8E2F9FFFF                  call core_memory_allocate                       ; 在 core_utils64.asm 中实现
   496 00000DB2 4C892D(51010000)            mov [rel tss_ptr], r13 
   497 00000DB9 4C89E8                      mov rax, r13 
   498 00000DBC E884F3FFFF                  call make_tss_descriptor                        ; 在 core_utils64.asm 中实现
   499 00000DC1 48897320                    mov qword [rbx + 32], rsi                       ; TSS 描述符低 64 位
   500 00000DC5 48897B28                    mov qword [rbx + 40], rdi                       ; TSS 描述符高 64 位
   501                                  
   502 00000DC9 6683042430                  add word [rsp], 48                              ; 四个段描述符和一个 TSS 描述符总字节数
   503 00000DCE 0F011424                    lgdt [rsp]
   504 00000DD2 4883C410                    add rsp, 16                                     ; 栈平衡
   505                                  
   506 00000DD6 66B94000                    mov cx, 0x0040                                  ; TSS 描述符选择子
   507 00000DDA 0F00D9                      ltr cx                                          ; 使用 ltr 指令加载 TSS 选择子
   508                                  
   509                                      ; 为快速系统调用 syscall 和 sysret 准备参数, 详细见书中 180-185
   510 00000DDD B9800000C0                  mov ecx, 0x0c0000080                            ; 指定型号专属寄存器 IA32_EFER
   511 00000DE2 0F32                        rdmsr
   512 00000DE4 0FBAE800                    bts eax, 0                                      ; 置位 SCE 位, 允许 syscall 和 sysret
   513 00000DE8 0F30                        wrmsr
   514                                  
   515 00000DEA B9810000C0                  mov ecx, 0xc0000081                             ; IA32_STAR, syscall 会自动切换代码段寄存器（CS）到内核态的代码段，其值来自 IA32_STAR
   516 00000DEF BA18002B00                  mov edx, (RESVD_DESC_SEL << 16) | CORE_CODE64_SEL ; 高 32 位, RESVD_DESC_SEL 是用户态代码段选择子（返回用户态时使用）, CORE_CODE64_SEL 是内核态代码段选择子（进入内核态时使用）
   517 00000DF4 31C0                        xor eax, eax                                    ; 低 32 位
   518 00000DF6 0F30                        wrmsr                                           
   519                                  
   520 00000DF8 B9820000C0                  mov ecx, 0xc0000082                             ; IA32_LSTAR
   521 00000DFD 488B05(08000000)            mov rax, [rel position]
   522 00000E04 488D80[490C0000]            lea rax, [rax + syscall_procedure]              ; 只用 EAX 部分
   523 00000E0B 4889C2                      mov rdx, rax 
   524 00000E0E 48C1EA20                    shr rdx, 32                                     ; 只用 EDX 部分
   525 00000E12 0F30                        wrmsr
   526                                  
   527 00000E14 B9840000C0                  mov ecx, 0xc0000084                             ; IA32_FMASK
   528 00000E19 31D2                        xor edx, edx 
   529 00000E1B B800770400                  mov eax, 0x00047700                             ; 将 TF, IF, DF, IOPL, AC 清零, 其他保持不变, 可看书 185 页的图
   530 00000E20 0F30                        wrmsr
   531                                  
   532                                      ; 以下初始化高级可编程中断控制器 APIC。在计算机启动后，BIOS已经对 LAPIC 和 IOAPIC 做了
   533                                      ; 初始化并创建了相关的高级配置和电源管理接口（ACPI）表项。可以从中获取多处理器和
   534                                      ; APIC 信息。英特尔架构的个人计算机（IA-PC）从 1MB 物理内存中搜索获取；启用可扩展固件
   535                                      ; 接口（EFI或者叫UEFI）的计算机需使用 EFI 传递的 EFI 系统表指针定位相关表格并从中获取
   536                                      ; 多处理器和 APIC 信息。为简单起见，我们采用前一种传统的方式。请注意虚拟机的配置！
   537                                  
   538                                      ; ACPI 申领的内存区域已经保存在我们的系统数据区（SDA），以下将其读出。此内存区可能
   539                                      ; 位于分页系统尚未映射的部分，故以下先将这部分内存进行一一映射（线性地址=物理地址）
   540 00000E22 66833C25167E000000          cmp word [SDA_PHY_ADDR + 0x16], 0               ; 检查检查地址范围描述结构的数量是否为 0
   541 00000E2B 7411                        jz .acpi_err                                    ; 除非 bios 不支持 acpi, 否则不会是 0
   542 00000E2D BE187E0000                  mov rsi, SDA_PHY_ADDR + 0x18                    ; 系统数据区, 地址范围描述结构的起始地址
   543                                  .looking:
   544 00000E32 837E1003                    cmp dword [rsi + 16], 3                         ; 3 代表是 ACPI 申领的内存, ACPI 的介绍可以看书中 257 页
   545 00000E36 741B                        jz .looked
   546 00000E38 4883C620                    add rsi, 32                                     ; 每个地址范围描述结构的长度
   547 00000E3C E2F4                        loop .looking
   548                                  
   549                                  .acpi_err:
   550 00000E3E 4C8B3D(08000000)            mov r15, [rel position]
   551 00000E45 498D9F[00000000]            lea rbx, [r15 + acpi_error]
   552 00000E4C E88DF2FFFF                  call put_cstringxy64
   553 00000E51 FA                          cli 
   554 00000E52 F4                          hlt 
   555                                  
   556                                  .looked:
   557 00000E53 488B1E                      mov rbx, [rsi]                                  ; ACPI 申领的起始物理地址
   558 00000E56 488B4E08                    mov rcx, [rsi + 8]                              ; ACPI 申领的内存大小, 以字节计
   559 00000E5A 4801D9                      add rcx, rbx                                    ; ACPI 申领的内存上边界
   560 00000E5D 48C7C200F0FFFF              mov rdx, 0xffff_ffff_ffff_f000                  ; 用于生成页地址的掩码
   561                                  
   562                                  .mapping:
   563 00000E64 4989DD                      mov r13, rbx                                    ; 映射的线性地址
   564 00000E67 4889D8                      mov rax, rbx 
   565 00000E6A 4821D0                      and rax, rdx 
   566 00000E6D 4883C807                    or rax, 0x07                                    ; 将地址设置上属性
   567 00000E71 E802F9FFFF                  call mapping_laddr_to_page
   568 00000E76 4881C300100000              add rbx, 0x1000
   569 00000E7D 4839CB                      cmp rbx, rcx 
   570 00000E80 7EE2                        jle .mapping
   571                                  
   572                                      ; 从物理地址 0x60000(常规内存顶端) 开始, 搜索系统描述指针结构(RSDP)
   573 00000E82 BB00000600                  mov rbx, 0x60000
   574 00000E87 48B952534420505452-         mov rcx, "RSD PTR "                             ; 结构起始标记
   574 00000E90 20                 
   575                                  
   576                                  .searc:
   577 00000E91 48390B                      cmp qword [rbx], rcx
   578 00000E94 740F                        je .finda 
   579 00000E96 4883C310                    add rbx, 16                                     ; 结构的标记位于 16 字节边界处, 也就是说可以以 16 字节为单位搜索
   580 00000E9A 4881FBF0FF0F00              cmp rbx, 0xffff0                                ; 搜索上边界
   581 00000EA1 7CEE                        jl .searc 
   582 00000EA3 EB99                        jmp .acpi_err                                   ; 未找到 RSDP, 报错停机
   583                                  
   584                                  .finda:
   585                                      ; RSDT 和 XSDT 都指向 MADT, 但 RSDT 给出的是 32 位物理地址, 而 XDST 给出 64 位物理地址。
   586                                      ; 只有 VCPI 2.0 及更高版本才有 XSDT。典型地, VBox 支持 ACPI 2.0 而 Bochs 仅支持 1.0
   587                                      ; 这个可以看书中 274 往后的几个图
   588 00000EA5 807B0F02                    cmp byte [rbx + 15], 2                          ; 检测 ACPI 的版本是否为 2
   589 00000EA9 752B                        jne .acpi_1
   590 00000EAB 488B5B18                    mov rbx, [rbx + 24]                             ; 得到扩展的系统描述表 XSDT 的物理地址
   591                                  
   592                                      ; 以下开始在 XSDT 中遍历搜索多 APIC 描述符表, 即 MADT
   593 00000EAF 4831FF                      xor rdi, rdi                                    ; 下面要使用 rdi, 尽管 edi 赋值了, 但还是要清空 rdi
   594 00000EB2 8B7B04                      mov edi, [rbx + 4]                              ; 得到 XSDT 长度, 以字节计
   595 00000EB5 4801DF                      add rdi, rbx                                    ; 计算上边界的物理地址
   596 00000EB8 4883C324                    add rbx, 36                                     ; XSDT 尾部数组的物理地址
   597                                  .madt0:
   598 00000EBC 4C8B1B                      mov r11, [rbx]             
   599 00000EBF 41813B41504943              cmp dword [r11], "APIC"                         ; MADT 表的标记
   600 00000EC6 7436                        je .findm                       
   601 00000EC8 4883C308                    add rbx, 8                                      ; 下一个元素
   602 00000ECC 4839FB                      cmp rbx, rdi  
   603 00000ECF 7CEB                        jl .madt0
   604 00000ED1 E968FFFFFF                  jmp .acpi_err
   605                                  
   606                                      ; 一些处理 VCPI 1.0, 在 RSDT 中遍历搜索 MADT
   607                                  .acpi_1:
   608 00000ED6 8B5B10                      mov ebx, [rbx + 16]                             ; 得到根系统描述符表 RSDT 的物理地址
   609 00000ED9 678B7B04                    mov edi, [ebx + 4]                              ; 得到 RSDT 的长度, 以字节计
   610 00000EDD 01DF                        add edi, ebx                                    ; 上边界物理地址
   611 00000EDF 83C324                      add ebx, 36                                     ; 尾部数组的物理地址
   612 00000EE2 4D31DB                      xor r11, r11 
   613                                  .madt1:
   614 00000EE5 67448B1B                    mov r11d, [ebx]
   615 00000EE9 41813B41504943              cmp dword [r11], "APIC"                         ; MADT 表的标记
   616 00000EF0 740C                        je .findm
   617 00000EF2 83C304                      add ebx, 4
   618 00000EF5 39FB                        cmp ebx, edi 
   619 00000EF7 7CEC                        jl .madt1
   620 00000EF9 E940FFFFFF                  jmp .acpi_err
   621                                  
   622                                  .findm:
   623                                      ; 此时, r11 是 MADT 的物理地址
   624 00000EFE 418B5324                    mov edx, [r11 + 36]                             ; 预置的 Local APIC 物理地址
   625 00000F02 891D(28010000)              mov [rel lapic_addr], ebx
   626                                  
   627                                      ; 以下开始遍历系统中的逻辑处理器的 LAPIC ID 和 I/O APIC
   628 00000F08 4C8B3D(08000000)            mov r15, [rel position]
   629 00000F0F 4D8DBF[28000000]            lea r15, [r15 + cpu_list]
   630                                  
   631 00000F16 4831FF                      xor rdi, rdi 
   632 00000F19 418B7B04                    mov edi, [r11 + 4]                              ; MADT 的长度
   633 00000F1D 4C01DF                      add rdi, r11                                    ; 上边界物理地址
   634 00000F20 4983C32C                    add r11, 44                                     ; 指向 MADT 尾部中断控制器结构列表
   635                                  .enumd:
   636 00000F24 41803B00                    cmp byte [r11], 0                               ; 0 代表 Local APIC
   637 00000F28 7408                        je .l_apic
   638 00000F2A 41803B01                    cmp byte [r11], 1                               ; 1 代表 I/O APIC
   639 00000F2E 741B                        je .ioapic
   640 00000F30 EB2D                        jmp .m_end 
   641                                  .l_apic:
   642 00000F32 41837B0400                  cmp dword [r11 + 4], 0                          ; Local APIC flag
   643 00000F37 7426                        jz .m_end
   644 00000F39 418A4303                    mov al, [r11 + 3]                                ; 获取 Local APIC ID
   645 00000F3D 418807                      mov [r15], al                                   ; 保存 Local APIC ID 到 cpu_list
   646 00000F40 49FFC7                      inc r15
   647 00000F43 FE05(27000000)              inc byte [rel num_cpus]                         ; 原来 cpu 数量是这么统计出来的
   648 00000F49 EB14                        jmp .m_end
   649                                  .ioapic:
   650 00000F4B 418A4302                    mov al, [r11 + 2]                               ; 取出 I/O APIC ID
   651 00000F4F 8805(30010000)              mov [rel ioapic_id], al                         ; 保存 I/O APIC ID
   652 00000F55 418B4304                    mov eax, [r11 + 4]                              ; 取出 I/O APIC 物理地址
   653 00000F59 8905(2C010000)              mov [rel ioapic_addr], eax                      ; 保存 I/O APIC ID 物理地址
   654                                  .m_end:
   655 00000F5F 4831C0                      xor rax, rax 
   656 00000F62 418A4301                    mov al, [r11 + 1]
   657 00000F66 4901C3                      add r11, rax                                    ; 计算出下一个中断控制结构列表的物理地址
   658 00000F69 4939FB                      cmp r11, rdi 
   659 00000F6C 7CB6                        jl .enumd
   660                                  
   661                                      ; 遍历完成, 映射物理地址到内核指定区域
   662                                  
   663                                      ; Local APIC -> LAPIC_START_ADDR
   664 00000F6E 49BD00E0FFFF7FFFFF-         mov r13, LAPIC_START_ADDR
   664 00000F77 FF                 
   665 00000F78 4831C0                      xor rax, rax 
   666 00000F7B 8B05(28010000)              mov eax, [rel lapic_addr]                       ; 取出 LAPIC 的物理地址
   667 00000F81 83C81F                      or eax, 0x1f                                    ; 设置属性, PCD=PWT=U/S=R/W=P=1, 强不可缓存
   668 00000F84 E8EFF7FFFF                  call mapping_laddr_to_page
   669                                      ; I/O APIC -> IOAPIC_START_ADDR
   670 00000F89 49BD00D0FFFF7FFFFF-         mov r13, IOAPIC_START_ADDR
   670 00000F92 FF                 
   671 00000F93 4831C0                      xor rax, rax 
   672 00000F96 8B05(2C010000)              mov eax, [rel ioapic_addr]
   673 00000F9C 83C81F                      or eax, 0x1f  
   674 00000F9F E8D4F7FFFF                  call mapping_laddr_to_page
   675                                  
   676                                      ; 以下测量当前处理器 1ms 内经历了多少时钟周期, 作为后续的定时基准, 详情见书中284 页
   677 00000FA4 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
   677 00000FAD FF                 
   678                                  
   679 00000FAE C78620030000000001-         mov dword [rsi + 0x320], 0x10000                ; 定时器的本地向量表入口寄存器, 单次击发模式
   679 00000FB7 00                 
   680 00000FB8 C786E00300000B0000-         mov dword [rsi + 0x3e0], 0x0b                   ; 定时器的分频配置寄存器: 1 分频
   680 00000FC1 00                 
   681                                  
   682 00000FC2 B00B                        mov al, 0x0b                                    ; RTC 寄存器 B                                     
   683 00000FC4 0C80                        or al, 0x80                                     ; 阻断 NMI
   684 00000FC6 E670                        out 0x70, al            
   685 00000FC8 B052                        mov al, 0x52                                    ; 设置寄存器 B, 开发周期性中断, 开放更新结束后中断, BCD 码, 24 小时制
   686 00000FCA E671                        out 0x71, al 
   687                                  
   688 00000FCC B08A                        mov al, 0x8a                                    ; CMOS 寄存器 A
   689 00000FCE E670                        out 0x70, al 
   690 00000FD0 B02D                        mov al, 0x2d                                    ; 32 kHz, 125 ms 的周期性中断
   691 00000FD2 E671                        out 0x71, al                                    ; 写回 CMOS 寄存器 A
   692                                  
   693 00000FD4 B08C                        mov al, 0x8c
   694 00000FD6 E670                        out 0x70, al 
   695 00000FD8 E471                        in al, 0x71                                     ; 读寄存器 C
   696                                  .w0:
   697 00000FDA E471                        in al, 0x71 
   698 00000FDC 480FBAE006                  bt rax, 6                                       ; 更新周期结束中断已发生
   699 00000FE1 73F7                        jnc .w0 
   700 00000FE3 C78680030000FFFFFF-         mov dword [rsi + 0x380], 0xffff_ffff            ; 定时器初始计数寄存器: 置初始值并开始计数
   700 00000FEC FF                 
   701                                  .w1:
   702 00000FED E471                        in al, 0x71     
   703 00000FEF 480FBAE006                  bt rax, 6   
   704 00000FF4 73F7                        jnc .w1 
   705 00000FF6 8B9690030000                mov edx, [rsi + 0x390],                         ; 定时器初始计数寄存器: 读当前计数值
   706                                  
   707 00000FFC B8FFFFFFFF                  mov eax, 0xffff_ffff
   708 00001001 29D0                        sub eax, edx 
   709 00001003 31D2                        xor edx, edx 
   710 00001005 BB7D000000                  mov ebx, 125                                    ; 125ms
   711 0000100A F7F3                        div ebx                                         ; 结果存在 eax 中, 即当前处理器在 1ms 内的时钟数
   712                                  
   713 0000100C 8905(31010000)              mov [rel clocks_1ms], eax                       ; 记录
   714                                  
   715 00001012 B00B                        mov al, 0x0b                                    ; RTC 寄存器 B
   716 00001014 0C80                        or al, 0x80                                     ; 阻断 NMI
   717 00001016 E670                        out 0x70, al 
   718 00001018 B012                        mov al, 0x12                                    ; 设置寄存器 B, 只允许更新周期结束中断
   719 0000101A E671                        out 0x71, al 
   720                                  
   721                                      ; 安装用于任务切换的中断处理过程
   722 0000101C 4C8B0D(08000000)            mov r9, [rel position]
   723 00001023 498D81[53090000]            lea rax, [r9 + rtm_interrupt_handle]            ; 得到 rtm_interrupt_handle 的线性地址
   724 0000102A E8FAF0FFFF                  call make_interrupt_gate                        
   725                                  
   726 0000102F FA                          cli 
   727                                  
   728 00001030 41B828000000                mov r8, 0x28                                    ; 任务切换使用的中断向量
   729 00001036 E833F1FFFF                  call mount_idt_entry
   730                                  
   731                                      ; 设置和时钟中断相关的硬件
   732 0000103B B00B                        mov al, 0x0b                                    ; RTC 寄存器 B
   733 0000103D 0C80                        or al, 0x80                                     ; 阻断 NMI
   734 0000103F E670                        out 0x70, al 
   735 00001041 B012                        mov al, 0x12                                    ; 设置寄存器 B, 禁止周期性中断, 开放更新结束后中断, BCD 码, 24 小时制
   736 00001043 E671                        out 0x71, al 
   737                                  
   738 00001045 E4A1                        in al, 0xa1                                     ; 读 8259 从片的 IMR 寄存器
   739 00001047 24FE                        and al, 0xfe                                    ; 清除 bit 0, 此位连接 RTC 
   740 00001049 E6A1                        out 0xa1, al                                    ; 写回寄存器
   741                                  
   742 0000104B FB                          sti 
   743                                  
   744 0000104C B00C                        mov al, 0x0c 
   745 0000104E E670                        out 0x70, al 
   746 00001050 E471                        in al, 0x71                                     ; 读 RTC 寄存器 C, 复位未决的中断状态
   747                                  
   748                                      ; 计算机启动后，默认使用经由 LINT0 的虚拟线模式。
   749                                      ; LVT LINT0 寄存器的默认值：0x700，不屏蔽 LINT0，ExtINT 投递模式
   750                                      ; LVT LINT1 寄存器的默认值：0x400，不屏蔽 LINT1，NMI 投递模式
   751                                      ; 如果不使用 8259A PIC，直接使用 I/O APIC，则应当屏蔽 LVT LINT0 或者 8259A PIC 的输入。
   752                                  
   753 00001052 B0FF                        mov al, 0xff                                    ; 屏蔽所有发往 8259A 主芯片的中断信号
   754 00001054 E621                        out 0x21, al                                    ; 多处理器环境下不再使用 8259 芯片
   755                                  
   756 00001056 8B05(31010000)              mov eax, [rel clocks_1ms]                       ; 使用 Local APIC 内部的定时器, 更加灵活
   757 0000105C BB37000000                  mov ebx, 55             
   758 00001061 F7E3                        mul ebx                                         ; 55ms 内经历的时钟周期数为单位
   759 00001063 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR                        ; Local APIC 的线性地址
   759 0000106C FF                 
   760 0000106D C786E00300000B0000-         mov dword [rsi + 0x3e0], 0x0b                   ; 1 分频
   760 00001076 00                 
   761 00001077 C78620030000280002-         mov dword [rsi + 0x320], 0x20028                ; 周期性模式, 固定模式, 中断向量 0x28
   761 00001080 00                 
   762 00001081 898680030000                mov dword [rsi + 0x380], eax                    ; 初始化计数值
   763                                  
   764                                      ; 以下创建进程
   765 00001087 41B832000000                mov r8, 50
   766 0000108D E88EFAFFFF                  call create_process
   767                                  
   768 00001092 488B1D(89010000)            mov rbx, [rel pcb_ptr]                          ; 得到外壳任务 PCB 的线性地址
   769 00001099 488B4338                    mov rax, [rbx + 56]                             ; 从 PCB 中取出 CR3
   770 0000109D 0F22D8                      mov cr3, rax                                    ; 切换到新进程的地址空间, cr3 寄存器中存储当前四级头表的地址
   771                                  
   772 000010A0 48891D(91010000)            mov [rel cur_pcb], rbx                          ; 设置当前任务的 PCB
   773 000010A7 48C7431001000000            mov qword [rbx + 16], 1                         ; 设置当前任务状态为忙
   774                                  
   775 000010AF 488B4320                    mov rax, [rbx + 32]                             ; 从 PCB 中取出 RSP0
   776 000010B3 488B15(51010000)            mov rdx, [rel tss_ptr]                          ; 得到 TSS 的线性地址
   777 000010BA 48894204                    mov [rdx + 4], rax                              ; 在 TSS 中回填 RSP0
   778                                  
   779 000010BE FFB3D0000000                push qword [rbx + 208]                          ; 用户程序的 SS
   780 000010C4 FF7378                      push qword [rbx + 120]                          ; 用户程序的 RSP
   781 000010C7 9C                          pushfq                                          ; 用户程序的 RFLGAS
   782 000010C8 FFB3C8000000                push qword [rbx + 200]                          ; 用户程序的 CS
   783 000010CE FFB3C0000000                push qword [rbx + 192]                          ; 用户程序的 RIP
   784                                  
   785 000010D4 48CF                        iretq                                           ; 返回当前任务的私有空间执行, 弹出 rip, cs, rflags, rsp, ss 跳转
   786                                  
   787                                  core_end:
