     1                                  ; 内核
     2                                  
     3                                  %include "./common/global_defs.asm"
     1                              <1> ; 全局常量定义
     2                              <1> 
     3                              <1> %ifndef _GLOBAL_DEFS_
     4                              <1>     %define _GLOBAL_DEFS_
     5                              <1> 
     6                              <1>     SDA_PHY_ADDR        equ     0x00007e00	; 系统数据区的起始物理地址
     7                              <1>     PML5_PHY_ADDR       equ     0x00009000	; 内核 5 级头表物理地址
     8                              <1>     PML4_PHY_ADDR       equ     0x0000a000	; 内核 4 级头表物理地址
     9                              <1>     PDPT_PHY_ADDR       equ     0x0000b000	; 对应于低端 2MB 的内核页目录指针表物理地址
    10                              <1>     PDT_PHY_ADDR        equ     0x0000c000	; 对应于低端 2MB 的页目录表物理地址
    11                              <1>     PT_PHY_ADDR         equ     0x0000d000	; 对应于低端 2MB 的内核页表的物理地址
    12                              <1>     IDT_PHY_ADDR        equ     0x0000e000	; 中断描述符表的物理地址
    13                              <1>     LDR_PHY_ADDR        equ     0x0000f000	; 用于安装内核加载器的起始物理地址
    14                              <1>     GDT_PHY_ADDR        equ     0x00010000	; 全局描述符表 GDT 的物理地址
    15                              <1>     CORE_PHY_ADDR       equ     0x00020000	; 内核的起始物理地址
    16                              <1>     COR_PDPT_ADDR       equ     0x00100000	; 从这个物理地址开始的 1MB 是内核的 254 个页目录指针表
    17                              <1> 
    18                              <1>     LDR_START_SECTOR    equ     1      	        ; 内核加载器在硬盘上的起始逻辑扇区号
    19                              <1>     COR_START_SECTOR    equ     9      	        ; 内核程序在硬盘上的起始逻辑扇区号
    20                              <1> 
    21                              <1>     ; 虚拟内存空间的高端起始于线性地址 0xffff800000000000
    22                              <1>     UPPER_LINEAR_START  equ     0xffff800000000000  
    23                              <1>     UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR	    ; 内核的高端线性地址
    24                              <1>     UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000	        ; 文本显示缓冲区的高端起始线性地址
    25                              <1>     UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR	    ; 系统数据区的高端线性地址
    26                              <1>     UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR	    ; GDT 的高端线性地址
    27                              <1>     UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR	    ; IDT 的高端线性地址
    28                              <1> 
    29                              <1>     ; 与全局描述符表有关的选择子定义, 及内存管理有关的常量定义
    30                              <1>     CORE_CODE64_SEL     equ     0x0018	; 内核代码段的描述符选择子(RPL=00)
    31                              <1>     CORE_STACK64_SEL    equ     0x0020	; 内核栈段的描述符选择子(RPL=00)
    32                              <1>     RESVD_DESC_SEL      equ     0x002b	; 保留的描述符选择子
    33                              <1>     USER_CODE64_SEL     equ     0x003b	; 3 特权级代码段的描述符选择子(RPL=11)
    34                              <1>     USER_STACK64_SEL    equ     0x0033	; 3 特权级栈段的描述符选择子(RPL=11)
    35                              <1> 
    36                              <1>     PHY_MEMORY_SIZE     equ     32    	            ; 物理内存大小(MB), 要求至少 3MB
    37                              <1>     CORE_ALLOC_START    equ     0xffff800000200000	; 在虚拟地址空间高端(内核)分配内存时的起始地址
    38                              <1>     USER_ALLOC_START    equ     0x0000000000000000	; 在每个任务虚拟地址空间低端分配内存时的起始地址
    39                              <1> 
    40                              <1>     ; 创建任务时, 需要分配一个物理页作为新任务的 4 级头表, 并分配一个临时的线性地址来初始化这个页
    41                              <1>     NEW_PML4_LINEAR     equ     0xffffff7ffffff000	; 用来映射新任务 4 级头表的线性地址
    42                              <1>     LAPIC_START_ADDR    equ     0xffffff7fffffe000	; LOCAL APIC 寄存器的起始线性地址
    43                              <1>     IOAPIC_START_ADDR   equ     0xffffff7fffffd000	; I/O APIC 寄存器的起始线性地址
    44                              <1>     AP_START_UP_ADDR    equ     0x0000f000 	        ; 应用处理器(AP)启动代码的物理地址
    45                              <1>     SUGG_PREEM_SLICE    equ     55          	    ; 推荐的任务/线程抢占时间片长度(毫秒)
    46                              <1> 
    47                              <1>     ; 多处理器环境下的自旋锁加锁宏。需要两个参数: 寄存器, 以及一个对应宽度的锁变量
    48                              <1>     %macro  SET_SPIN_LOCK 2             ; 两个参数, 分别是寄存器 %1 和锁变量 %2
    49                              <1>             %%spin_lock:
    50                              <1>                     cmp %2, 0           ; 看一眼锁现在是不是 0
    51                              <1>                     je %%get_lock      	; 如果是 0，说明没人占，跳过去抢
    52                              <1>                     pause				; 不是 0，先喘口气（降低 CPU 占用）, 见书中 341 页
    53                              <1>                     jmp %%spin_lock    	; 继续看
    54                              <1>             %%get_lock:
    55                              <1>                     mov %1, 1
    56                              <1>                     xchg %1, %2         ; 用 xchg 的“原子交换”能力抢锁，抢不到就一直循环（自旋）
    57                              <1>                     cmp %1, 0          	; 交换回来的 %2 旧值是 0 吗？
    58                              <1>                     jne %%spin_lock   	; 不是 0 说明别人先插了旗，回到开头重抢
    59                              <1>     %endmacro
    60                              <1> 
    61                              <1> %endif
     4                                  
     5                                  SECTION core_header                                 ; 内核头部
     6 00000000 [00000000]                  length      dd core_end                         ; 内核总长度
     7 00000004 [B5110000]                  init_entry  dd init                             ; 内核入口点
     8 00000008 0000000000000000            position    dq 0                                ; 内核加载虚拟地址
     9                                  
    10                                  SECTION core_data                                   ; 内核数据段
    11 00000000 41435049206973206E-         acpi_error  db "ACPI is not supported or data error.", 0x0d, 0x0a, 0
    11 00000009 6F7420737570706F72-
    11 00000012 746564206F72206461-
    11 0000001B 7461206572726F722E-
    11 00000024 0D0A00             
    12                                  
    13 00000027 00                          num_cpus    db 0                                ; 逻辑处理器数量
    14 00000028 00<rep 100h>                cpu_list    times 256 db 0                      ; Local APIC ID的列表
    15 00000128 00000000                    lapic_addr  dd 0                                ; Local APIC的物理地址
    16                                  
    17 0000012C 00000000                    ioapic_addr dd 0                                ; I/O APIC的物理地址
    18 00000130 00                          ioapic_id   db 0                                ; I/O APIC ID
    19                                  
    20 00000131 00                          ack_cpus    db 0                                ; 处理器初始化应答计数
    21                                  
    22 00000132 00000000                    clocks_1ms  dd 0                                ; 处理器在1ms内经历的时钟数
    23                                  
    24 00000136 457865637574696E67-         welcome     db "Executing in 64-bit mode.Init MP", 249, 0
    24 0000013F 20696E2036342D6269-
    24 00000148 74206D6F64652E496E-
    24 00000151 6974204D50F900     
    25 00000158 204350552873292072-         cpu_init_ok db " CPU(s) ready.", 0x0d, 0x0a, 0
    25 00000161 656164792E0D0A00   
    26                                  
    27 00000169 00<rep 100h>                buffer      times 256 db 0
    28                                  
    29 00000269 [1D09000000000000]          sys_entry   dq get_screen_row                   ; #0
    30 00000271 [8208000000000000]                      dq get_cmos_time                    ; #1
    31 00000279 [DE00000000000000]                      dq put_cstringxy64                  ; #2
    32 00000281 [F20F000000000000]                      dq create_process                   ; #3
    33 00000289 [2F0E000000000000]                      dq get_current_pid                  ; #4
    34 00000291 [7C0E000000000000]                      dq terminate_process                ; #5
    35 00000299 [2809000000000000]                      dq get_cpu_number                   ; #6
    36 000002A1 [E00E000000000000]                      dq create_thread                    ; #7
    37 000002A9 [180E000000000000]                      dq get_current_tid                  ; #8
    38 000002B1 [460E000000000000]                      dq thread_exit                      ; #9
    39 000002B9 [3B09000000000000]                      dq memory_allocate                  ; #10
    40 000002C1 0000000000000000            pcb_ptr     dq 0                                ; 进程控制块PCB首节点的线性地址
    41                                  
    42                                  
    43                                  SECTION core_code                                   ; 内核代码段
    44                                  
    45                                  %include "./common/core_utils64.asm"
     1                              <1> ; 内核通用代码
     2                              <1> 
     3                              <1> ; 在多处理器环境中使用时, 需要在内核程序中定义宏 __MP__
     4                              <1> 
     5                              <1> %include "./common/global_defs.asm"
     1                              <2> ; 全局常量定义
     2                              <2> 
     3                              <2> %ifndef _GLOBAL_DEFS_
     4                              <2>     %define _GLOBAL_DEFS_
     5                              <2> 
     6                              <2>     SDA_PHY_ADDR        equ     0x00007e00	; 系统数据区的起始物理地址
     7                              <2>     PML5_PHY_ADDR       equ     0x00009000	; 内核 5 级头表物理地址
     8                              <2>     PML4_PHY_ADDR       equ     0x0000a000	; 内核 4 级头表物理地址
     9                              <2>     PDPT_PHY_ADDR       equ     0x0000b000	; 对应于低端 2MB 的内核页目录指针表物理地址
    10                              <2>     PDT_PHY_ADDR        equ     0x0000c000	; 对应于低端 2MB 的页目录表物理地址
    11                              <2>     PT_PHY_ADDR         equ     0x0000d000	; 对应于低端 2MB 的内核页表的物理地址
    12                              <2>     IDT_PHY_ADDR        equ     0x0000e000	; 中断描述符表的物理地址
    13                              <2>     LDR_PHY_ADDR        equ     0x0000f000	; 用于安装内核加载器的起始物理地址
    14                              <2>     GDT_PHY_ADDR        equ     0x00010000	; 全局描述符表 GDT 的物理地址
    15                              <2>     CORE_PHY_ADDR       equ     0x00020000	; 内核的起始物理地址
    16                              <2>     COR_PDPT_ADDR       equ     0x00100000	; 从这个物理地址开始的 1MB 是内核的 254 个页目录指针表
    17                              <2> 
    18                              <2>     LDR_START_SECTOR    equ     1      	        ; 内核加载器在硬盘上的起始逻辑扇区号
    19                              <2>     COR_START_SECTOR    equ     9      	        ; 内核程序在硬盘上的起始逻辑扇区号
    20                              <2> 
    21                              <2>     ; 虚拟内存空间的高端起始于线性地址 0xffff800000000000
    22                              <2>     UPPER_LINEAR_START  equ     0xffff800000000000  
    23                              <2>     UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR	    ; 内核的高端线性地址
    24                              <2>     UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000	        ; 文本显示缓冲区的高端起始线性地址
    25                              <2>     UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR	    ; 系统数据区的高端线性地址
    26                              <2>     UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR	    ; GDT 的高端线性地址
    27                              <2>     UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR	    ; IDT 的高端线性地址
    28                              <2> 
    29                              <2>     ; 与全局描述符表有关的选择子定义, 及内存管理有关的常量定义
    30                              <2>     CORE_CODE64_SEL     equ     0x0018	; 内核代码段的描述符选择子(RPL=00)
    31                              <2>     CORE_STACK64_SEL    equ     0x0020	; 内核栈段的描述符选择子(RPL=00)
    32                              <2>     RESVD_DESC_SEL      equ     0x002b	; 保留的描述符选择子
    33                              <2>     USER_CODE64_SEL     equ     0x003b	; 3 特权级代码段的描述符选择子(RPL=11)
    34                              <2>     USER_STACK64_SEL    equ     0x0033	; 3 特权级栈段的描述符选择子(RPL=11)
    35                              <2> 
    36                              <2>     PHY_MEMORY_SIZE     equ     32    	            ; 物理内存大小(MB), 要求至少 3MB
    37                              <2>     CORE_ALLOC_START    equ     0xffff800000200000	; 在虚拟地址空间高端(内核)分配内存时的起始地址
    38                              <2>     USER_ALLOC_START    equ     0x0000000000000000	; 在每个任务虚拟地址空间低端分配内存时的起始地址
    39                              <2> 
    40                              <2>     ; 创建任务时, 需要分配一个物理页作为新任务的 4 级头表, 并分配一个临时的线性地址来初始化这个页
    41                              <2>     NEW_PML4_LINEAR     equ     0xffffff7ffffff000	; 用来映射新任务 4 级头表的线性地址
    42                              <2>     LAPIC_START_ADDR    equ     0xffffff7fffffe000	; LOCAL APIC 寄存器的起始线性地址
    43                              <2>     IOAPIC_START_ADDR   equ     0xffffff7fffffd000	; I/O APIC 寄存器的起始线性地址
    44                              <2>     AP_START_UP_ADDR    equ     0x0000f000 	        ; 应用处理器(AP)启动代码的物理地址
    45                              <2>     SUGG_PREEM_SLICE    equ     55          	    ; 推荐的任务/线程抢占时间片长度(毫秒)
    46                              <2> 
    47                              <2>     ; 多处理器环境下的自旋锁加锁宏。需要两个参数: 寄存器, 以及一个对应宽度的锁变量
    48                              <2>     %macro  SET_SPIN_LOCK 2             ; 两个参数, 分别是寄存器 %1 和锁变量 %2
    49                              <2>             %%spin_lock:
    50                              <2>                     cmp %2, 0           ; 看一眼锁现在是不是 0
    51                              <2>                     je %%get_lock      	; 如果是 0，说明没人占，跳过去抢
    52                              <2>                     pause				; 不是 0，先喘口气（降低 CPU 占用）, 见书中 341 页
    53                              <2>                     jmp %%spin_lock    	; 继续看
    54                              <2>             %%get_lock:
    55                              <2>                     mov %1, 1
    56                              <2>                     xchg %1, %2         ; 用 xchg 的“原子交换”能力抢锁，抢不到就一直循环（自旋）
    57                              <2>                     cmp %1, 0          	; 交换回来的 %2 旧值是 0 吗？
    58                              <2>                     jne %%spin_lock   	; 不是 0 说明别人先插了旗，回到开头重抢
    59                              <2>     %endmacro
    60                              <2> 
    61                              <2> %endif
     6                              <1> 
     7                              <1> 	[bits 64]
     8                              <1> 
     9                              <1> ; ------------------------------------------------------------
    10                              <1> ; put_string64
    11                              <1> ; 功能: 显示 0 终止的字符串并移动光标
    12                              <1> ; 输入: rbx=字符串的线性地址
    13                              <1> ; ------------------------------------------------------------
    14                              <1> %ifdef __MP__
    15                              <1> _prn_str_locker dq 0
    16                              <1> %endif
    17                              <1> 
    18                              <1> put_string64:
    19 00000000 53                  <1> 	push rbx 
    20 00000001 51                  <1> 	push rcx 
    21                              <1> 
    22 00000002 9C                  <1> 	pushfq 
    23 00000003 FA                  <1> 	cli 
    24                              <1> %ifdef __MP__
    25                              <1> 	SET_SPIN_LOCK rcx, qword [rel _prn_str_locker]		; 上锁
    26                              <1> %endif 
    27                              <1> 
    28                              <1> .getc:
    29 00000004 8A0B                <1> 	mov cl, [rbx]
    30 00000006 08C9                <1> 	or cl, cl 							; 检查是不是 0
    31 00000008 740A                <1> 	jz .exit 							; 如果是 0 跳转到退出代码
    32 0000000A E809000000          <1> 	call put_char 
    33 0000000F 48FFC3              <1> 	inc rbx 
    34 00000012 EBF0                <1> 	jmp .getc
    35                              <1> 
    36                              <1> .exit:
    37                              <1> %ifdef __MP__ 
    38                              <1> 	mov qword [rel _prn_str_locker], 0					; 释放锁
    39                              <1> %endif
    40 00000014 9D                  <1> 	popfq
    41                              <1> 
    42 00000015 59                  <1> 	pop rcx 
    43 00000016 5B                  <1> 	pop rbx 
    44                              <1> 
    45 00000017 C3                  <1> 	ret 
    46                              <1> 	
    47                              <1> ; ------------------------------------------------------------
    48                              <1> ; put_char
    49                              <1> ; 功能: 在屏幕上的当前光标处显示一个字符并推进光标(ldr.asm 中 put_char 的 64 位版本)
    50                              <1> ; 输入: cl=字符ASCII码
    51                              <1> ; ------------------------------------------------------------
    52                              <1> put_char:
    53 00000018 50                  <1> 	push rax 
    54 00000019 53                  <1> 	push rbx 
    55 0000001A 51                  <1> 	push rcx 
    56 0000001B 52                  <1> 	push rdx 
    57 0000001C 56                  <1> 	push rsi 
    58 0000001D 57                  <1> 	push rdi 
    59                              <1> 
    60                              <1> 	; 获取光标位置
    61 0000001E 66BAD403            <1> 	mov dx, 0x3d4
    62 00000022 B00E                <1> 	mov al, 0x0e 
    63 00000024 EE                  <1> 	out dx, al 
    64 00000025 66FFC2              <1> 	inc dx 
    65 00000028 EC                  <1> 	in al, dx 								; 高字
    66 00000029 88C4                <1> 	mov ah, al 
    67                              <1> 
    68 0000002B 66FFCA              <1> 	dec dx 
    69 0000002E B00F                <1> 	mov al, 0x0f 
    70 00000030 EE                  <1> 	out dx, al 
    71 00000031 66FFC2              <1> 	inc dx 
    72 00000034 EC                  <1> 	in al, dx 								; 低字
    73 00000035 6689C3              <1> 	mov bx, ax 								; 此时 bx 中存储了字符的数目, 一个字符占两个字节
    74 00000038 4881E3FFFF0000      <1> 	and rbx, 0x000000000000ffff 			; 准备使用 64 位寻址方式访问显存
    75                              <1> 
    76 0000003F 80F90D              <1> 	cmp cl, 0x0d							; 回车符?
    77 00000042 750E                <1> 	jnz .put_0a
    78 00000044 6689D8              <1> 	mov ax, bx 
    79 00000047 B350                <1> 	mov bl, 80
    80 00000049 F6F3                <1> 	div bl 
    81 0000004B F6E3                <1> 	mul bl 									; 移到本行起始
    82 0000004D 6689C3              <1> 	mov bx, ax 	
    83 00000050 EB6C                <1> 	jmp .set_cursor
    84                              <1> 
    85                              <1> .put_0a:
    86 00000052 80F90A              <1> 	cmp cl, 0x0a 							; 换行符?
    87 00000055 7506                <1> 	jnz .put_other
    88 00000057 6683C350            <1> 	add bx, 80								; 平移一行
    89 0000005B EB16                <1> 	jmp .roll_screen
    90                              <1> 
    91                              <1> .put_other:						
    92 0000005D 66D1E3              <1> 	shl bx, 1								; 转换成字节数
    93 00000060 48B800800B000080FF- <1> 	mov rax, UPPER_TEXT_VIDEO
    93 00000069 FF                  <1>
    94 0000006A 880C18              <1> 	mov [rax + rbx], cl 					; 写入字符
    95                              <1> 
    96 0000006D 66D1EB              <1> 	shr bx, 1								; 转回字符数
    97 00000070 66FFC3              <1> 	inc bx 
    98                              <1> 
    99                              <1> .roll_screen:
   100 00000073 6681FBD007          <1> 	cmp bx, 2000							; 光标超出屏幕? 滚屏
   101 00000078 7C44                <1> 	jl .set_cursor 
   102                              <1> 	
   103 0000007A 6653                <1> 	push bx 
   104                              <1> 
   105 0000007C FC                  <1> 	cld 									; 清除方向标志位
   106 0000007D 48BEA0800B000080FF- <1> 	mov rsi, UPPER_TEXT_VIDEO + 0xa0		; 源地址
   106 00000086 FF                  <1>
   107 00000087 48BF00800B000080FF- <1> 	mov rdi, UPPER_TEXT_VIDEO				; 目标地址
   107 00000090 FF                  <1>
   108 00000091 B9E0010000          <1> 	mov rcx, 480							; 480 == 24 x 80 x 2 / 8。前 24 行向上平移一行
   109 00000096 F348A5              <1> 	rep movsq								
   110                              <1> 
   111 00000099 66BB000F            <1> 	mov bx, 3840							; 24 x 80 x 2。清除最后一行
   112 0000009D B950000000          <1> 	mov rcx, 80
   113                              <1> .cls:
   114 000000A2 48B800800B000080FF- <1> 	mov rax, UPPER_TEXT_VIDEO
   114 000000AB FF                  <1>
   115 000000AC 66C704182007        <1> 	mov word [rax + rbx], 0x0720
   116 000000B2 6683C302            <1> 	add bx, 2 
   117 000000B6 E2EA                <1> 	loop .cls 
   118                              <1> 
   119 000000B8 665B                <1> 	pop bx 									; 考虑换行符
   120 000000BA 6683EB50            <1> 	sub bx, 80
   121                              <1> 
   122                              <1> .set_cursor:
   123 000000BE 66BAD403            <1> 	mov dx, 0x3d4
   124 000000C2 B00E                <1> 	mov al, 0x0e 
   125 000000C4 EE                  <1> 	out dx, al 
   126 000000C5 66FFC2              <1> 	inc dx 									; 0x3d5
   127 000000C8 88F8                <1> 	mov al, bh 
   128 000000CA EE                  <1> 	out dx, al 
   129                              <1> 
   130 000000CB 66FFCA              <1> 	dec dx 									; 0x3d4
   131 000000CE B00F                <1> 	mov al, 0x0f 
   132 000000D0 EE                  <1> 	out dx, al 
   133 000000D1 66FFC2              <1> 	inc dx 									; 0x3d5
   134 000000D4 88D8                <1> 	mov al, bl 
   135 000000D6 EE                  <1> 	out dx, al 
   136                              <1> 
   137 000000D7 5F                  <1> 	pop rdi 
   138 000000D8 5E                  <1> 	pop rsi 
   139 000000D9 5A                  <1> 	pop rdx 
   140 000000DA 59                  <1> 	pop rcx 
   141 000000DB 5B                  <1> 	pop rbx 
   142 000000DC 58                  <1> 	pop rax 
   143                              <1> 
   144 000000DD C3                  <1> 	ret 
   145                              <1> 
   146                              <1> ; ------------------------------------------------------------
   147                              <1> ; put_cstringxy64
   148                              <1> ; 功能: 在指定位置用指定颜色显示 0 终止的字符串，只适用于打印图形字符。由于各程序打印时的坐标位置不同，互不干扰，不需要加锁和互斥。
   149                              <1> ; 输入: rbx=字符串首地址, dh=行, dl=列, r9b=颜色属性
   150                              <1> ; ------------------------------------------------------------
   151                              <1> %ifdef __MP__ 
   152                              <1> _prnxy_locker dq 0
   153                              <1> %endif 
   154                              <1> 
   155                              <1> put_cstringxy64:
   156 000000DE 50                  <1> 	push rax 
   157 000000DF 53                  <1> 	push rbx 
   158 000000E0 51                  <1> 	push rcx 
   159 000000E1 52                  <1> 	push rdx 
   160 000000E2 4150                <1> 	push r8 
   161                              <1> 
   162                              <1> 	; 指定坐标位置在显存内的偏移量
   163 000000E4 88F0                <1> 	mov al, dh 
   164 000000E6 B5A0                <1> 	mov ch, 160									; 每行 80 个字符, 占用 160 字节
   165 000000E8 F6E5                <1> 	mul ch 
   166 000000EA D0E2                <1> 	shl dl, 1									; 每个字符占两字节
   167 000000EC 6681E2FF00          <1> 	and dx, 0x00ff
   168 000000F1 6601D0              <1> 	add ax, dx 									; 得到相应显存偏移
   169 000000F4 4825FFFF0000        <1> 	and rax, 0x000000000000ffff
   170                              <1> 
   171 000000FA 9C                  <1> 	pushfq										; 将 RFLAGS 寄存器的全部 64 位标志位压入当前栈顶
   172 000000FB FA                  <1> 	cli 
   173                              <1> 
   174                              <1> %ifdef __MP__									; 读写显存时加锁
   175                              <1> 	SET_SPIN_LOCK r8, qword [rel _prnxy_locker]
   176                              <1> %endif 
   177                              <1> 
   178 000000FC 49B800800B000080FF- <1> 	mov r8, UPPER_TEXT_VIDEO					; 显存起始线性地址
   178 00000105 FF                  <1>
   179                              <1> .nextc:
   180 00000106 8A13                <1> 	mov dl, [rbx]								; 获取将要显示的字符
   181 00000108 08D2                <1> 	or dl, dl 
   182 0000010A 7412                <1> 	jz .exit 
   183 0000010C 41881400            <1> 	mov byte [r8 + rax], dl 					; 字符内容
   184 00000110 45884C0001          <1> 	mov byte [r8 + rax + 1], r9b 				; 字符颜色
   185 00000115 48FFC3              <1> 	inc rbx 
   186 00000118 4883C002            <1> 	add rax, 2
   187 0000011C EBE8                <1> 	jmp .nextc
   188                              <1> .exit:
   189 0000011E 4D31C0              <1> 	xor r8, r8 
   190                              <1> 
   191                              <1> %ifdef __MP__									; 读写显存时释放锁
   192                              <1> 	mov qword [rel _prnxy_locker], 0
   193                              <1> %endif 
   194                              <1> 
   195 00000121 9D                  <1> 	popfq 
   196                              <1> 
   197 00000122 4158                <1> 	pop r8 
   198 00000124 5A                  <1> 	pop rdx 
   199 00000125 59                  <1> 	pop rcx 
   200 00000126 5B                  <1> 	pop rbx 
   201 00000127 58                  <1> 	pop rax 
   202                              <1> 
   203 00000128 C3                  <1> 	ret 
   204                              <1> 
   205                              <1> ; ------------------------------------------------------------
   206                              <1> ; make_interrupt_gate
   207                              <1> ; 功能: 创建 64 位的中断门
   208                              <1> ; 输入: rax=处理程序的线性地址
   209                              <1> ; 输出: rdi 与 rsi 组成中断门(中断门、陷阱门格式见书中 148 页)
   210                              <1> ; ------------------------------------------------------------
   211                              <1> make_interrupt_gate:
   212 00000129 4889C7              <1> 	mov rdi, rax 
   213 0000012C 48C1EF20            <1> 	shr rdi, 32 						; 门的高 64 位, 其中高 32 位是保留
   214                              <1> 
   215 00000130 50                  <1> 	push rax 							; 借助栈构造, 先压入完整 rax, 也就是门的低 64 位, 在对其修改
   216 00000131 66C74424021800      <1> 	mov word [rsp + 2], CORE_CODE64_SEL	; 填入选择子
   217 00000138 89442404            <1> 	mov [rsp + 4], eax 					; 填入线性地址 31~16 位
   218 0000013C 66C7442404008E      <1> 	mov word [rsp + 4], 0x8e00			; 填入属性, P=1, TYPE=64 的中断门, 覆盖填入
   219 00000143 5E                  <1> 	pop rsi 
   220                              <1> 
   221 00000144 C3                  <1> 	ret 								; 可以参考书中 155 页的图
   222                              <1> 
   223                              <1> ; ------------------------------------------------------------
   224                              <1> ; make_tss_descriptor
   225                              <1> ; 功能: 创建 64 位的 TSS 描述符
   226                              <1> ; 输入: rax=TSS 的线性地址
   227                              <1> ; 输出: rdi:rsi=TSS 描述符(LDT, TSS 描述符格式见书中 200 页)
   228                              <1> ; ------------------------------------------------------------
   229                              <1> make_tss_descriptor:
   230 00000145 50                  <1> 	push rax 
   231                              <1> 
   232 00000146 4889C7              <1> 	mov rdi, rax 
   233 00000149 48C1EF20            <1> 	shr rdi, 32							; 得到门高 64 位, 存在 rdi 中
   234                              <1> 
   235 0000014D 50                  <1> 	push rax 							; 借助栈构造, 先压入完整 rax, 也就是门的低 64 位, 在对其修改
   236 0000014E 48C1242410          <1> 	shl qword [rsp], 16 				; 将线性地址 23~0 位移到正确位置
   237 00000153 66C704246800        <1> 	mov word [rsp], 104					; 填入段界限标准长度
   238 00000159 8A442405            <1> 	mov al, [rsp + 5]
   239 0000015D 88442407            <1> 	mov [rsp + 7], al 					; 将线性地址 31~24 位移到正确位置
   240 00000161 C644240589          <1> 	mov byte [rsp + 5], 0x89 			; P=1, DPL=0, TYPE=0b1001(64 位 TSS)
   241 00000166 C644240600          <1> 	mov byte [rsp + 6], 0				; G, 0, 0, AVL, limit
   242 0000016B 5E                  <1> 	pop rsi								; 门低 64 位
   243                              <1> 
   244 0000016C 58                  <1> 	pop rax 
   245                              <1> 
   246 0000016D C3                  <1> 	ret 
   247                              <1> 
   248                              <1> ; ------------------------------------------------------------
   249                              <1> ; mount_idt_entry
   250                              <1> ; 功能: 在中断描述符表 IDT 中安装门描述符
   251                              <1> ; 输入: r8=中断向量, rdi 与 rsi 组成中断门
   252                              <1> ; ------------------------------------------------------------
   253                              <1> mount_idt_entry:
   254 0000016E 4150                <1> 	push r8
   255 00000170 4151                <1> 	push r9 
   256                              <1> 
   257 00000172 49C1E004            <1> 	shl r8, 4 							; 中断号乘以 16 得到表内偏移, 每个中断门 16 字节大小
   258 00000176 49B900E000000080FF- <1> 	mov r9, UPPER_IDT_LINEAR			; 中断描述符表的高端地址
   258 0000017F FF                  <1>
   259 00000180 4B893401            <1> 	mov [r9 + r8], rsi 
   260 00000184 4B897C0108          <1> 	mov [r9 + r8 + 8], rdi 
   261                              <1> 
   262 00000189 4159                <1> 	pop r9 
   263 0000018B 4158                <1> 	pop r8 
   264                              <1> 
   265 0000018D C3                  <1> 	ret  
   266                              <1> 
   267                              <1> ; ------------------------------------------------------------
   268                              <1> ; init_8259
   269                              <1> ; 功能: 初始化8259中断控制器，包括重新设置向量号
   270                              <1> ; ------------------------------------------------------------
   271                              <1> init_8259:
   272 0000018E 50                  <1> 	push rax
   273                              <1> 
   274 0000018F B011                <1> 	mov al, 0x11
   275 00000191 E620                <1> 	out 0x20, al                    	; ICW1: 边沿触发/级联方式
   276 00000193 B020                <1> 	mov al, 0x20
   277 00000195 E621                <1> 	out 0x21, al  						; ICW2: 起始中断向量（避开前31个异常的向量）
   278 00000197 B004                <1> 	mov al, 0x04
   279 00000199 E621                <1> 	out 0x21, al  						; ICW3: 从片级联到 IR2
   280 0000019B B001                <1> 	mov al, 0x01
   281 0000019D E621                <1> 	out 0x21, al                  		; ICW4: 非总线缓冲，全嵌套，正常 EOI
   282                              <1> 
   283 0000019F B011                <1> 	mov al, 0x11
   284 000001A1 E6A0                <1> 	out 0xa0, al                  		; ICW1: 边沿触发/级联方式
   285 000001A3 B028                <1> 	mov al, 0x28
   286 000001A5 E6A1                <1> 	out 0xa1, al                  		; ICW2: 起始中断向量-->0x28
   287 000001A7 B002                <1> 	mov al, 0x02
   288 000001A9 E6A1                <1> 	out 0xa1, al                  		; ICW3: 从片识别标志，级联到主片 IR2
   289 000001AB B001                <1> 	mov al, 0x01
   290 000001AD E6A1                <1> 	out 0xa1, al                  		; ICW4: 非总线缓冲，全嵌套，正常 EOI
   291                              <1> 
   292 000001AF 58                  <1> 	pop rax
   293 000001B0 C3                  <1> 	ret
   294                              <1> 
   295                              <1> ; ------------------------------------------------------------
   296                              <1> ; read_hard_disk_0
   297                              <1> ; 功能: 从硬盘读取一个逻辑扇区
   298                              <1> ; 输入: rax=逻辑扇区号, rbx=目标缓冲区线性地址
   299                              <1> ; 输出: rbx=rbx+512
   300                              <1> ; ------------------------------------------------------------
   301                              <1> %ifdef __MP__
   302                              <1> _read_hdd_locker dq 0						
   303                              <1> %endif
   304                              <1> 
   305                              <1> read_hard_disk_0:
   306 000001B1 50                  <1> 	push rax 
   307 000001B2 51                  <1> 	push rcx 
   308 000001B3 52                  <1> 	push rdx 
   309 000001B4 9C                  <1> 	pushfq
   310                              <1> 
   311 000001B5 FA                  <1> 	cli 
   312                              <1> 
   313                              <1> %ifdef __MP__
   314                              <1> 	SET_SPIN_LOCK rdx, qword [rel _read_hdd_locker]
   315                              <1> %endif
   316                              <1> 
   317 000001B6 50                  <1> 	push rax 
   318                              <1> 
   319 000001B7 66BAF201            <1> 	mov dx, 0x1f2 								; 0x1f2
   320 000001BB B001                <1> 	mov al, 1
   321 000001BD EE                  <1> 	out dx, al 									; 读取扇区数
   322                              <1> 
   323 000001BE 66FFC2              <1> 	inc dx 										; 0x1f3 
   324 000001C1 58                  <1> 	pop rax 
   325 000001C2 EE                  <1> 	out dx, al 									; LBA 地址 7~0
   326                              <1> 
   327 000001C3 B108                <1> 	mov cl, 8 
   328                              <1> 
   329 000001C5 66FFC2              <1> 	inc dx 										; 0x1f4
   330 000001C8 48D3E8              <1> 	shr rax, cl 
   331 000001CB EE                  <1> 	out dx, al 									; LBA 地址 15~8
   332                              <1> 
   333 000001CC 66FFC2              <1> 	inc dx 										; 0x1f5
   334 000001CF 48D3E8              <1> 	shr rax, cl 
   335 000001D2 EE                  <1> 	out dx, al 									; LBA 地址 23~16
   336                              <1> 
   337 000001D3 66FFC2              <1> 	inc dx 										; 0x1f6
   338 000001D6 48D3E8              <1> 	shr rax, cl 
   339 000001D9 0CE0                <1> 	or al, 0xe0 								; 第一硬盘, LBA 地址 27~24
   340 000001DB EE                  <1> 	out dx, al 
   341                              <1> 
   342 000001DC 66FFC2              <1> 	inc dx 										; 0x1f6
   343 000001DF B020                <1> 	mov al, 0x20 								; 读命令
   344 000001E1 EE                  <1> 	out dx, al 
   345                              <1> 
   346                              <1> .waits:
   347 000001E2 EC                  <1> 	in al, dx 
   348 000001E3 A808                <1> 	test al, 8
   349 000001E5 74FB                <1> 	jz .waits
   350                              <1> 	; 不忙且硬盘已经准备好传输数据
   351 000001E7 B900010000          <1> 	mov rcx, 256								; 总共要读的字数=2字节
   352 000001EC 66BAF001            <1> 	mov dx, 0x1f0 
   353                              <1> .readw:
   354 000001F0 66ED                <1> 	in ax, dx 
   355 000001F2 668903              <1> 	mov [rbx], ax 
   356 000001F5 4883C302            <1> 	add rbx, 2
   357 000001F9 E2F5                <1> 	loop .readw 
   358                              <1> 
   359                              <1> %ifdef __MP__
   360                              <1> 	mov qword [rel _read_hdd_locker], 0
   361                              <1> %endif
   362                              <1> 
   363 000001FB 9D                  <1> 	popfq
   364 000001FC 5A                  <1> 	pop rdx 
   365 000001FD 59                  <1> 	pop rcx 
   366 000001FE 58                  <1> 	pop rax 
   367                              <1> 
   368 000001FF C3                  <1> 	ret 
   369                              <1> 
   370                              <1> ; ------------------------------------------------------------
   371                              <1> ; allocate_a_4k_page
   372                              <1> ; 功能: 分配一个 4KB 的页
   373                              <1> ; 输出: rax=页的物理地址
   374                              <1> ; ------------------------------------------------------------	
   375 00000200 FF<rep 40h>         <1> _page_bit_map times 2 * 1024 / 4 / 8 db 0xff 		; 对应物理内存前 512 页(2MB), 见书中 193 页
   376 00000240 00<rep 3C0h>        <1> 	times (PHY_MEMORY_SIZE - 2) * 1024 / 4 / 8 db 0	; 存放后续的页面
   377                              <1> _page_map_len equ $ - _page_bit_map
   378                              <1> 
   379                              <1> allocate_a_4k_page:
   380 00000600 4831C0              <1> 	xor rax, rax 
   381                              <1> .b1:
   382 00000603 F0480FAB05F4FBFFFF  <1> 	lock bts [rel _page_bit_map], rax 				; 多处理器需要 lock, 这是一个指令前缀，用于将随后的指令变成原子操作
   383 0000060C 730B                <1> 	jnc .b2 
   384 0000060E 48FFC0              <1> 	inc rax 
   385 00000611 483D00200000        <1> 	cmp rax, _page_map_len * 8
   386 00000617 7CEA                <1> 	jl .b1 
   387                              <1> 
   388                              <1> 	; 对我们这个简单的系统来说，通常不存在页面不够分配的情况。对于一个流行的系统来说, 
   389                              <1> 	; 如果页面不够分配，需要在这里执行虚拟内存管理，即，回收已经注销的页面，或者执行页面的换入和换出。
   390                              <1> .b2:
   391 00000619 48C1E00C            <1> 	shl rax, 12										; rax 是位数, 转换为内存要乘 4098
   392                              <1> 
   393 0000061D C3                  <1> 	ret 
   394                              <1> 
   395                              <1> ; ------------------------------------------------------------
   396                              <1> ; lin_to_lin_of_pml4e
   397                              <1> ; 功能: 返回指定的线性地址所对应的 4 级头表项的线性地址
   398                              <1> ; 输入: r13=线性地址
   399                              <1> ; 输出: r14=对应的 4 级头表项的线性地址
   400                              <1> ; ------------------------------------------------------------
   401                              <1> lin_to_lin_of_pml4e:
   402 0000061E 4155                <1> 	push r13 
   403                              <1> 
   404 00000620 49BE0000000080FF00- <1> 	mov r14, 0x0000_ff80_0000_0000 			; 保留 4 级头表索引部分
   404 00000629 00                  <1>
   405 0000062A 4D21F5              <1> 	and r13, r14 	
   406 0000062D 49C1ED24            <1> 	shr r13, 36								; 右移到低位, 相当于偏移 = 索引 * 8
   407                              <1> 
   408                              <1> 	; 这个利用了递归映射, 还记得在 ldr.asm 中我们将 4 级头表中最后一个项填入了其本身的地址, 
   409                              <1> 	; 而 0xffff_ffff_ffff_f000 这个线性地址前缀会一直访问最后一个表项, 得到的也一直是 4 级头表的地址
   410 00000631 49C7C600F0FFFF      <1> 	mov r14, 0xffff_ffff_ffff_f000			; 访问 4 级头表所用的地址前缀
   411 00000638 4D01EE              <1> 	add r14, r13 							
   412                              <1> 
   413 0000063B 415D                <1> 	pop r13 
   414                              <1> 
   415 0000063D C3                  <1> 	ret 
   416                              <1> 
   417                              <1> ; ------------------------------------------------------------
   418                              <1> ; lin_to_lin_of_pdpte
   419                              <1> ; 功能: 返回指定的线性地址所对应的页目录指针项的线性地址
   420                              <1> ; 输入: r13=线性地址
   421                              <1> ; 输出: r14=对应的页目录指针项的线性地址
   422                              <1> ; ------------------------------------------------------------
   423                              <1> lin_to_lin_of_pdpte:
   424 0000063E 4155                <1> 	push r13 
   425                              <1> 
   426 00000640 49BE000000C0FFFF00- <1> 	mov r14, 0x0000_ffff_c000_0000			; 保留 4 级头表索引和页目录指针表索引部分
   426 00000649 00                  <1>
   427 0000064A 4D21F5              <1> 	and r13, r14 
   428 0000064D 49C1ED1B            <1> 	shr r13, 27								
   429                              <1> 
   430                              <1> 	; 同上
   431 00000651 49C7C60000E0FF      <1> 	mov r14, 0xffff_ffff_ffe0_0000
   432 00000658 4D01EE              <1> 	add r14, r13 
   433                              <1> 
   434 0000065B 415D                <1> 	pop r13
   435                              <1> 
   436 0000065D C3                  <1> 	ret 
   437                              <1> 
   438                              <1> ; ------------------------------------------------------------
   439                              <1> ; lin_to_lin_of_pdte
   440                              <1> ; 功能: 返回指定的线性地址所对应的页目录项的线性地址
   441                              <1> ; 输入: r13=线性地址
   442                              <1> ; 输出: r14=对应的页目录项的线性地址
   443                              <1> ; ------------------------------------------------------------
   444                              <1> lin_to_lin_of_pdte:
   445 0000065E 4155                <1> 	push r13 
   446                              <1> 
   447 00000660 49BE0000E0FFFFFF00- <1> 	mov r14, 0x0000_ffff_ffe0_0000			; 保留 4 级头表索引、页目录指针表索引和页目录表
   447 00000669 00                  <1>
   448 0000066A 4D21F5              <1> 	and r13, r14 
   449 0000066D 49C1ED12            <1> 	shr r13, 18								
   450                              <1> 
   451                              <1> 	; 同上
   452 00000671 49C7C6000000C0      <1> 	mov r14, 0xffff_ffff_c000_0000
   453 00000678 4D01EE              <1> 	add r14, r13 
   454                              <1> 
   455 0000067B 415D                <1> 	pop r13
   456                              <1> 
   457 0000067D C3                  <1> 	ret 
   458                              <1> 
   459                              <1> ; ------------------------------------------------------------
   460                              <1> ; lin_to_lin_of_pte
   461                              <1> ; 功能: 返回指定的线性地址所对应的页表项的线性地址
   462                              <1> ; 输入: r13=线性地址
   463                              <1> ; 输出: r14=对应的页表项的线性地址
   464                              <1> ; ------------------------------------------------------------
   465                              <1> lin_to_lin_of_pte:
   466 0000067E 4155                <1> 	push r13 
   467                              <1> 
   468 00000680 49BE00F0FFFFFFFF00- <1> 	mov r14, 0x0000_ffff_ffff_f000			; 保留 4 级头表、页目录指针表、页目录表和页表的索引部分
   468 00000689 00                  <1>
   469 0000068A 4D21F5              <1> 	and r13, r14 
   470 0000068D 49C1ED09            <1> 	shr r13, 9								
   471                              <1> 
   472                              <1> 	; 同上
   473 00000691 49BE0000000080FFFF- <1> 	mov r14, 0xffff_ff80_0000_0000
   473 0000069A FF                  <1>
   474 0000069B 4D01EE              <1> 	add r14, r13 
   475                              <1> 
   476 0000069E 415D                <1> 	pop r13
   477                              <1> 
   478 000006A0 C3                  <1> 	ret 
   479                              <1> 
   480                              <1> 
   481                              <1> ; ------------------------------------------------------------
   482                              <1> ; find_pte_for_laddr
   483                              <1> ; 功能: 为指定的线性地址寻找到页表项线性地址
   484                              <1> ; 注意: 不保证线程安全, 如果需要在外部加锁, 关中断. 使用了 rcx, rax, r14 寄存器, 但不负责维护内容不变, 如果需要在外部 push, pop
   485                              <1> ; 输入: r13=线性地址
   486                              <1> ; 输出: r14=页表项线性地址
   487                              <1> ; ------------------------------------------------------------
   488                              <1> find_pte_for_laddr:
   489                              <1> 	; 四级头表一定存在, 检查对应地址的四级头表项是否存在
   490 000006A1 E878FFFFFF          <1> 	call lin_to_lin_of_pml4e							; 得到四级头表项的线性地址
   491 000006A6 49F70601000000      <1> 	test qword [r14], 1									; 看 P 位是否为 1 判断表项是否存在
   492 000006AD 752B                <1> 	jnz .b0
   493                              <1> 
   494                              <1> 	; 创建并安装该线性地址所对应的 4 级头表项(创建页目录指针表)
   495 000006AF E84CFFFFFF          <1> 	call allocate_a_4k_page								; 分配一个页作为页目录指针表
   496 000006B4 4883C807            <1> 	or rax, 0x07										; rax 是分配页的物理地址, 添加属性位 U/S=R/W=P=1
   497 000006B8 498906              <1> 	mov [r14], rax 										; 在 4 级头表中登记 4 级头表项
   498                              <1> 
   499                              <1> 	; 清空刚分配的页目录指针表
   500 000006BB E87EFFFFFF          <1> 	call lin_to_lin_of_pdpte
   501 000006C0 49C1EE0C            <1> 	shr r14, 12
   502 000006C4 49C1E60C            <1> 	shl r14, 12											; 得到页目录指针表的线性地址, 低 12 位是页目录指针项在页目录指针表内的偏移
   503 000006C8 B900020000          <1> 	mov rcx, 512
   504                              <1> .cls0:
   505 000006CD 49C70600000000      <1> 	mov qword [r14], 0
   506 000006D4 4983C608            <1> 	add r14, 8
   507 000006D8 E2F3                <1> 	loop .cls0
   508                              <1> 
   509                              <1> .b0:
   510                              <1> 	; 检查该线性地址对应的页目录指针项是否存在
   511 000006DA E85FFFFFFF          <1> 	call lin_to_lin_of_pdpte 							; 得到页目录指针项的线性地址
   512 000006DF 49F70601000000      <1> 	test qword [r14], 1									; 看 P 位是否为 1 判断表项是否存在
   513 000006E6 752B                <1> 	jnz .b1 
   514                              <1> 
   515                              <1> 	; 创建并安装该线性地址对应的页目录指针项
   516 000006E8 E813FFFFFF          <1> 	call allocate_a_4k_page								; 分配一个页作为页目录表
   517 000006ED 4883C807            <1> 	or rax, 0x07
   518 000006F1 498906              <1> 	mov [r14], rax 
   519                              <1> 
   520                              <1> 	; 清空刚分配的页目录表
   521 000006F4 E865FFFFFF          <1> 	call lin_to_lin_of_pdte 
   522 000006F9 49C1EE0C            <1> 	shr r14, 12
   523 000006FD 49C1E60C            <1> 	shl r14, 12 
   524 00000701 B900020000          <1> 	mov rcx, 512 
   525                              <1> .cls1:
   526 00000706 49C70600000000      <1> 	mov qword [r14], 0
   527 0000070D 4983C608            <1> 	add r14, 8
   528 00000711 E2F3                <1> 	loop .cls1 
   529                              <1> 
   530                              <1> .b1:
   531                              <1> 	; 检查该线性地址对应的页目录指针项是否存在
   532 00000713 E846FFFFFF          <1> 	call lin_to_lin_of_pdte 
   533 00000718 49F70601000000      <1> 	test qword [r14], 1
   534 0000071F 752B                <1> 	jnz .b2 
   535                              <1> 
   536                              <1> 	; 创建并安装该线性地址对应的页目录项, 即分配页表
   537 00000721 E8DAFEFFFF          <1> 	call allocate_a_4k_page
   538 00000726 4883C807            <1> 	or rax, 0x07
   539 0000072A 498906              <1> 	mov [r14], rax 
   540                              <1> 
   541                              <1> 	; 清空刚分配的页表
   542 0000072D E84CFFFFFF          <1> 	call lin_to_lin_of_pte 
   543 00000732 49C1EE0C            <1> 	shr r14, 12
   544 00000736 49C1E60C            <1> 	shl r14, 12
   545 0000073A B900020000          <1> 	mov rcx, 512
   546                              <1> 
   547                              <1> .cls2:
   548 0000073F 49C70600000000      <1> 	mov qword [r14], 0
   549 00000746 4983C608            <1> 	add r14, 8
   550 0000074A E2F3                <1> 	loop .cls2 
   551                              <1> 
   552                              <1> .b2:
   553                              <1> 	; 检查该线性地址所对应的页表项是否存在
   554 0000074C E82DFFFFFF          <1> 	call lin_to_lin_of_pte 
   555                              <1> 
   556 00000751 C3                  <1> 	ret 
   557                              <1> 
   558                              <1> ; ------------------------------------------------------------
   559                              <1> ; setup_paging_for_laddr
   560                              <1> ; 功能: 为指定的线性地址安装分页
   561                              <1> ; 输入: r13=线性地址
   562                              <1> ; ------------------------------------------------------------
   563                              <1> %ifdef __MP__
   564                              <1> _spaging_locker dq 0
   565                              <1> %endif
   566                              <1> 
   567                              <1> setup_paging_for_laddr:
   568 00000752 51                  <1> 	push rcx 
   569 00000753 50                  <1> 	push rax 
   570 00000754 4156                <1> 	push r14 
   571 00000756 9C                  <1> 	pushfq
   572                              <1> 
   573 00000757 FA                  <1> 	cli 
   574                              <1> 
   575                              <1> %ifdef __MP__
   576                              <1> 	SET_SPIN_LOCK r14, qword [rel _spaging_locker]
   577                              <1> %endif 
   578                              <1> 
   579 00000758 E844FFFFFF          <1> 	call find_pte_for_laddr
   580 0000075D 49F70601000000      <1> 	test qword [r14], 1
   581 00000764 750C                <1> 	jnz .exit
   582                              <1> 
   583                              <1> 	; 创建并安装该地址对应的页表项, 即最终分配的页
   584 00000766 E895FEFFFF          <1> 	call allocate_a_4k_page
   585 0000076B 4883C807            <1> 	or rax, 0x07										; 设置属性
   586 0000076F 498906              <1> 	mov [r14], rax 
   587                              <1> 
   588                              <1> .exit:
   589                              <1> %ifdef __MP__
   590                              <1> 	mov qword [rel _spaging_locker], 0
   591                              <1> %endif
   592 00000772 9D                  <1> 	popfq 
   593                              <1> 
   594 00000773 415E                <1> 	pop r14 
   595 00000775 58                  <1> 	pop rax 
   596 00000776 59                  <1> 	pop rcx 
   597                              <1> 
   598 00000777 C3                  <1> 	ret 
   599                              <1> ; ------------------------------------------------------------
   600                              <1> ; mapping_laddr_to_page
   601                              <1> ; 功能: 建立线性地址到物理页的映射, 即, 为指定的线性地址安装指定的物理页
   602                              <1> ; 输入: r13=线性地址, rax=页的物理地址（含属性）
   603                              <1> ; ------------------------------------------------------------
   604                              <1> %ifdef __MP__
   605                              <1> _mapping_locker dq 0
   606                              <1> %endif
   607                              <1> 
   608                              <1> mapping_laddr_to_page:
   609 00000778 51                  <1> 	push rcx 
   610 00000779 4156                <1> 	push r14 
   611 0000077B 9C                  <1> 	pushfq
   612                              <1> 
   613 0000077C FA                  <1> 	cli 
   614                              <1> 
   615                              <1> %ifdef __MP__
   616                              <1> 	SET_SPIN_LOCK r14, qword [rel _mapping_locker]
   617                              <1> %endif
   618                              <1> 
   619 0000077D 50                  <1> 	push rax 
   620 0000077E E81EFFFFFF          <1> 	call find_pte_for_laddr								; 得到页表项的线性地址
   621 00000783 58                  <1> 	pop rax 
   622 00000784 498906              <1> 	mov [r14], rax 										; 在页表项中写入页的物理地址
   623                              <1> 
   624                              <1> %ifdef __MP__
   625                              <1> 	mov qword [rel _mapping_locker], 0
   626                              <1> %endif
   627                              <1> 
   628 00000787 9D                  <1> 	popfq
   629 00000788 415E                <1> 	pop r14 
   630 0000078A 59                  <1> 	pop rcx 
   631                              <1> 
   632 0000078B C3                  <1> 	ret 
   633                              <1> 	
   634                              <1> ; ------------------------------------------------------------
   635                              <1> ; core_memory_allocate
   636                              <1> ; 功能: 在虚拟地址空间的高端（内核）分配内存
   637                              <1> ; 输入: rcx=请求分配的字节数
   638                              <1> ; 输出: r13=本次分配的起始线性地址, r14=下次分配的起始线性地址
   639                              <1> ; ------------------------------------------------------------
   640 0000078C 000020000080FFFF    <1> _core_next_linear dq CORE_ALLOC_START
   641                              <1> 
   642                              <1> %ifdef __MP__
   643                              <1> _core_alloc_locker dq 0
   644                              <1> %endif
   645                              <1> 
   646                              <1> core_memory_allocate:
   647 00000794 9C                  <1> 	pushfq 
   648 00000795 FA                  <1> 	cli 
   649                              <1> %ifdef __MP__
   650                              <1> 	SET_SPIN_LOCK r14, qword [rel _core_alloc_locker]
   651                              <1> %endif
   652 00000796 4C8B2DEFFFFFFF      <1> 	mov r13, [rel _core_next_linear]					; 起始地址
   653 0000079D 4D8D740D00          <1> 	lea r14, [r13 + rcx]								; 下次分配的起始地址
   654                              <1> 
   655 000007A2 49F7C607000000      <1> 	test r14, 0x07 										; 进行 8 字节对齐处理
   656 000007A9 740C                <1> 	jz .algn
   657 000007AB 4983C608            <1> 	add r14, 0x08
   658 000007AF 49C1EE03            <1> 	shr r14, 3
   659 000007B3 49C1E603            <1> 	shl r14, 3											; 最低的 3 个比特变 0
   660                              <1> 
   661                              <1> .algn:
   662 000007B7 4C8935CEFFFFFF      <1> 	mov qword [rel _core_next_linear], r14 				; 写回, 保留, 下一次用
   663                              <1> 
   664                              <1> %ifdef __MP__
   665                              <1> 	mov qword [rel _core_alloc_locker], 0
   666                              <1> %endif
   667                              <1> 
   668 000007BE 9D                  <1> 	popfq
   669                              <1> 
   670 000007BF 4155                <1> 	push r13 
   671 000007C1 4156                <1> 	push r14 
   672                              <1> 
   673                              <1> 	; 以下为请求的内存分配页。R13 为本次分配的线性地址；R14 为下次分配的线性地址
   674 000007C3 49C1ED0C            <1> 	shr r13, 12
   675 000007C7 49C1E50C            <1> 	shl r13, 12											; 清除页内偏移
   676 000007CB 49C1EE0C            <1> 	shr r14, 12
   677 000007CF 49C1E60C            <1> 	shl r14, 12
   678                              <1> .next:
   679 000007D3 E87AFFFFFF          <1> 	call setup_paging_for_laddr							; 安装线性地址所在页
   680 000007D8 4981C500100000      <1> 	add r13, 0x1000
   681 000007DF 4D39F5              <1> 	cmp r13, r14 
   682 000007E2 7EEF                <1> 	jle .next 
   683                              <1> 
   684 000007E4 415E                <1> 	pop r14 
   685 000007E6 415D                <1> 	pop r13 
   686                              <1> 
   687 000007E8 C3                  <1> 	ret 
   688                              <1> 
   689                              <1> ; ------------------------------------------------------------
   690                              <1> ; user_memory_allocate
   691                              <1> ; 功能: 在用户任务的私有空间（低端）分配内存
   692                              <1> ; 输入: r11=任务控制块 PCB 的线性地址, rcx=希望分配的字节数
   693                              <1> ; 输出: r13=本次分配的起始线性地址, r14=下次分配的起始线性地址
   694                              <1> ; ------------------------------------------------------------
   695                              <1> user_memory_allocate:
   696 000007E9 4D8B6B18            <1> 	mov r13, [r11 + 24]								; 获得本次分配的起始线性地址
   697 000007ED 4D8D740D00          <1> 	lea r14, [r13 + rcx]							; 下次分配的起始线性地址
   698                              <1> 
   699 000007F2 49F7C607000000      <1> 	test r14, 0x07									; 是否按 8 字节对齐
   700 000007F9 740C                <1> 	jz .algn
   701 000007FB 49C1EE03            <1> 	shr r14, 3 										; 8 字节向上取整
   702 000007FF 49C1E603            <1> 	shl r14, 3 
   703 00000803 4983C608            <1> 	add r14, 0x08 
   704                              <1> 
   705                              <1> .algn:
   706 00000807 4D897318            <1> 	mov [r11 + 24], r14 							; 写回 PCB 中
   707                              <1> 
   708 0000080B 4155                <1> 	push r13 
   709 0000080D 4156                <1> 	push r14 
   710                              <1> 
   711                              <1> 	; 以下为请求的内存分配页
   712 0000080F 49C1ED0C            <1> 	shr r13, 12										; 清除页内便宜
   713 00000813 49C1E50C            <1> 	shl r13, 12
   714 00000817 49C1EE0C            <1> 	shr r14, 12
   715 0000081B 49C1E60C            <1> 	shl r14, 12
   716                              <1> 
   717                              <1> .next:
   718 0000081F E82EFFFFFF          <1> 	call setup_paging_for_laddr						; 为当前线性地址安装页
   719 00000824 4981C500100000      <1> 	add r13, 0x1000
   720 0000082B 4D39F5              <1> 	cmp r13, r14 
   721 0000082E 7EEF                <1> 	jle .next
   722                              <1> 
   723 00000830 415E                <1> 	pop r14
   724 00000832 415D                <1> 	pop r13 
   725                              <1> 
   726 00000834 C3                  <1> 	ret 
   727                              <1> 
   728                              <1> ; ------------------------------------------------------------
   729                              <1> ; copy_current_pml4
   730                              <1> ; 功能: 创建新的 4 级头表，并复制当前 4 级头表的内容
   731                              <1> ; 输出: rax=新 4 级头表的物理地址及属性
   732                              <1> ; ------------------------------------------------------------
   733                              <1> %ifdef __MP__
   734                              <1> _copy_locker dq 0
   735                              <1> %endif
   736                              <1> 
   737                              <1> copy_current_pml4:
   738 00000835 56                  <1> 	push rsi 
   739 00000836 57                  <1> 	push rdi 
   740 00000837 4155                <1> 	push r13 
   741 00000839 51                  <1> 	push rcx 
   742 0000083A 9C                  <1> 	pushfq
   743                              <1> 
   744 0000083B FA                  <1> 	cli 
   745                              <1> 
   746                              <1> %ifdef __MP__
   747                              <1> 	SET_SPIN_LOCK rcx, qword [rel _copy_locker]
   748                              <1> %endif
   749                              <1> 
   750 0000083C E8BFFDFFFF          <1> 	call allocate_a_4k_page						; 分配一个物理页
   751 00000841 4883C807            <1> 	or rax, 0x07 								; 添加属性
   752 00000845 49BD00F0FFFF7FFFFF- <1> 	mov r13, NEW_PML4_LINEAR					; 用指定的线性地址映射和访问刚分配的这个物理页
   752 0000084E FF                  <1>
   753 0000084F E824FFFFFF          <1> 	call mapping_laddr_to_page
   754                              <1> 
   755                              <1> 	; 目标表项在页部件的转换速查缓冲器 TLB 的缓存, 需要用 invlpg 执行刷新
   756 00000854 410F017D00          <1> 	invlpg [r13]
   757                              <1> 
   758 00000859 48C7C600F0FFFF      <1> 	mov rsi, 0xffff_ffff_ffff_f000				; rsi -> 当前活动4级头表的线性地址(还是利用递归映射)
   759 00000860 4C89EF              <1> 	mov rdi, r13 								; rdi -> 新 4 级头表的线性地址
   760 00000863 B900020000          <1> 	mov rcx, 512								; rcx -> 要复制的目录项数
   761 00000868 FC                  <1> 	cld 										; 将 RFLAGS 中的方向标志位（DF）设置为 0, 即地址自动递增
   762 00000869 F348A5              <1> 	repe movsq
   763                              <1> 
   764 0000086C 498985F80F0000      <1> 	mov [r13 + 0xff8], rax 						; 0xff8 = 512 * 8, 新 4 级头表的 511 号表项指向它自己, 方便递归映射 
   765 00000873 410F01BDF80F0000    <1> 	invlpg [r13 + 0xff8]
   766                              <1> 
   767                              <1> %ifdef __MP__
   768                              <1> 	mov qword [rel _copy_locker], 0
   769                              <1> %endif
   770                              <1> 
   771 0000087B 9D                  <1> 	popfq
   772 0000087C 59                  <1> 	pop rcx 
   773 0000087D 415D                <1> 	pop r13
   774 0000087F 5F                  <1> 	pop rdi 
   775 00000880 5E                  <1> 	pop rsi 
   776                              <1> 
   777 00000881 C3                  <1> 	ret 
   778                              <1> 
   779                              <1> ; ------------------------------------------------------------
   780                              <1> ; get_cmos_time
   781                              <1> ; 功能: 从 CMOS 中获取当前时间, 详情见书中 225 页
   782                              <1> ; 输入: rbx=缓冲区线性地址
   783                              <1> ; ------------------------------------------------------------
   784                              <1> %ifdef __MP__
   785                              <1> _cmos_locker dq 0
   786                              <1> %endif
   787                              <1> 
   788                              <1> get_cmos_time:
   789 00000882 50                  <1> 	push rax 
   790 00000883 9C                  <1> 	pushfq
   791 00000884 FA                  <1> 	cli 
   792                              <1> 
   793                              <1> %ifdef __MP__
   794                              <1> 	SET_SPIN_LOCK rax, qword [rel _cmos_locker]
   795                              <1> %endif
   796                              <1> 
   797                              <1> .w0:
   798 00000885 B08A                <1> 	mov al, 0x8a 
   799 00000887 E670                <1> 	out 0x70, al 
   800 00000889 E471                <1> 	in al, 0x71 								; 读寄存器 A
   801 0000088B A880                <1> 	test al, 0x80 								; 测试第 7 位 UIP, 等待更新周期结束
   802 0000088D 75F6                <1> 	jnz .w0 
   803                              <1> 
   804 0000088F B084                <1> 	mov al, 0x84 
   805 00000891 E670                <1> 	out 0x70, al 
   806 00000893 E471                <1> 	in al, 0x71 								; 读RTC当前时间(时)
   807 00000895 88C4                <1> 	mov ah, al 									; BCD 编码, 用两个寄存器处理
   808                              <1> 
   809 00000897 C0EC04              <1> 	shr ah, 4									; 处理高四位						
   810 0000089A 80E40F              <1> 	and ah, 0x0f 
   811 0000089D 80C430              <1> 	add ah, 0x30 								; 转换成 ASCII
   812 000008A0 8823                <1> 	mov [rbx], ah 
   813                              <1> 
   814 000008A2 240F                <1> 	and al, 0x0f 								; 处理低四位
   815 000008A4 0430                <1> 	add al, 0x30 
   816 000008A6 884301              <1> 	mov [rbx + 1], al 
   817                              <1> 
   818 000008A9 C643023A            <1> 	mov byte [rbx + 2], ":"
   819                              <1> 
   820 000008AD B082                <1> 	mov al, 0x82 
   821 000008AF E670                <1> 	out 0x70, al 
   822 000008B1 E471                <1> 	in al, 0x71									; 读RTC当前时间(分)
   823 000008B3 88C4                <1> 	mov ah, al 
   824                              <1> 
   825 000008B5 C0EC04              <1> 	shr ah, 4			
   826 000008B8 80E40F              <1> 	and ah, 0x0f 
   827 000008BB 80C430              <1> 	add ah, 0x30 
   828 000008BE 886303              <1> 	mov [rbx + 3], ah 
   829                              <1> 
   830 000008C1 240F                <1> 	and al, 0x0f 
   831 000008C3 0430                <1> 	add al, 0x30 
   832 000008C5 884304              <1> 	mov [rbx + 4], al 
   833                              <1> 
   834 000008C8 C643053A            <1> 	mov byte [rbx + 5], ":"
   835                              <1> 
   836 000008CC B080                <1> 	mov al, 0x80 
   837 000008CE E670                <1> 	out 0x70, al 
   838 000008D0 E471                <1> 	in al, 0x71									; 读RTC当前时间(秒)
   839 000008D2 88C4                <1> 	mov ah, al 
   840                              <1> 
   841 000008D4 C0EC04              <1> 	shr ah, 4
   842 000008D7 80E40F              <1> 	and ah, 0x0f 
   843 000008DA 80C430              <1> 	add ah, 0x30
   844 000008DD 886306              <1> 	mov [rbx + 6], ah 
   845                              <1> 
   846 000008E0 240F                <1> 	and al, 0x0f 
   847 000008E2 0430                <1> 	add al, 0x30 
   848 000008E4 884307              <1> 	mov [rbx + 7], al 
   849                              <1> 
   850 000008E7 C6430800            <1> 	mov byte [rbx + 8], 0						; 终止字符
   851                              <1> 
   852                              <1> %ifdef __MP__
   853                              <1> 	mov qword [rel _cmos_locker], 0
   854                              <1> %endif
   855                              <1> 
   856 000008EB 9D                  <1> 	popfq
   857 000008EC 58                  <1> 	pop rax 
   858                              <1> 
   859 000008ED C3                  <1> 	ret 
   860                              <1> 
   861                              <1> ; ------------------------------------------------------------
   862                              <1> ; generate_process_id
   863                              <1> ; 功能: 生成唯一的进程标识
   864                              <1> ; 输出: rax=进程标识
   865                              <1> ; ------------------------------------------------------------
   866 000008EE 0000000000000000    <1> _process_id dq 0
   867                              <1> 
   868                              <1> generate_process_id:
   869 000008F6 B801000000          <1> 	mov rax, 1
   870 000008FB F0480FC105EAFFFFFF  <1> 	lock xadd qword [rel _process_id], rax 		; lock 前缀确保这条指令是原子操作, xadd 是 "交换并相加" 指令, 会将源操作数和目的操作数相加，结果存入目的操作数，同时将目的操作数的原始值存入源操作数
   871                              <1> 	
   872 00000904 C3                  <1> 	ret 
   873                              <1> 
   874                              <1> ; ------------------------------------------------------------
   875                              <1> ; generate_thread_id
   876                              <1> ; 功能: 生成唯一的线程标识
   877                              <1> ; 输出: rax=线程标识
   878                              <1> ; ------------------------------------------------------------
   879 00000905 0000000000000000    <1> _thread_id dq 0
   880                              <1> 
   881                              <1> generate_thread_id:
   882 0000090D B801000000          <1> 	mov rax, 1
   883 00000912 F0480FC105EAFFFFFF  <1> 	lock xadd qword [rel _thread_id], rax 		; lock 前缀确保这条指令是原子操作, xadd 是 "交换并相加" 指令, 会将源操作数和目的操作数相加，结果存入目的操作数，同时将目的操作数的原始值存入源操作数
   884                              <1> 	
   885 0000091B C3                  <1> 	ret 
   886                              <1> 
   887                              <1> ; ------------------------------------------------------------
   888                              <1> ; get_screen_row
   889                              <1> ; 功能: 返回下一个屏幕坐标行的行号
   890                              <1> ; 输出: dh=行号
   891                              <1> ; ------------------------------------------------------------
   892 0000091C 08                  <1> _screen_row db 8 								; 前边已经显示了 7 行, 所以从 8 开始
   893                              <1> 
   894                              <1> get_screen_row:
   895 0000091D B601                <1> 	mov dh, 1
   896 0000091F F00FC035F5FFFFFF    <1> 	lock xadd byte [rel _screen_row], dh 
   897                              <1> 
   898 00000927 C3                  <1> 	ret 
   899                              <1> 
   900                              <1> ; ------------------------------------------------------------
   901                              <1> ; get_cpu_number
   902                              <1> ; 功能: 返回当前处理器的编号
   903                              <1> ; 输出: rax=处理器编号
   904                              <1> ; ------------------------------------------------------------
   905                              <1> get_cpu_number:
   906 00000928 9C                  <1> 	pushfq
   907 00000929 FA                  <1> 	cli 
   908 0000092A 0F01F8              <1> 	swapgs
   909 0000092D 65488B042510000000  <1> 	mov rax, [gs:16]							; 在专属数据区取
   910 00000936 0F01F8              <1> 	swapgs
   911 00000939 9D                  <1> 	popfq
   912 0000093A C3                  <1> 	ret 
   913                              <1> 
   914                              <1> ; ------------------------------------------------------------
   915                              <1> ; memory_allocate
   916                              <1> ; 功能: 用户空间的内存分配
   917                              <1> ; 输入: rdx=期望分配的字节数
   918                              <1> ; 输出: r13=所分配内存的起始线性地址
   919                              <1> ; ------------------------------------------------------------
   920                              <1> memory_allocate:
   921 0000093B 51                  <1> 	push rcx 
   922 0000093C 4153                <1> 	push r11 
   923 0000093E 4156                <1> 	push r14 
   924                              <1> 
   925 00000940 9C                  <1> 	pushfq
   926 00000941 FA                  <1> 	cli 
   927 00000942 0F01F8              <1> 	swapgs
   928 00000945 654C8B1C2508000000  <1> 	mov r11, [gs:8]								; PCB 线性地址
   929 0000094E 0F01F8              <1> 	swapgs
   930 00000951 9D                  <1> 	popfq
   931                              <1> 
   932 00000952 4889D1              <1> 	mov rcx, rdx 
   933 00000955 E88FFEFFFF          <1> 	call user_memory_allocate
   934                              <1> 
   935 0000095A 415E                <1> 	pop r14 
   936 0000095C 415B                <1> 	pop r11 
   937 0000095E 59                  <1> 	pop rcx 
   938                              <1> 
   939 0000095F C3                  <1> 	ret 
    46                                  %include "./common/user_static64.asm"
     1                              <1> ; 用户通用代码
     2                              <1> 
     3                              <1>     bits 64 
     4                              <1> 
     5                              <1> ; ------------------------------------------------------------
     6                              <1> ; bin64_to_dec
     7                              <1> ; 功能: 将二进制数转换为十进制字符串
     8                              <1> ; 输入: r8=64位二进制数, rbx=目标缓冲区线性地址
     9                              <1> ; ------------------------------------------------------------
    10                              <1> bin64_to_dec: 
    11 00000960 50                  <1>     push rax
    12 00000961 53                  <1>     push rbx
    13 00000962 51                  <1>     push rcx
    14 00000963 52                  <1>     push rdx
    15 00000964 4150                <1>     push r8
    16                              <1> 
    17 00000966 490FBAE03F          <1>     bt r8, 63                                       ; 检查最高位, 处理正,负数
    18 0000096B 7309                <1>     jnc .begin
    19 0000096D C6032D              <1>     mov byte [rbx], "-"
    20 00000970 49F7D8              <1>     neg r8                                          ; 取反, 将负数转为正数
    21                              <1> 
    22 00000973 48FFC3              <1>     inc rbx
    23                              <1> 
    24                              <1> .begin:
    25 00000976 4C89C0              <1>     mov rax, r8                                     ; rax 是被除数
    26 00000979 41B80A000000        <1>     mov r8, 10
    27 0000097F 4831C9              <1>     xor rcx, rcx                                    ; rcx 是位数
    28                              <1> 
    29                              <1> .next_div:
    30 00000982 4831D2              <1>     xor rdx, rdx                                    ; 使用 128 位除法, 要将 rdx 清零
    31 00000985 49F7F0              <1>     div r8 
    32 00000988 52                  <1>     push rdx                                        ; 保存分解的数位
    33 00000989 48FFC1              <1>     inc rcx 
    34 0000098C 4809C0              <1>     or rax, rax                                     ; 商为 0?
    35 0000098F 7402                <1>     jz .rotate
    36 00000991 EBEF                <1>     jmp .next_div
    37                              <1> 
    38                              <1> .rotate:
    39 00000993 5A                  <1>     pop rdx 
    40 00000994 80C230              <1>     add dl, 0x30                                    ; 将数位转为 ASCII
    41 00000997 8813                <1>     mov [rbx], dl 
    42 00000999 48FFC3              <1>     inc rbx 
    43 0000099C E2F5                <1>     loop .rotate
    44                              <1> 
    45 0000099E C60300              <1>     mov byte [rbx], 0
    46                              <1> 
    47 000009A1 4158                <1>     pop r8
    48 000009A3 5A                  <1>     pop rdx
    49 000009A4 59                  <1>     pop rcx
    50 000009A5 5B                  <1>     pop rbx
    51 000009A6 58                  <1>     pop rax
    52                              <1> 
    53 000009A7 C3                  <1>     ret 
    54                              <1> 
    55                              <1> ; ------------------------------------------------------------
    56                              <1> ; string_concatenates
    57                              <1> ; 功能: 将源字符串连接到目的字符串的尾部
    58                              <1> ; 输入: rsi=源字符串的线性地址, rdi=目的字符串的线性地址
    59                              <1> ; ------------------------------------------------------------
    60                              <1> string_concatenates:
    61 000009A8 50                  <1>     push rax
    62 000009A9 56                  <1>     push rsi
    63 000009AA 57                  <1>     push rdi
    64                              <1> 
    65                              <1>     
    66                              <1> .r0:                                                ; 先找到 rdi 的结尾
    67 000009AB 803F00              <1>     cmp byte [rdi], 0
    68 000009AE 7405                <1>     jz .r1 
    69 000009B0 48FFC7              <1>     inc rdi 
    70 000009B3 EBF6                <1>     jmp .r0 
    71                              <1>     
    72                              <1> .r1:                                                ; 再复制源字符串过去
    73 000009B5 8A06                <1>     mov al, [rsi]
    74 000009B7 8807                <1>     mov [rdi], al 
    75 000009B9 3C00                <1>     cmp al, 0
    76 000009BB 7408                <1>     jz .r2 
    77 000009BD 48FFC6              <1>     inc rsi 
    78 000009C0 48FFC7              <1>     inc rdi 
    79 000009C3 EBF0                <1>     jmp .r1 
    80                              <1>     
    81                              <1> .r2:
    82 000009C5 5F                  <1>     pop rdi 
    83 000009C6 5E                  <1>     pop rsi 
    84 000009C7 58                  <1>     pop rax 
    85                              <1> 
    86 000009C8 C3                  <1>     ret 
    47                                  
    48                                      [bits 64]
    49                                  
    50                                  ; ------------------------------------------------------------
    51                                  ; ap_to_core_entry
    52                                  ; 功能: 应用处理器（AP）进入内核的入口点
    53                                  ; ------------------------------------------------------------
    54 000009C9 F900                    _ap_string      db 249, 0
    55                                  
    56                                  ap_to_core_entry:
    57                                      ; 启用 GDT 的高端线性地址并加载 IDTR
    58 000009CB 48B8007E00000080FF-         mov rax, UPPER_SDA_LINEAR
    58 000009D4 FF                 
    59 000009D5 0F015002                    lgdt [rax + 2]                                  ; 只有 64 位模式下才能加载 64 位线性地址
    60 000009D9 0F01580C                    lidt [rax + 0x0c]
    61                                  
    62                                      ; 为当前处理器创建 64 位 模式下专属栈
    63 000009DD B900100000                  mov rcx, 4096
    64 000009E2 E8ADFDFFFF                  call core_memory_allocate
    65 000009E7 4C89F4                      mov rsp, r14 
    66                                  
    67                                      ; 创建当前处理器的专属存储区(格式见书中 348 页)
    68 000009EA B900010000                  mov rcx, 256                                    ; 专属数据区长度, 含 TSS
    69 000009EF E8A0FDFFFF                  call core_memory_allocate
    70 000009F4 498D8580000000              lea rax, [r13 + 128]                            ; TSS 开始于专属存储区偏移为 128 的地方
    71 000009FB E845F7FFFF                  call make_tss_descriptor
    72                                  
    73 00000A00 49BF007E00000080FF-         mov r15, UPPER_SDA_LINEAR
    73 00000A09 FF                 
    74                                  
    75                                      ; 安装 TSS 描述符到 GDT
    76 00000A0A 4D8B4704                    mov r8, [r15 + 4]                               ; r8=gdt 的线性地址
    77 00000A0E 490FB74F02                  movzx rcx, word [r15 + 2]                       ; rcx=gdt 的界限值
    78 00000A13 4989740801                  mov [r8 + rcx + 1], rsi                         ; TSS 描述符的低 64 位
    79 00000A18 49897C0809                  mov [r8 + rcx + 9], rdi                         ; TSS 描述符的高 64 位
    80                                  
    81 00000A1D 664183470210                add word [r15 + 2], 16                          ; TSS 大小
    82 00000A23 410F015702                  lgdt [r15 + 2]                                  ; 重新加载 GDTR
    83                                  
    84 00000A28 66C1E903                    shr cx, 3                                       ; 除 8 得到索引
    85 00000A2C 66FFC1                      inc cx                                          ; 找到 TSS 描述符
    86 00000A2F 66C1E103                    shl cx, 3                                       ; 乘 8 得到正确偏移
    87                                  
    88 00000A33 0F00D9                      ltr cx                                          ; 为当前任务加载任务寄存器 TR
    89                                  
    90                                      ; 将处理器专属数据区首地址保存到当前处理器的型号专属寄存器 IA32_KERNEL_GS_BASE
    91 00000A36 B9020100C0                  mov ecx, 0xc000_0102                            ; IA32_KERNEL_GS_BASE
    92 00000A3B 4C89E8                      mov rax, r13                                    ; 只用 EAX
    93 00000A3E 4C89EA                      mov rdx, r13 
    94 00000A41 48C1EA20                    shr rdx, 32 
    95 00000A45 0F30                        wrmsr 
    96                                  
    97                                      ; 为快速系统调用 SYSCALL 和 SYSRET 准备参数
    98 00000A47 B9800000C0                  mov ecx, 0x0c0000080                            ; 指定型号专属寄存器 IA32_EFER
    99 00000A4C 0F32                        rdmsr 
   100 00000A4E 0FBAE800                    bts eax, 0                                      ; 设置 SCE 位，允许 SYSCALL 指令
   101 00000A52 0F30                        wrmsr
   102                                  
   103 00000A54 B9810000C0                  mov ecx, 0xc0000081                             ; STAR
   104 00000A59 BA18002B00                  mov edx, (RESVD_DESC_SEL << 16) | CORE_CODE64_SEL
   105 00000A5E 31C0                        xor eax, eax 
   106 00000A60 0F30                        wrmsr
   107                                  
   108 00000A62 B9820000C0                  mov ecx, 0xc0000082                             ; LSTAR
   109 00000A67 488B05(08000000)            mov rax, [rel position]
   110 00000A6E 488D80[79110000]            lea rax, [rax + syscall_procedure]              ; 只用 EAX 部分
   111 00000A75 4889C2                      mov rdx, rax
   112 00000A78 48C1EA20                    shr rdx, 32                                     ; 使用 EDX 部分
   113 00000A7C 0F30                        wrmsr
   114                                  
   115 00000A7E B9840000C0                  mov ecx, 0xc0000084                             ; FMASK
   116 00000A83 31D2                        xor edx, edx
   117 00000A85 B800770400                  mov eax, 0x00047700                             ; 要求 TF=IF=DF=AC=0, IOPL=00
   118 00000A8A 0F30                        wrmsr
   119                                  
   120 00000A8C 4C8B3D(08000000)            mov r15, [rel position]
   121 00000A93 498D9F[C9090000]            lea rbx, [r15 + _ap_string]
   122 00000A9A E861F5FFFF                  call put_string64
   123                                  
   124 00000A9F 0F01F8                      swapgs                                          ; 准备用 GS 操作当前处理器的专属数据, IA32_KERNEL_GS_BASE 与 GS 互换内容
   125 00000AA2 6548C7042508000000-         mov qword [gs:8], 0                             ; PCB 的线性地址 = 0, 没有正在执行的任务
   125 00000AAB 00000000           
   126 00000AAF 4831C0                      xor rax, rax 
   127 00000AB2 8A05(31010000)              mov al, byte [rel ack_cpus]
   128 00000AB8 654889042510000000          mov [gs:16], rax                                ; 设置处理器编号
   129 00000AC1 654889242518000000          mov [gs:24], rsp                                ; 保存当前处理器的固有栈指针
   130 00000ACA 0F01F8                      swapgs
   131                                  
   132 00000ACD FE05(31010000)              inc byte [rel ack_cpus]                         ; 递增应答计数值
   133                                  
   134 00000AD3 C60425[82F00000]00          mov byte [AP_START_UP_ADDR + lock_var], 0       ; 释放自旋锁
   135                                  
   136 00000ADB 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR                       ; Local APIC 的线性地址
   136 00000AE4 FF                 
   137 00000AE5 0FBAAEF000000008            bts dword [rsi + 0xf0], 8                       ; 设置 SVR 寄存器, 允许 LAPIC
   138                                  
   139 00000AED FB                          sti                                             ; 开放中断
   140                                  
   141                                  .do_idle:
   142 00000AEE F4                          hlt 
   143 00000AEF EBFD                        jmp .do_idle
   144                                  
   145                                  ; ------------------------------------------------------------
   146                                  ; general_interrupt_handler
   147                                  ; 功能: 通用中断处理
   148                                  ; ------------------------------------------------------------
   149                                  general_interrupt_handler:
   150 00000AF1 48CF                        iretq
   151                                  
   152                                  ; ------------------------------------------------------------
   153                                  ; general_exception_handler
   154                                  ; 功能: 通用异常处理
   155                                  ; ------------------------------------------------------------
   156                                  general_exception_handler:
   157 00000AF3 4C8B3D(08000000)            mov r15, [rel position]                         ; 在 24 行 0 列显示红底白字的错误信息
   158 00000AFA 498D9F[0F0B0000]            lea rbx, [r15 + exceptm]
   159 00000B01 B618                        mov dh, 24
   160 00000B03 B200                        mov dl, 0
   161 00000B05 41B14F                      mov r9b, 0x4f 
   162 00000B08 E8D1F5FFFF                  call put_cstringxy64                            ; 在 core_utils64.asm 中实现
   163                                  
   164 00000B0D FA                          cli 
   165 00000B0E F4                          hlt                                             ; 停机且不接受外部硬件中断
   166                                  
   167 00000B0F 412065786365707469-     exceptm         db "A exception raised, halt.", 0   ; 发生异常时的错误信息
   167 00000B18 6F6E20726169736564-
   167 00000B21 2C2068616C742E00   
   168                                  
   169                                  ; ------------------------------------------------------------
   170                                  ; search_for_a_ready_thread
   171                                  ; 功能: 查找一个就绪的线程并将其置为忙, 本程序在中断处理过程内调用，默认中断是关闭状态。
   172                                  ; 输出: r11=就绪线程所属任务的 PCB 线性地址, r12=就绪线程的 TCB 线性地址
   173                                  ; ------------------------------------------------------------
   174                                  search_for_a_ready_thread:
   175 00000B29 50                          push rax 
   176 00000B2A 53                          push rbx 
   177 00000B2B 51                          push rcx 
   178                                  
   179 00000B2C B901000000                  mov rcx, 1                                      ; rcx=任务的“忙”状态
   180                                  
   181 00000B31 0F01F8                      swapgs 
   182 00000B34 65488B1C2508000000          mov rbx, [gs:8]                                 ; 取得当前任务的 PCB 线性地址
   183 00000B3D 654C8B242520000000          mov r12, [gs:32]                                ; 取得当前线程的 TCB 地址
   184 00000B46 0F01F8                      swapgs
   185 00000B49 4989DB                      mov r11, rbx 
   186 00000B4C 4883FB00                    cmp rbx, 0                                      ; 专属数据区存的 PCB 线性地址为 0, 也就是刚初始化
   187 00000B50 7511                        jne .nextt
   188 00000B52 488B1D(C1020000)            mov rbx, [rel pcb_ptr]                          ; 那就从链表头部开始找
   189 00000B59 4989DB                      mov r11, rbx 
   190 00000B5C 4D8BA310010000              mov r12, [r11 + 272]                            ; 从 PCB 的第一个 TCB 开始
   191                                  
   192                                  .nextt:                                             ; 这一部分遍历 TCB 链表
   193 00000B63 4983FC00                    cmp r12, 0                                      ; 位于 TCB 链表的末尾?
   194 00000B67 7416                        je .nextp                                       ; 切换下一个 PCB
   195 00000B69 4831C0                      xor rax, rax 
   196 00000B6C F0490FB14C2410              lock cmpxchg [r12 + 16], rcx 
   197 00000B73 7425                        jz .return
   198 00000B75 4D8BA42418010000            mov r12, [r12 + 280]                            ; 获取下个 TCB
   199 00000B7D EBE4                        jmp .nextt
   200                                  
   201                                  .nextp:                                             ; 这一部分遍历 PCB 链表
   202 00000B7F 4D8B9B18010000              mov r11, [r11 + 280]
   203 00000B86 4939DB                      cmp r11, rbx                                    ; 是否转一圈回到当前节点?
   204 00000B89 7409                        je .fmiss                                       ; 是, 未找到就绪任务
   205 00000B8B 4D8BA310010000              mov r12, [r11 + 272]                            ; 不是, 从新的 PCB 中提取 TCB 节点
   206 00000B92 EBCF                        jmp .nextt
   207                                  
   208                                  .fmiss:
   209 00000B94 4D31DB                      xor r11, r11 
   210 00000B97 4D31E4                      xor r12, r12 
   211                                  
   212                                  .return:
   213 00000B9A 59                          pop rcx 
   214 00000B9B 5B                          pop rbx 
   215 00000B9C 58                          pop rax 
   216                                  
   217 00000B9D C3                          ret 
   218                                  
   219                                  ; ------------------------------------------------------------
   220                                  ; resume_execute_a_thread
   221                                  ; 功能: 恢复执行一个线程, 本程序在中断处理过程内调用，默认中断是关闭状态。
   222                                  ; 输入: r11=线程所属的任务的 PCB 线性地址, r12=线程的 TCB 线性地址
   223                                  ; ------------------------------------------------------------
   224                                  resume_execute_a_thread:
   225 00000B9E 8B05(32010000)              mov eax, [rel clocks_1ms]                       ; 以下计算新任务运行时间
   226 00000BA4 418B9C24F0000000            mov ebx, [r12 + 240]                            ; 线程指定的时间片
   227 00000BAC F7E3                        mul ebx 
   228                                  
   229 00000BAE 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
   229 00000BB7 FF                 
   230 00000BB8 C786E00300000B0000-         mov dword [rsi + 0x3e0], 0x0b                   ; 1 分频
   230 00000BC1 00                 
   231 00000BC2 C78620030000FD0000-         mov dword [rsi + 0x320], 0xfd                   ; 单次击发模式, Fixed, 中断信号 0xfd, 详情见书中 276 页
   231 00000BCB 00                 
   232                                  
   233 00000BCC 498B5B38                    mov rbx, [r11 + 56]
   234 00000BD0 0F22DB                      mov cr3, rbx                                    ; 切换地址空间
   235                                  
   236 00000BD3 0F01F8                      swapgs
   237 00000BD6 654C891C2508000000          mov [gs:8], r11                                 ; 将新线程所属的任务设置为当前任务
   238 00000BDF 654C89242520000000          mov [gs:32], r12                                ; 将新线程设置为当前线程
   239 00000BE8 498B5C2420                  mov rbx, [r12 + 32]                             ; 取 TCB 中的 RSP0
   240 00000BED 6548891C2584000000          mov [gs:128 + 4], rbx                           ; 置 TSS 中的 RSP0
   241 00000BF6 0F01F8                      swapgs
   242                                  
   243 00000BF9 498B4C2450                  mov rcx, [r12 + 80]
   244 00000BFE 498B542458                  mov rdx, [r12 + 88]
   245 00000C03 498B7C2468                  mov rdi, [r12 + 104]
   246 00000C08 498B6C2470                  mov rbp, [r12 + 112]
   247 00000C0D 498B642478                  mov rsp, [r12 + 120]
   248 00000C12 4D8B842480000000            mov r8, [r12 + 128]
   249 00000C1A 4D8B8C2488000000            mov r9, [r12 + 136]
   250 00000C22 4D8B942490000000            mov r10, [r12 + 144]
   251                                  
   252 00000C2A 4D8BAC24A8000000            mov r13, [r12 + 168]
   253 00000C32 4D8BB424B0000000            mov r14, [r12 + 176]
   254 00000C3A 4D8BBC24B8000000            mov r15, [r12 + 184]
   255 00000C42 41FFB424D0000000            push qword [r12 + 208]                          ; SS
   256 00000C4A 41FF742478                  push qword [r12 + 120]                          ; RSP
   257 00000C4F 41FFB424E8000000            push qword [r12 + 232]                          ; RFLAGS
   258 00000C57 41FFB424C8000000            push qword [r12 + 200]                          ; CS
   259 00000C5F 41FFB424C0000000            push qword [r12 + 192]                          ; RIP
   260                                  
   261 00000C67 898680030000                mov dword [rsi + 0x380], eax                    ; 开始计时
   262                                  
   263 00000C6D 498B442440                  mov rax, [r12 + 64]
   264 00000C72 498B5C2448                  mov rbx, [r12 + 72]
   265 00000C77 498B742460                  mov rsi, [r12 + 96]
   266 00000C7C 4D8B9C2498000000            mov r11, [r12 + 152]
   267 00000C84 4D8BA424A0000000            mov r12, [r12 + 160]
   268                                  
   269 00000C8C 48CF                        iretq                                           ; 转入新线程执行
   270                                  
   271                                  ; ------------------------------------------------------------
   272                                  ; time_slice_out_handler
   273                                  ; 功能: 时间片到期中断的处理过程
   274                                  ; ------------------------------------------------------------
   275                                  time_slice_out_handler:
   276 00000C8E 50                          push rax
   277 00000C8F 53                          push rbx 
   278 00000C90 4153                        push r11 
   279 00000C92 4154                        push r12
   280 00000C94 4155                        push r13 
   281                                  
   282 00000C96 49BB00E0FFFF7FFFFF-         mov r11, LAPIC_START_ADDR                       ; 给 Local APIC 发送中断结束命令 EOI
   282 00000C9F FF                 
   283 00000CA0 41C783B00000000000-         mov dword [r11 + 0xb0], 0
   283 00000CA9 0000               
   284                                  
   285 00000CAB E879FEFFFF                  call search_for_a_ready_thread
   286 00000CB0 4D09DB                      or r11, r11 
   287 00000CB3 0F8490000000                jz .return                                      ; 未找到就绪任务
   288                                  
   289 00000CB9 0F01F8                      swapgs
   290 00000CBC 65488B042508000000          mov rax, qword [gs:8]                           ; 当前任务的 PCB 线性地址
   291 00000CC5 65488B1C2520000000          mov rbx, qword [gs:32]                          ; 当前线程的 TCB 线性地址
   292 00000CCE 0F01F8                      swapgs
   293                                  
   294                                      ; 保存当前任务和线程的状态以便将来恢复执行。
   295 00000CD1 410F20DD                    mov r13, cr3                                    ; 保存原任务的分页系统
   296 00000CD5 4C896838                    mov qword [rax + 56], r13
   297                                      ; rax 和 rbx 不需要保存，将来恢复执行时从栈中弹出
   298 00000CD9 48894B50                    mov [rbx + 80], rcx
   299 00000CDD 48895358                    mov [rbx + 88], rdx
   300 00000CE1 48897360                    mov [rbx + 96], rsi
   301 00000CE5 48897B68                    mov [rbx + 104], rdi
   302 00000CE9 48896B70                    mov [rbx + 112], rbp
   303 00000CED 48896378                    mov [rbx + 120], rsp
   304 00000CF1 4C898380000000              mov [rbx + 128], r8
   305 00000CF8 4C898B88000000              mov [rbx + 136], r9
   306 00000CFF 4C899390000000              mov [rbx + 144], r10
   307                                      ; r11、r12和 r13 不需要设置，将来恢复执行时从栈中弹出
   308 00000D06 4C89B3B0000000              mov [rbx + 176], r14
   309 00000D0D 4C89BBB8000000              mov [rbx + 184], r15
   310 00000D14 4C8B2D(08000000)            mov r13, [rel position]
   311 00000D1B 4D8DAD[490D0000]            lea r13, [r13 + .return]                        ; 将来恢复执行时，是从中断返回也～
   312 00000D22 4C89ABC0000000              mov [rbx + 192], r13                            ; rip 域为中断返回点
   313 00000D29 8C8BC8000000                mov [rbx + 200], cs
   314 00000D2F 8C93D0000000                mov [rbx + 208], ss
   315 00000D35 9C                          pushfq
   316 00000D36 8F83E8000000                pop qword [rbx + 232]
   317                                  
   318 00000D3C 48C7431000000000            mov qword [rbx + 16], 0                         ; 置线程状态为就绪
   319                                  
   320 00000D44 E955FEFFFF                  jmp resume_execute_a_thread                     ; 恢复并执行新线程
   321                                  
   322                                  .return:
   323 00000D49 415D                        pop r13
   324 00000D4B 415C                        pop r12 
   325 00000D4D 415B                        pop r11
   326 00000D4F 5B                          pop rbx 
   327 00000D50 58                          pop rax 
   328 00000D51 48CF                        iretq
   329                                  
   330                                  ; ------------------------------------------------------------
   331                                  ; new_task_notify_handler
   332                                  ; 功能: 新任务创建后，将广播新任务创建消息给所有处理器，所有处理器执行此中断服务例程。
   333                                  ; ------------------------------------------------------------
   334                                  new_task_notify_handler:
   335 00000D53 56                          push rsi 
   336 00000D54 4153                        push r11 
   337 00000D56 4154                        push r12 
   338                                  
   339 00000D58 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR                       
   339 00000D61 FF                 
   340 00000D62 C786B0000000000000-         mov dword [rsi + 0xb0], 0                       ; 发送 EOI
   340 00000D6B 00                 
   341                                  
   342 00000D6C 0F01F8                      swapgs
   343 00000D6F 6548833C2508000000-         cmp qword [gs:8], 0                             ; 当前处理器没有任务执行吗?
   343 00000D78 00                 
   344 00000D79 0F01F8                      swapgs
   345 00000D7C 7522                        jne .return 
   346                                  
   347 00000D7E E8A6FDFFFF                  call search_for_a_ready_thread
   348 00000D83 4D09DB                      or r11, r11 
   349 00000D86 7418                        jz .return                                      ; 未找到就绪任务
   350                                  
   351 00000D88 0F01F8                      swapgs
   352 00000D8B 4883C418                    add rsp, 24,                                    ; 去掉前面压入的三个
   353 00000D8F 654889242518000000          mov qword [gs:24], rsp                          ; 保存固有栈当前指针, 以便将来返回, 在进入中断时 RIP → CS → RFLAGS → RSP → SS 按顺序入栈
   354 00000D98 0F01F8                      swapgs
   355                                  
   356 00000D9B E9FEFDFFFF                  jmp resume_execute_a_thread                     ; 执行新任务
   357                                  
   358                                  .return:
   359 00000DA0 415C                        pop r12    
   360 00000DA2 415B                        pop r11
   361 00000DA4 5E                          pop rsi
   362                                  
   363 00000DA5 48CF                        iretq 
   364                                  
   365                                  ; ------------------------------------------------------------
   366                                  ; append_to_pcb_link
   367                                  ; 功能: 在 PCB 链上追加任务控制块
   368                                  ; 输入: r11=PCB 线性基地址
   369                                  ; ------------------------------------------------------------
   370 00000DA7 0000000000000000        _append_lock dq 0
   371                                  
   372                                  append_to_pcb_link:
   373 00000DAF 50                          push rax 
   374 00000DB0 53                          push rbx 
   375                                  
   376 00000DB1 9C                          pushfq
   377 00000DB2 FA                          cli 
   378                                      SET_SPIN_LOCK rax, qword [rel _append_lock]
    49                              <1>  %%spin_lock:
    50 00000DB3 48833DECFFFFFF00    <1>  cmp %2, 0
    51 00000DBB 7404                <1>  je %%get_lock
    52 00000DBD F390                <1>  pause
    53 00000DBF EBF2                <1>  jmp %%spin_lock
    54                              <1>  %%get_lock:
    55 00000DC1 B801000000          <1>  mov %1, 1
    56 00000DC6 488705DAFFFFFF      <1>  xchg %1, %2
    57 00000DCD 4883F800            <1>  cmp %1, 0
    58 00000DD1 75E0                <1>  jne %%spin_lock
   379                                  
   380 00000DD3 488B1D(C1020000)            mov rbx, [rel pcb_ptr]                          ; 取得链表首节点的线性地址
   381 00000DDA 4809DB                      or rbx, rbx 
   382 00000DDD 7513                        jnz .not_empty                                  ; 链表非空就跳转
   383 00000DDF 4D891B                      mov [r11], r11                                  ; 唯一的节点, 前驱是自己
   384 00000DE2 4D899B18010000              mov [r11 + 280], r11                            ; 后继节点也是自己
   385 00000DE9 4C891D(C1020000)            mov [rel pcb_ptr], r11                          ; 填入内核
   386 00000DF0 EB17                        jmp .return 
   387                                  
   388                                  .not_empty:
   389                                      ; rbx=头节点, rax=头节点的前驱节点, r11=追加的节点
   390 00000DF2 488B03                      mov rax, [rbx]                                  ; 取得头节点的前驱线性地址
   391 00000DF5 4C899818010000              mov [rax + 280], r11                            ; 头节点的后继是追加节点
   392 00000DFC 49899B18010000              mov [r11 + 280], rbx                            ; 追加节点的后继是头节点
   393 00000E03 498903                      mov [r11], rax                                  ; 追加节点的前驱是头节点的前驱
   394 00000E06 4C891B                      mov [rbx], r11                                  ; 头节点的前驱是追加节点
   395                                  
   396                                  .return:
   397 00000E09 48C70593FFFFFF0000-         mov qword [rel _append_lock], 0
   397 00000E12 0000               
   398 00000E14 9D                          popfq
   399                                  
   400 00000E15 5B                          pop rbx 
   401 00000E16 58                          pop rax 
   402                                  
   403 00000E17 C3                          ret 
   404                                  
   405                                  ; ------------------------------------------------------------
   406                                  ; get_current_tid
   407                                  ; 功能: 返回当前线程的标识
   408                                  ; 输出: rax=当前线程的标识
   409                                  ; ------------------------------------------------------------
   410                                  get_current_tid:
   411 00000E18 9C                          pushfq
   412 00000E19 FA                          cli 
   413 00000E1A 0F01F8                      swapgs 
   414 00000E1D 65488B042520000000          mov rax, [gs:32]
   415 00000E26 488B4008                    mov rax, [rax + 8]
   416 00000E2A 0F01F8                      swapgs
   417 00000E2D 9D                          popfq
   418                                  
   419 00000E2E C3                          ret 
   420                                  
   421                                  ; ------------------------------------------------------------
   422                                  ; get_current_pid
   423                                  ; 功能: 返回当前任务（进程）的标识
   424                                  ; 输出: rax=当前任务（进程）的标识
   425                                  ; ------------------------------------------------------------
   426                                  get_current_pid:
   427 00000E2F 9C                          pushfq
   428 00000E30 FA                          cli 
   429 00000E31 0F01F8                      swapgs
   430 00000E34 65488B042508000000          mov rax, [gs:8]
   431 00000E3D 488B4008                    mov rax, [rax + 8]
   432 00000E41 0F01F8                      swapgs
   433 00000E44 9D                          popfq
   434                                  
   435 00000E45 C3                          ret 
   436                                  
   437                                  ; ------------------------------------------------------------
   438                                  ; thread_exit
   439                                  ; 功能: 线程终止退出
   440                                  ; 输入: rdx=返回码
   441                                  ; ------------------------------------------------------------
   442                                  thread_exit:
   443 00000E46 FA                          cli 
   444                                  
   445 00000E47 0F01F8                      swapgs
   446 00000E4A 65488B1C2520000000          mov rbx, [gs:32]                                ; 取出当前线程的 TCB 线性地址
   447 00000E53 65488B242518000000          mov rsp, [gs:24]                                ; 切换到处理器固有栈
   448 00000E5C 0F01F8                      swapgs
   449                                  
   450 00000E5F 48C7431002000000            mov qword [rbx + 16], 2                         ; 线程状态: 终止
   451 00000E67 48895318                    mov [rbx + 24], rdx                             ; 返回码
   452                                  
   453 00000E6B E8B9FCFFFF                  call search_for_a_ready_thread
   454 00000E70 4D09DB                      or r11, r11 
   455 00000E73 7405                        jz .sleep 
   456                                  
   457 00000E75 E924FDFFFF                  jmp resume_execute_a_thread
   458                                  
   459                                  .sleep:
   460 00000E7A 48CF                        iretq                                           ; 回到不执行线程的代码
   461                                  
   462                                  ; ------------------------------------------------------------
   463                                  ; terminate_process
   464                                  ; 功能: 终止当前任务
   465                                  ; ------------------------------------------------------------
   466                                  terminate_process:
   467 00000E7C 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
   467 00000E85 FF                 
   468 00000E86 C78620030000000001-         mov dword [rsi + 0x320], 0x00010000             ; 屏蔽定时器中断
   468 00000E8F 00                 
   469                                  
   470 00000E90 FA                          cli                                             ; 执行流改变期间禁止时钟中断引发的任务切换
   471                                  
   472 00000E91 0F01F8                      swapgs
   473 00000E94 65488B042508000000          mov rax, [gs:8]                                 ; 当前的 PCB 线性地址
   474 00000E9D 48C7401002000000            mov qword [rax + 16], 2                         ; 任务状态=终止
   475 00000EA5 65488B042520000000          mov rax, [gs:32]                                ; 当前的 TCB 线性地址
   476 00000EAE 48C7401002000000            mov qword [rax + 16], 2                         ; 线程状态=终止
   477 00000EB6 6548C7042500000000-         mov qword [gs:0], 0
   477 00000EBF 00000000           
   478 00000EC3 65488B242518000000          mov rsp, [gs:24]                                ; 切换到处理器固有栈
   479 00000ECC 0F01F8                      swapgs
   480                                  
   481 00000ECF E855FCFFFF                  call search_for_a_ready_thread
   482 00000ED4 4D09DB                      or r11, r11 
   483 00000ED7 7405                        jz .sleep                                       ; 未找到就绪任务
   484                                  
   485 00000ED9 E9C0FCFFFF                  jmp resume_execute_a_thread                     ; 执行新任务
   486                                  
   487                                  .sleep:
   488 00000EDE 48CF                        iretq
   489                                  
   490                                  ; ------------------------------------------------------------
   491                                  ; create_thread
   492                                  ; 功能: 创建一个线程
   493                                  ; 输入: rsi=线程入口的线性地址, rdi=传递给线程的参数
   494                                  ; 输出: rdx=线程标识
   495                                  ; ------------------------------------------------------------
   496                                  create_thread:
   497 00000EE0 50                          push rax
   498 00000EE1 53                          push rbx
   499 00000EE2 51                          push rcx
   500 00000EE3 4153                        push r11
   501 00000EE5 4154                        push r12
   502 00000EE7 4155                        push r13
   503 00000EE9 4156                        push r14
   504                                  
   505                                      ; 先创建并填写 TCB
   506 00000EEB B900020000                  mov rcx, 512                                    ; 开辟内核空间
   507 00000EF0 E89FF8FFFF                  call core_memory_allocate
   508                                  
   509 00000EF5 4C89EB                      mov rbx, r13                                    ; 以下, rbx专用于保存 TCB 线性地址
   510                                  
   511 00000EF8 E810FAFFFF                  call generate_thread_id
   512 00000EFD 48894308                    mov [rbx + 8], rax                              ; 记录当前线程的标识
   513 00000F01 4889C2                      mov rdx, rax                                    ; 用于返回线程标识
   514                                  
   515 00000F04 48C7431000000000            mov qword [rbx + 16], 0                         ; 线程状态=就绪
   516                                  
   517 00000F0C B900000100                  mov rcx, 4096 * 16                              ; 为 TSS 的 RSP0 开辟栈空间
   518 00000F11 E87EF8FFFF                  call core_memory_allocate                       
   519 00000F16 4C897320                    mov [rbx + 32], r14                             ; 填写 TCB 中的 RSP0 域的值
   520                                  
   521 00000F1A 9C                          pushfq
   522 00000F1B FA                          cli 
   523 00000F1C 0F01F8                      swapgs
   524 00000F1F 654C8B1C2508000000          mov r11, [gs:8]                                 ; 当前 PCB
   525 00000F28 654C8B242520000000          mov r12, [gs:32]                                ; 当前 TCB
   526 00000F31 0F01F8                      swapgs
   527 00000F34 9D                          popfq
   528                                  
   529                                      ; 见书中 433 图
   530 00000F35 B900000100                  mov rcx, 4096 * 16                              ; 开辟线程栈空间
   531 00000F3A E8AAF8FFFF                  call user_memory_allocate
   532 00000F3F 4983EE20                    sub r14, 32                                     ; 栈中开辟 32 字节空间
   533 00000F43 4C897378                    mov [rbx + 120], r14                            ; 线程执行时的 rsp
   534                                  
   535 00000F47 498D4E08                    lea rcx, [r14 + 8]                              ; 得到线程返回地址
   536 00000F4B 49890E                      mov [r14], rcx                                  ; 相当于 call 压入返回值
   537                                  
   538                                      ; 以下填写指令 MOV RAX, 9 的机器代码
   539 00000F4E C601B8                      mov byte [rcx], 0xb8
   540 00000F51 C6410109                    mov byte [rcx + 1], 0x09
   541 00000F55 C6410200                    mov byte [rcx + 2], 0x00
   542 00000F59 C6410300                    mov byte [rcx + 3], 0x00
   543 00000F5D C6410400                    mov byte [rcx + 4], 0x00
   544                                      ; 以下填写指令 XOR RDX, RDX 的机器代码
   545 00000F61 C6410548                    mov byte [rcx + 5], 0x48
   546 00000F65 C6410631                    mov byte [rcx + 6], 0x31
   547 00000F69 C64107D2                    mov byte [rcx + 7], 0xd2
   548                                      ; 以下填写指令 SYSCALL 的机器代码
   549 00000F6D C641080F                    mov byte [rcx + 8], 0x0f
   550 00000F71 C6410905                    mov byte [rcx + 9], 0x05
   551                                  
   552 00000F75 4889B3C0000000              mov qword [rbx + 192], rsi                      ; 线程入口地址(rip)
   553                                  
   554 00000F7C 48C783C80000003B00-         mov qword [rbx + 200], USER_CODE64_SEL          ; 线程代码段选择子
   554 00000F85 0000               
   555 00000F87 48C783D00000003300-         mov qword [rbx + 208], USER_STACK64_SEL         ; 线程段选择子
   555 00000F90 0000               
   556                                  
   557 00000F92 9C                          pushfq
   558 00000F93 8F83E8000000                pop qword [rbx + 232]                           ; 线程执行时的标志寄存器
   559                                  
   560 00000F99 48C783F00000003700-         mov qword [rbx + 240], SUGG_PREEM_SLICE         ; 推荐的线程执行时间片
   560 00000FA2 0000               
   561 00000FA4 48C783180100000000-         mov qword [rbx + 280], 0                        ; 下一个 TCB 的线性地址, 0=无
   561 00000FAD 0000               
   562                                  
   563                                  .again:
   564 00000FAF 4831C0                      xor rax, rax 
   565 00000FB2 F0490FB19C24180100-         lock cmpxchg [r12 + 280], rbx                   ; 如果后继节点为 0, 则新节点为其后继. cmpxchg dest, src  ; 比较 dest 与 累加器(AL/AX/EAX/RAX)比较，相等则 dest ← src，否则累加器 ← dest
   565 00000FBB 00                 
   566 00000FBC 740A                        jz .linkd 
   567 00000FBE 4D8BA42418010000            mov r12, [r12 + 280]
   568 00000FC6 EBE7                        jmp .again
   569                                  
   570                                  .linkd:
   571 00000FC8 48B900E0FFFF7FFFFF-         mov rcx, LAPIC_START_ADDR
   571 00000FD1 FF                 
   572 00000FD2 C78110030000000000-         mov dword [rcx + 0x310], 0
   572 00000FDB 00                 
   573 00000FDC C78100030000FE4008-         mov dword [rcx + 0x300], 0x000840fe             ; 向所有处理器发送线程认领中断
   573 00000FE5 00                 
   574                                  
   575 00000FE6 415E                        pop r14
   576 00000FE8 415D                        pop r13
   577 00000FEA 415C                        pop r12
   578 00000FEC 415B                        pop r11
   579 00000FEE 59                          pop rcx
   580 00000FEF 5B                          pop rbx
   581 00000FF0 58                          pop rax
   582                                  
   583 00000FF1 C3                          ret
   584                                  
   585                                  ; ------------------------------------------------------------
   586                                  ; create_process
   587                                  ; 功能: 创建新的任务, 即分配好空间, 创建并填入 PCB
   588                                  ; 输入: r8=程序的起始逻辑扇区号
   589                                  ; ------------------------------------------------------------
   590                                  create_process:
   591 00000FF2 50                          push rax
   592 00000FF3 53                          push rbx
   593 00000FF4 51                          push rcx
   594 00000FF5 52                          push rdx
   595 00000FF6 56                          push rsi
   596 00000FF7 57                          push rdi
   597 00000FF8 55                          push rbp
   598 00000FF9 4150                        push r8
   599 00000FFB 4151                        push r9
   600 00000FFD 4152                        push r10
   601 00000FFF 4153                        push r11
   602 00001001 4154                        push r12
   603 00001003 4155                        push r13
   604 00001005 4156                        push r14
   605 00001007 4157                        push r15
   606                                  
   607                                      ; 在内核空间创建任务控制块 PCB, 来记录任务相关信息, 内核通过任务控制块来跟踪和识别任务, 并对任务进行管理和控制
   608 00001009 B900020000                  mov rcx, 512                                    ; 任务控制块 PCB 的尺寸, PCB 的格式见书中 205 图
   609 0000100E E881F7FFFF                  call core_memory_allocate                       ; 在内核分配地址
   610                                  
   611 00001013 4D89EB                      mov r11, r13                                    ; r11 寄存器用来保存 PCB 线性地址
   612                                  
   613 00001016 E879F7FFFF                  call core_memory_allocate                       ; 为线程控制块 TCB 分配内存
   614 0000101B 4D89EC                      mov r12, r13                                    ; r13 寄存器用来保存 TCB 线性地址
   615                                  
   616 0000101E 4D89A310010000              mov qword [r11 + 272], r12                      ; 在 PCB 中登记第一个 TCB
   617                                  
   618 00001025 49C7431800000000            mov qword [r11 + 24], USER_ALLOC_START          ; 填写 PCB 的下一次内存分配时可用线性地址
   619                                      
   620                                      ; 从当前的四级头表复制并创建新任务的四级头表
   621 0000102D E803F8FFFF                  call copy_current_pml4                          ; 在 core_utils64.asm 中实现
   622 00001032 49894338                    mov [r11 + 56], rax                             ; 填写 PCB 的 CR3, 默认 PCD=PWT=0(这两个属性忘记的话可以看看书中 123 页)
   623                                  
   624                                      ; 以下，切换到新任务的地址空间，并清空其 4 级头表的前半部分。
   625                                      ; 我们正在地址空间的高端执行，可正常执行内核代码并访问内核数据，同时，当前使用的栈位于地址空间高端的栈。
   626 00001036 410F20DF                    mov r15, cr3                                    ; 保存控制寄存器, 本次是临时切换, 还要再切回来
   627 0000103A 0F22D8                      mov cr3, rax                                    ; 切换到新四级头表的新地址空间
   628                                  
   629                                      ; 清空四级头表的前半部分, 即局部地址
   630 0000103D 48C7C000F0FFFF              mov rax, 0xffff_ffff_ffff_f000                  ; 四级头表线性地址, 还是递归映射...
   631 00001044 B900010000                  mov rcx, 256
   632                                  .clsp:
   633 00001049 48C70000000000              mov qword [rax], 0
   634 00001050 4883C008                    add rax, 8
   635 00001054 E2F3                        loop .clsp
   636                                  
   637 00001056 0F20D8                      mov rax, cr3                                    ; 刷新 TLB
   638 00001059 0F22D8                      mov cr3, rax 
   639                                  
   640                                      ; 为新任务分配 0 特权级使用的栈空间
   641 0000105C B900000100                  mov rcx, 4096 * 16                              ; 在内核地址开辟空间
   642 00001061 E82EF7FFFF                  call core_memory_allocate
   643 00001066 4D89742420                  mov [r12 + 32], r14                             ; 填入 TCB 中 RSP0, 满减栈, 所以写入结尾地址
   644                                  
   645                                      ; 为新任务分配 3 特权级使用的栈空间
   646 0000106B B900000100                  mov rcx, 4096 * 16                              ; 在用户地址开辟空间
   647 00001070 E874F7FFFF                  call user_memory_allocate
   648 00001075 4D89742478                  mov [r12 + 120], r14                            ; 填入 TCB 中 RSP
   649                                  
   650 0000107A 49C7431000000000            mov qword [r11 + 16], 0                         ; PCB 中的任务状态填为运行
   651 00001082 49C744241000000000          mov qword [r12 + 16], 0                         ; TCB 中的任务状态填为就绪
   652                                  
   653                                      ; 以下开始加载用户程序
   654 0000108B B900020000                  mov rcx, 512                                    ; 在用户空间开辟一个缓冲区
   655 00001090 E854F7FFFF                  call user_memory_allocate
   656 00001095 4C89EB                      mov rbx, r13 
   657 00001098 4C89C0                      mov rax, r8                                     ; r8 中存的用户程序起始扇区号         
   658 0000109B E811F1FFFF                  call read_hard_disk_0
   659                                  
   660 000010A0 4D896D10                    mov [r13 + 16], r13                             ; 在程序头填写它自己的起始线性地址
   661 000010A4 4D89EE                      mov r14, r13 
   662 000010A7 4D037508                    add r14, [r13 + 8]
   663 000010AB 4D89B424C0000000            mov [r12 + 192], r14                            ; 在 TCB 中登记程序入口的线性地址
   664                                  
   665                                      ; 以下读取程序剩下代码
   666 000010B3 498B4D00                    mov rcx, [r13]                                  ; 程序尺寸(在程序头部记录)
   667 000010B7 48F7C1FF010000              test rcx, 0x1ff                                 ; 能被 512 整除吗?
   668 000010BE 740F                        jz .y512
   669 000010C0 48C1E909                    shr rcx, 9                                      ; 不能就凑整
   670 000010C4 48C1E109                    shl rcx, 9
   671 000010C8 4881C100020000              add rcx, 512
   672                                  .y512:
   673 000010CF 4881E900020000              sub rcx, 512                                    ; 减去已读一个扇区的长度
   674 000010D6 7416                        jz .rdok 
   675 000010D8 E80CF7FFFF                  call user_memory_allocate                       ; 先分配内存在读数据
   676 000010DD 48C1E909                    shr rcx, 9                                      ; 除以 512, 计算还需要读的扇区数
   677 000010E1 48FFC0                      inc rax                                         ; 起始扇区号
   678                                  .b1:
   679 000010E4 E8C8F0FFFF                  call read_hard_disk_0
   680 000010E9 48FFC0                      inc rax 
   681 000010EC E2F6                        loop .b1 
   682                                  
   683                                  .rdok:
   684 000010EE 49C78424C80000003B-         mov qword [r12 + 200], USER_CODE64_SEL          ; 填写 TCB 中代码段选择子
   684 000010F7 000000             
   685 000010FA 49C78424D000000033-         mov qword [r12 + 208], USER_STACK64_SEL         ; 填写 TCB 中栈段选择子
   685 00001103 000000             
   686                                  
   687 00001106 9C                          pushfq
   688 00001107 418F8424E8000000            pop qword [r12 + 232]                           ; 填写 TCB 中 RFLAGS
   689                                  
   690 0000110F 49C78424F000000037-         mov qword [r12 + 240], SUGG_PREEM_SLICE         ; 推荐的执行时间片
   690 00001118 000000             
   691                                  
   692 0000111B E8D6F7FFFF                  call generate_process_id
   693 00001120 49894308                    mov [r11 + 8], rax                              ; 填入 PCB 中当前任务标识
   694                                  
   695 00001124 E8E4F7FFFF                  call generate_thread_id
   696 00001129 4989442408                  mov [r12 + 8], rax                              ; 记录主线程标识
   697                                  
   698 0000112E 49C784241801000000-         mov qword [r12 + 280], 0                        ; 下一个 TCB 的线性地址初始化为 0
   698 00001137 000000             
   699                                  
   700 0000113A E870FCFFFF                  call append_to_pcb_link                         ; 将 PCB 添加到进程控制链表尾部
   701                                  
   702 0000113F 410F22DF                    mov cr3, r15                                    ; 切换到原任务地址空间
   703                                  
   704 00001143 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR                       ; Local APIC 的线性地址
   704 0000114C FF                 
   705 0000114D C78610030000000000-         mov dword [rsi + 0x310], 0
   705 00001156 00                 
   706 00001157 C78600030000FE4008-         mov dword [rsi + 0x300], 0x000840fe             ; 向所有处理器发送任务/线程认领中断
   706 00001160 00                 
   707                                  
   708 00001161 415F                        pop r15
   709 00001163 415E                        pop r14
   710 00001165 415D                        pop r13
   711 00001167 415C                        pop r12
   712 00001169 415B                        pop r11
   713 0000116B 415A                        pop r10
   714 0000116D 4159                        pop r9
   715 0000116F 4158                        pop r8
   716 00001171 5D                          pop rbp
   717 00001172 5F                          pop rdi
   718 00001173 5E                          pop rsi
   719 00001174 5A                          pop rdx
   720 00001175 59                          pop rcx
   721 00001176 5B                          pop rbx
   722 00001177 58                          pop rax
   723                                  
   724 00001178 C3                          ret
   725                                  ; ------------------------------------------------------------
   726                                  ; syscall_procedure
   727                                  ; 功能: 系统调用的处理过程, 处理器会自动关闭可屏蔽中断
   728                                  ; 注意: rcx 和 r11 由处理器使用, 保存 rip 和 rflags 的内容; rbp 和 r15 由此例程占用. 如有必要, 请用户程序在调用 syscall 前保存它们, 在系统调用返回后自行恢复.
   729                                  ; ------------------------------------------------------------
   730                                  syscall_procedure: 
   731                                  
   732 00001179 0F01F8                      swapgs
   733 0000117C 654889242500000000          mov [gs:0], rsp                                 ; 保存当前 3 特权级栈指针
   734 00001185 65488B242584000000          mov rsp, [gs:128 + 4],                          ; 使用 TSS 的 RSP0 作为安全栈
   735 0000118E 65FF342500000000            push qword [gs:0]                               
   736 00001196 0F01F8                      swapgs
   737 00001199 FB                          sti                                             ; 准备工作全部完成，中断和任务切换无虞
   738                                  
   739 0000119A 4157                        push r15 
   740 0000119C 4C8B3D(08000000)            mov r15, [rel position]
   741 000011A3 4D03BCC7[69020000]          add r15, [r15 + rax * 8 + sys_entry]            ; 得到指定的那个系统调用功能的线性地址
   742 000011AB 41FFD7                      call r15
   743 000011AE 415F                        pop r15 
   744                                  
   745 000011B0 FA                          cli 
   746 000011B1 5C                          pop rsp                                         ; 恢复原先的 3 特权级栈指针
   747 000011B2 480F07                      o64 sysret
   748                                  
   749                                  ; ------------------------------------------------------------
   750                                  ; init
   751                                  ; 功能: 初始化内核工作环境
   752                                  ; ------------------------------------------------------------
   753                                  init: 
   754                                      ; 将 GDT 的线性地址映射到虚拟内存高端的相同位置。
   755                                      ; 处理器不支持 64 位立即数到内存地址的操作, 所以用两条指令完成。
   756 000011B5 48B8000001000080FF-         mov rax, UPPER_GDT_LINEAR                       ; GDT 高端线性地址
   756 000011BE FF                 
   757 000011BF 48890425047E0000            mov qword [SDA_PHY_ADDR + 4], rax
   758                                  
   759 000011C7 0F011425027E0000            lgdt [SDA_PHY_ADDR + 2]                
   760                                  
   761                                      ; 将栈映射到高端
   762                                      ; 64 位模式下不支持源操作数为 64 位立即数的加法操作。
   763 000011CF 48B8000000000080FF-         mov rax, UPPER_LINEAR_START
   763 000011D8 FF                 
   764 000011D9 4801C4                      add rsp, rax 
   765                                  
   766                                      ; 准备让处理器从虚拟地址空间的高端开始执行（现在依然在低端执行）
   767 000011DC 48B8000000000080FF-         mov rax, UPPER_LINEAR_START
   767 000011E5 FF                 
   768 000011E6 480105(08000000)            add [rel position], rax                         ; 更新 position 处地址, 采用相对寻址方式
   769 000011ED 488B05(08000000)            mov rax, [rel position]
   770 000011F4 4805[FC110000]              add rax, .to_upper
   771 000011FA FFE0                        jmp rax                                         ; 用 jmp 改变 rip
   772                                  
   773                                  .to_upper:
   774                                      ; 接下来初始化中断描述符表 IDT，并为 32 个异常以及 224 个中断安装门描述符
   775                                  
   776                                      ; 为 32 个异常创建通用处理过程的中断门
   777 000011FC 4C8B0D(08000000)            mov r9, [rel position]
   778 00001203 498D81[F30A0000]            lea rax, [r9 + general_exception_handler]
   779 0000120A E81AEFFFFF                  call make_interrupt_gate                        ; 在 core_utils64.asm 中实现
   780                                  
   781 0000120F 4D31C0                      xor r8, r8  
   782                                  .idt0:                                              ; 32 个异常
   783 00001212 E857EFFFFF                  call mount_idt_entry                            ; 在 core_utils64.asm 中实现
   784 00001217 49FFC0                      inc r8 
   785 0000121A 4983F81F                    cmp r8, 31 
   786 0000121E 7EF2                        jle .idt0
   787                                  
   788                                      ; 创建并安装中断门
   789 00001220 498D81[F10A0000]            lea rax, [r9 + general_interrupt_handler]       
   790 00001227 E8FDEEFFFF                  call make_interrupt_gate                        ; 在 core_utils64.asm 中实现
   791                                  
   792 0000122C 41B820000000                mov r8, 32 
   793                                  .idt1:
   794 00001232 E837EFFFFF                  call mount_idt_entry                            ; 在 core_utils64.asm 中实现
   795 00001237 49FFC0                      inc r8 
   796 0000123A 4981F8FF000000              cmp r8, 255
   797 00001241 7EEF                        jle .idt1
   798                                  
   799 00001243 48B800E000000080FF-         mov rax, UPPER_IDT_LINEAR                       ; 中断描述符表 IDT 的高端线性地址
   799 0000124C FF                 
   800 0000124D 48BB007E00000080FF-         mov rbx, UPPER_SDA_LINEAR                       ; 系统数据区 SDA 的高端线性地址
   800 00001256 FF                 
   801 00001257 66C7430CFF0F                mov word [rbx + 0x0c], 256 * 16 - 1
   802 0000125D 4889430E                    mov qword [rbx + 0x0e], rax                     ; 将 IDT 的线性地址和界限写入内核空间保存
   803                                  
   804 00001261 0F015B0C                    lidt [rbx + 0x0c]                               ; 加载 IDT
   805                                  
   806 00001265 B0FF                        mov al, 0xff                                    ; 屏蔽所有发往 8259A 主芯片的中断信号
   807 00001267 E621                        out 0x21, al                                    ; 多处理器下不再使用 8259 芯片
   808                                  
   809                                      ; 在 64 位模式下显示的第一条信息!
   810 00001269 4C8B3D(08000000)            mov r15, [rel position]
   811 00001270 498D9F[36010000]            lea rbx, [r15 + welcome]
   812 00001277 E884EDFFFF                  call put_string64                               ; 在 core_utils64.asm 中实现
   813                                  
   814                                      ; 安装系统服务(syscall, sysret)所需的代码段和栈段描述符
   815 0000127C 49BF007E00000080FF-         mov r15, UPPER_SDA_LINEAR                       ; 系统数据区 SDA 的线性地址
   815 00001285 FF                 
   816 00001286 4831DB                      xor rbx, rbx 
   817 00001289 66418B5F02                  mov bx, [r15 + 2]                               ; 得到 GDT 界限值(表的总字节数 - 1 == 下标)
   818 0000128E 66FFC3                      inc bx 
   819 00001291 49035F04                    add rbx, [r15 + 4]                              ; GDT 基址 + GDT 界限值 + 1 == 新描述符的地址
   820                                                          
   821                                      ; 增加新的描述符, 这里可以看书中 182 页的图, 将之前设置的四个描述符也画全了
   822                                  
   823                                      ; 创建 4# 描述符, 栈/数据段描述符, DPL= 0
   824 00001295 C703FFFF0000                mov dword [rbx], 0x0000ffff
   825 0000129B C743040092CF00              mov dword [rbx + 4], 0x00cf9200                
   826                                      ; 创建 5# 描述符, 兼容模式下代码段描述符, 暂不支持, 位置保留, 设为全 0
   827 000012A2 C7430800000000              mov dword [rbx + 8], 0  
   828 000012A9 C7430C00000000              mov dword [rbx + 12], 0
   829                                      ; 创建 6# 描述符, 栈/数据段描述符, DPL= 3
   830 000012B0 C74310FFFF0000              mov dword [rbx + 16], 0x0000ffff
   831 000012B7 C7431400F2CF00              mov dword [rbx + 20], 0x00cff200
   832                                      ; 创建 7# 描述符, 64 位模式的代码段描述符, DPL= 3
   833 000012BE C74318FFFF0000              mov dword [rbx + 24], 0x0000ffff
   834 000012C5 C7431C00F8AF00              mov dword [rbx + 28], 0x00aff800
   835                                  
   836                                      ; 我们为每个逻辑处理器都准备一个专属数据区, 它是由每个处理器的 GS 所指向的。
   837                                      ; 为当前处理器(BSP)准备专属数据区, 设置 GS 并安装任务状态段 TSS 的描述符
   838                                      ; 详情见书中 348 页
   839 000012CC B900010000                  mov rcx, 256                                    ; 专属数据区长度
   840 000012D1 E8BEF4FFFF                  call core_memory_allocate                       ; 在 core_utils64.asm 中实现
   841 000012D6 49C7450800000000            mov qword [r13 + 8], 0                          ; 当前任务的 PCB 指针, 初始化为 0
   842 000012DE 49C7451000000000            mov qword [r13 + 16], 0                         ; 将当前的处理器编号设置为 #0
   843 000012E6 49896518                    mov [r13 + 24], rsp                             ; 当前处理器的专属栈
   844 000012EA 498D8580000000              lea rax, [r13 + 128]                            ; TSS 开始于专属数据区内偏移为 128 的地方
   845 000012F1 E84FEEFFFF                  call make_tss_descriptor
   846 000012F6 48897320                    mov qword [rbx + 32], rsi                       ; TSS 描述符的低 64 位
   847 000012FA 48897B28                    mov qword [rbx + 40], rdi                       ; TSS 描述符的高 64 位
   848                                  
   849 000012FE 664183470230                add word [r15 + 2], 48                          ; 更新 GDT 的边界值, 48 是四个段描述符和一个 TSS 描述符的字节数
   850 00001304 410F015702                  lgdt [r15 + 2]
   851                                  
   852 00001309 66B94000                    mov cx, 0x0040                                  ; TSS 描述符选择子
   853 0000130D 0F00D9                      ltr cx                                          ; 使用 ltr 指令加载 TSS 选择子
   854                                  
   855                                      ; 将处理器专属数据区首地址保存到当前处理器的型号专属寄存器 IA32_KERNEL_GS_BASE
   856 00001310 B9020100C0                  mov ecx, 0xc000_0102                            ; IA32_KERNEL_GS_BASE
   857 00001315 4C89E8                      mov rax, r13                                    ; 只用 eax
   858 00001318 4C89EA                      mov rdx, r13 
   859 0000131B 48C1EA20                    shr rdx, 32                                     ; 只用 edx
   860 0000131F 0F30                        wrmsr
   861                                  
   862                                      ; 为快速系统调用 syscall 和 sysret 准备参数, 详细见书中 180-185
   863 00001321 B9800000C0                  mov ecx, 0x0c0000080                            ; 指定型号专属寄存器 IA32_EFER
   864 00001326 0F32                        rdmsr
   865 00001328 0FBAE800                    bts eax, 0                                      ; 置位 SCE 位, 允许 syscall 和 sysret
   866 0000132C 0F30                        wrmsr
   867                                  
   868 0000132E B9810000C0                  mov ecx, 0xc0000081                             ; IA32_STAR, syscall 会自动切换代码段寄存器（CS）到内核态的代码段，其值来自 IA32_STAR
   869 00001333 BA18002B00                  mov edx, (RESVD_DESC_SEL << 16) | CORE_CODE64_SEL ; 高 32 位, RESVD_DESC_SEL 是用户态代码段选择子（返回用户态时使用）, CORE_CODE64_SEL 是内核态代码段选择子（进入内核态时使用）
   870 00001338 31C0                        xor eax, eax                                    ; 低 32 位
   871 0000133A 0F30                        wrmsr                                           
   872                                  
   873 0000133C B9820000C0                  mov ecx, 0xc0000082                             ; IA32_LSTAR
   874 00001341 488B05(08000000)            mov rax, [rel position]
   875 00001348 488D80[79110000]            lea rax, [rax + syscall_procedure]              ; 只用 EAX 部分
   876 0000134F 4889C2                      mov rdx, rax 
   877 00001352 48C1EA20                    shr rdx, 32                                     ; 只用 EDX 部分
   878 00001356 0F30                        wrmsr
   879                                  
   880 00001358 B9840000C0                  mov ecx, 0xc0000084                             ; IA32_FMASK
   881 0000135D 31D2                        xor edx, edx 
   882 0000135F B800770400                  mov eax, 0x00047700                             ; 将 TF, IF, DF, IOPL, AC 清零, 其他保持不变, 可看书 185 页的图
   883 00001364 0F30                        wrmsr
   884                                  
   885                                      ; 以下初始化高级可编程中断控制器 APIC。在计算机启动后，BIOS已经对 LAPIC 和 IOAPIC 做了
   886                                      ; 初始化并创建了相关的高级配置和电源管理接口（ACPI）表项。可以从中获取多处理器和
   887                                      ; APIC 信息。英特尔架构的个人计算机（IA-PC）从 1MB 物理内存中搜索获取；启用可扩展固件
   888                                      ; 接口（EFI或者叫UEFI）的计算机需使用 EFI 传递的 EFI 系统表指针定位相关表格并从中获取
   889                                      ; 多处理器和 APIC 信息。为简单起见，我们采用前一种传统的方式。请注意虚拟机的配置！
   890                                  
   891                                      ; ACPI 申领的内存区域已经保存在我们的系统数据区（SDA），以下将其读出。此内存区可能
   892                                      ; 位于分页系统尚未映射的部分，故以下先将这部分内存进行一一映射（线性地址=物理地址）
   893 00001366 66833C25167E000000          cmp word [SDA_PHY_ADDR + 0x16], 0               ; 检查检查地址范围描述结构的数量是否为 0
   894 0000136F 7411                        jz .acpi_err                                    ; 除非 bios 不支持 acpi, 否则不会是 0
   895 00001371 BE187E0000                  mov rsi, SDA_PHY_ADDR + 0x18                    ; 系统数据区, 地址范围描述结构的起始地址
   896                                  .looking:
   897 00001376 837E1003                    cmp dword [rsi + 16], 3                         ; 3 代表是 ACPI 申领的内存, ACPI 的介绍可以看书中 257 页
   898 0000137A 741B                        jz .looked
   899 0000137C 4883C620                    add rsi, 32                                     ; 每个地址范围描述结构的长度
   900 00001380 E2F4                        loop .looking
   901                                  
   902                                  .acpi_err:
   903 00001382 4C8B3D(08000000)            mov r15, [rel position]
   904 00001389 498D9F[00000000]            lea rbx, [r15 + acpi_error]
   905 00001390 E86BECFFFF                  call put_string64
   906 00001395 FA                          cli 
   907 00001396 F4                          hlt 
   908                                  
   909                                  .looked:
   910 00001397 488B1E                      mov rbx, [rsi]                                  ; ACPI 申领的起始物理地址
   911 0000139A 488B4E08                    mov rcx, [rsi + 8]                              ; ACPI 申领的内存大小, 以字节计
   912 0000139E 4801D9                      add rcx, rbx                                    ; ACPI 申领的内存上边界
   913 000013A1 48C7C200F0FFFF              mov rdx, 0xffff_ffff_ffff_f000                  ; 用于生成页地址的掩码
   914                                  
   915                                  .mapping:
   916 000013A8 4989DD                      mov r13, rbx                                    ; 映射的线性地址
   917 000013AB 4889D8                      mov rax, rbx 
   918 000013AE 4821D0                      and rax, rdx 
   919 000013B1 4883C807                    or rax, 0x07                                    ; 将地址设置上属性
   920 000013B5 E8BEF3FFFF                  call mapping_laddr_to_page
   921 000013BA 4881C300100000              add rbx, 0x1000
   922 000013C1 4839CB                      cmp rbx, rcx 
   923 000013C4 7EE2                        jle .mapping
   924                                  
   925                                      ; 从物理地址 0x60000(常规内存顶端) 开始, 搜索系统描述指针结构(RSDP)
   926 000013C6 BB00000600                  mov rbx, 0x60000
   927 000013CB 48B952534420505452-         mov rcx, "RSD PTR "                             ; 结构起始标记
   927 000013D4 20                 
   928                                  
   929                                  .searc:
   930 000013D5 48390B                      cmp qword [rbx], rcx
   931 000013D8 740F                        je .finda 
   932 000013DA 4883C310                    add rbx, 16                                     ; 结构的标记位于 16 字节边界处, 也就是说可以以 16 字节为单位搜索
   933 000013DE 4881FBF0FF0F00              cmp rbx, 0xffff0                                ; 搜索上边界
   934 000013E5 7CEE                        jl .searc 
   935 000013E7 EB99                        jmp .acpi_err                                   ; 未找到 RSDP, 报错停机
   936                                  
   937                                  .finda:
   938                                      ; RSDT 和 XSDT 都指向 MADT, 但 RSDT 给出的是 32 位物理地址, 而 XDST 给出 64 位物理地址。
   939                                      ; 只有 VCPI 2.0 及更高版本才有 XSDT。典型地, VBox 支持 ACPI 2.0 而 Bochs 仅支持 1.0
   940                                      ; 这个可以看书中 274 往后的几个图
   941 000013E9 807B0F02                    cmp byte [rbx + 15], 2                          ; 检测 ACPI 的版本是否为 2
   942 000013ED 752B                        jne .vcpi_1
   943 000013EF 488B5B18                    mov rbx, [rbx + 24]                             ; 得到扩展的系统描述表 XSDT 的物理地址
   944                                  
   945                                      ; 以下开始在 XSDT 中遍历搜索多 APIC 描述符表, 即 MADT
   946 000013F3 4831FF                      xor rdi, rdi                                    ; 下面要使用 rdi, 尽管 edi 赋值了, 但还是要清空 rdi
   947 000013F6 8B7B04                      mov edi, [rbx + 4]                              ; 得到 XSDT 长度, 以字节计
   948 000013F9 4801DF                      add rdi, rbx                                    ; 计算上边界的物理地址
   949 000013FC 4883C324                    add rbx, 36                                     ; XSDT 尾部数组的物理地址
   950                                  .madt0:
   951 00001400 4C8B1B                      mov r11, [rbx]             
   952 00001403 41813B41504943              cmp dword [r11], "APIC"                         ; MADT 表的标记
   953 0000140A 7436                        je .findm                       
   954 0000140C 4883C308                    add rbx, 8                                      ; 下一个元素
   955 00001410 4839FB                      cmp rbx, rdi  
   956 00001413 7CEB                        jl .madt0
   957 00001415 E968FFFFFF                  jmp .acpi_err
   958                                  
   959                                      ; 以下处理 VCPI 1.0, 在 RSDT 中遍历搜索 MADT
   960                                  .vcpi_1:
   961 0000141A 8B5B10                      mov ebx, [rbx + 16]                             ; 得到根系统描述符表 RSDT 的物理地址
   962 0000141D 678B7B04                    mov edi, [ebx + 4]                              ; 得到 RSDT 的长度, 以字节计
   963 00001421 01DF                        add edi, ebx                                    ; 上边界物理地址
   964 00001423 83C324                      add ebx, 36                                     ; 尾部数组的物理地址
   965 00001426 4D31DB                      xor r11, r11 
   966                                  .madt1:
   967 00001429 67448B1B                    mov r11d, [ebx]
   968 0000142D 41813B41504943              cmp dword [r11], "APIC"                         ; MADT 表的标记
   969 00001434 740C                        je .findm
   970 00001436 83C304                      add ebx, 4
   971 00001439 39FB                        cmp ebx, edi 
   972 0000143B 7CEC                        jl .madt1
   973 0000143D E940FFFFFF                  jmp .acpi_err
   974                                  
   975                                  .findm:
   976                                      ; 此时, r11 是 MADT 的物理地址
   977 00001442 418B5324                    mov edx, [r11 + 36]                             ; 预置的 Local APIC 物理地址
   978 00001446 8915(28010000)              mov [rel lapic_addr], edx
   979                                  
   980                                      ; 以下开始遍历系统中的逻辑处理器的 LAPIC ID 和 I/O APIC
   981 0000144C 4C8B3D(08000000)            mov r15, [rel position]
   982 00001453 4D8DBF[28000000]            lea r15, [r15 + cpu_list]
   983                                  
   984 0000145A 4831FF                      xor rdi, rdi 
   985 0000145D 418B7B04                    mov edi, [r11 + 4]                              ; MADT 的长度
   986 00001461 4C01DF                      add rdi, r11                                    ; 上边界物理地址
   987 00001464 4983C32C                    add r11, 44                                     ; 指向 MADT 尾部中断控制器结构列表
   988                                  .enumd:
   989 00001468 41803B00                    cmp byte [r11], 0                               ; 0 代表 Local APIC
   990 0000146C 7408                        je .l_apic
   991 0000146E 41803B01                    cmp byte [r11], 1                               ; 1 代表 I/O APIC
   992 00001472 741B                        je .ioapic
   993 00001474 EB2D                        jmp .m_end 
   994                                  .l_apic:
   995 00001476 41837B0400                  cmp dword [r11 + 4], 0                          ; Local APIC flag
   996 0000147B 7426                        jz .m_end
   997 0000147D 418A4303                    mov al, [r11 + 3]                                ; 获取 Local APIC ID
   998 00001481 418807                      mov [r15], al                                   ; 保存 Local APIC ID 到 cpu_list
   999 00001484 49FFC7                      inc r15
  1000 00001487 FE05(27000000)              inc byte [rel num_cpus]                         ; 原来 cpu 数量是这么统计出来的
  1001 0000148D EB14                        jmp .m_end
  1002                                  .ioapic:
  1003 0000148F 418A4302                    mov al, [r11 + 2]                               ; 取出 I/O APIC ID
  1004 00001493 8805(30010000)              mov [rel ioapic_id], al                         ; 保存 I/O APIC ID
  1005 00001499 418B4304                    mov eax, [r11 + 4]                              ; 取出 I/O APIC 物理地址
  1006 0000149D 8905(2C010000)              mov [rel ioapic_addr], eax                      ; 保存 I/O APIC ID 物理地址
  1007                                  .m_end:
  1008 000014A3 4831C0                      xor rax, rax 
  1009 000014A6 418A4301                    mov al, [r11 + 1]
  1010 000014AA 4901C3                      add r11, rax                                    ; 计算出下一个中断控制结构列表的物理地址
  1011 000014AD 4939FB                      cmp r11, rdi 
  1012 000014B0 7CB6                        jl .enumd
  1013                                  
  1014                                      ; 遍历完成, 映射物理地址到内核指定区域
  1015                                  
  1016                                      ; Local APIC -> LAPIC_START_ADDR
  1017 000014B2 49BD00E0FFFF7FFFFF-         mov r13, LAPIC_START_ADDR
  1017 000014BB FF                 
  1018 000014BC 4831C0                      xor rax, rax 
  1019 000014BF 8B05(28010000)              mov eax, [rel lapic_addr]                       ; 取出 LAPIC 的物理地址
  1020 000014C5 83C81F                      or eax, 0x1f                                    ; 设置属性, PCD=PWT=U/S=R/W=P=1, 强不可缓存
  1021 000014C8 E8ABF2FFFF                  call mapping_laddr_to_page
  1022                                      ; I/O APIC -> IOAPIC_START_ADDR
  1023 000014CD 49BD00D0FFFF7FFFFF-         mov r13, IOAPIC_START_ADDR
  1023 000014D6 FF                 
  1024 000014D7 4831C0                      xor rax, rax 
  1025 000014DA 8B05(2C010000)              mov eax, [rel ioapic_addr]
  1026 000014E0 83C81F                      or eax, 0x1f  
  1027 000014E3 E890F2FFFF                  call mapping_laddr_to_page
  1028                                  
  1029                                      ; 以下测量当前处理器 1ms 内经历了多少时钟周期, 作为后续的定时基准, 详情见书中284 页
  1030 000014E8 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
  1030 000014F1 FF                 
  1031                                  
  1032 000014F2 C78620030000000001-         mov dword [rsi + 0x320], 0x10000                ; 定时器的本地向量表入口寄存器, 单次击发模式
  1032 000014FB 00                 
  1033 000014FC C786E00300000B0000-         mov dword [rsi + 0x3e0], 0x0b                   ; 定时器的分频配置寄存器: 1 分频
  1033 00001505 00                 
  1034                                  
  1035 00001506 B00B                        mov al, 0x0b                                    ; RTC 寄存器 B                                     
  1036 00001508 0C80                        or al, 0x80                                     ; 阻断 NMI
  1037 0000150A E670                        out 0x70, al            
  1038 0000150C B052                        mov al, 0x52                                    ; 设置寄存器 B, 开发周期性中断, 开放更新结束后中断, BCD 码, 24 小时制
  1039 0000150E E671                        out 0x71, al 
  1040                                  
  1041 00001510 B08A                        mov al, 0x8a                                    ; CMOS 寄存器 A
  1042 00001512 E670                        out 0x70, al 
  1043 00001514 B02D                        mov al, 0x2d                                    ; 32 kHz, 125 ms 的周期性中断
  1044 00001516 E671                        out 0x71, al                                    ; 写回 CMOS 寄存器 A
  1045                                  
  1046 00001518 B08C                        mov al, 0x8c
  1047 0000151A E670                        out 0x70, al 
  1048 0000151C E471                        in al, 0x71                                     ; 读寄存器 C
  1049                                  .w0:
  1050 0000151E E471                        in al, 0x71 
  1051 00001520 480FBAE006                  bt rax, 6                                       ; 更新周期结束中断已发生
  1052 00001525 73F7                        jnc .w0 
  1053 00001527 C78680030000FFFFFF-         mov dword [rsi + 0x380], 0xffff_ffff            ; 定时器初始计数寄存器: 置初始值并开始计数
  1053 00001530 FF                 
  1054                                  .w1:
  1055 00001531 E471                        in al, 0x71     
  1056 00001533 480FBAE006                  bt rax, 6   
  1057 00001538 73F7                        jnc .w1 
  1058 0000153A 8B9690030000                mov edx, [rsi + 0x390],                         ; 定时器初始计数寄存器: 读当前计数值
  1059                                  
  1060 00001540 B8FFFFFFFF                  mov eax, 0xffff_ffff
  1061 00001545 29D0                        sub eax, edx 
  1062 00001547 31D2                        xor edx, edx 
  1063 00001549 BB7D000000                  mov ebx, 125                                    ; 125ms
  1064 0000154E F7F3                        div ebx                                         ; 结果存在 eax 中, 即当前处理器在 1ms 内的时钟数
  1065                                  
  1066 00001550 8905(32010000)              mov [rel clocks_1ms], eax                       ; 记录
  1067                                  
  1068 00001556 B00B                        mov al, 0x0b                                    ; RTC 寄存器 B
  1069 00001558 0C80                        or al, 0x80                                     ; 阻断 NMI
  1070 0000155A E670                        out 0x70, al 
  1071 0000155C B012                        mov al, 0x12                                    ; 设置寄存器 B, 只允许更新周期结束中断
  1072 0000155E E671                        out 0x71, al 
  1073                                  
  1074                                      ; 安装用于任务切换的中断处理过程
  1075 00001560 4C8B0D(08000000)            mov r9, [rel position]
  1076 00001567 498D81[530D0000]            lea rax, [r9 + new_task_notify_handler]         ; 得到中断处理过程的线性地址
  1077 0000156E E8B6EBFFFF                  call make_interrupt_gate                        
  1078                                  
  1079 00001573 FA                          cli 
  1080 00001574 41B8FE000000                mov r8, 0xfe                                    ; 任务切换使用的中断向量, 数越大, 优先级越高
  1081 0000157A E8EFEBFFFF                  call mount_idt_entry
  1082 0000157F FB                          sti 
  1083                                  
  1084                                      ; 以下安装时间片到期中断处理过程
  1085 00001580 4C8B0D(08000000)            mov r9, [rel position]
  1086 00001587 498D81[8E0C0000]            lea rax, [r9 + time_slice_out_handler]          ; 得到中断处理过程的线性地址
  1087 0000158E E896EBFFFF                  call make_interrupt_gate            
  1088                                  
  1089 00001593 FA                          cli 
  1090 00001594 41B8FD000000                mov r8, 0xfd 
  1091 0000159A E8CFEBFFFF                  call mount_idt_entry
  1092 0000159F FB                          sti
  1093                                  
  1094                                      ; 以下初始化应用处理器 AP, 先将初始化代码复制到物理内存的选定位置
  1095 000015A0 488B35(08000000)            mov rsi, [rel position]
  1096 000015A7 488DB6[00000000]            lea rsi, [rsi + section.ap_init_block.start]    ; 源
  1097 000015AE BF00F00000                  mov rdi, AP_START_UP_ADDR                       ; 目的地
  1098 000015B3 B983000000                  mov rcx, ap_init_tail - ap_init                 ; 次数
  1099 000015B8 FC                          cld 
  1100 000015B9 F3A4                        repe movsb 
  1101                                  
  1102                                      ; 所有处理器都应该在初始化期间递增应答计数值
  1103 000015BB FE05(31010000)              inc byte [rel ack_cpus]                         ; BSP 自己的应答计数值
  1104                                  
  1105                                      ; 给其它处理器发送 INIT IPI 和 SIPI, 命令他们初始化自己
  1106 000015C1 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
  1106 000015CA FF                 
  1107 000015CB C78610030000000000-         mov dword [rsi + 0x310], 0
  1107 000015D4 00                 
  1108 000015D5 C7860003000000450C-         mov dword [rsi + 0x300], 0x000c4500             ; 先发送 INIT IPI
  1108 000015DE 00                 
  1109 000015DF C786000300000F460C-         mov dword [rsi + 0x300], (AP_START_UP_ADDR >> 12) | 0x000c4600      ; start up IPI
  1109 000015E8 00                 
  1110 000015E9 C786000300000F460C-         mov dword [rsi + 0x300], (AP_START_UP_ADDR >> 12) | 0x000c4600      ; 保险起见发两次
  1110 000015F2 00                 
  1111                                  
  1112 000015F3 8A05(27000000)              mov al, [rel num_cpus]
  1113                                  
  1114                                  .wcpus:
  1115 000015F9 3A05(31010000)              cmp al, [rel ack_cpus]
  1116 000015FF 75F8                        jne .wcpus                                      ; 等待所有应用处理器的应答
  1117                                  
  1118                                      ; 显示已应答的处理器数量
  1119 00001601 4C8B3D(08000000)            mov r15, [rel position]
  1120                                  
  1121 00001608 4D31C0                      xor r8, r8 
  1122 0000160B 448A05(31010000)            mov r8b, [rel ack_cpus]
  1123 00001612 498D9F[69010000]            lea rbx, [r15 + buffer]
  1124 00001619 E842F3FFFF                  call bin64_to_dec
  1125 0000161E E8DDE9FFFF                  call put_string64
  1126                                  
  1127 00001623 498D9F[58010000]            lea rbx, [r15 + cpu_init_ok]
  1128 0000162A E8D1E9FFFF                  call put_string64
  1129                                  
  1130                                      ; 以下创建进程
  1131 0000162F 41B832000000                mov r8, 50
  1132 00001635 E8B8F9FFFF                  call create_process
  1133                                  
  1134 0000163A E9AFF4FFFF                  jmp ap_to_core_entry.do_idle                    ; 去处理器集结休息区
  1135                                  
  1136                                  section ap_init_block vstart=0                      ; vstart 改变段内汇编地址, 让其都相对于段起始, 即这段代码是浮动的
  1137                                  
  1138                                      bits 16                                         ; 应用处理器 AP 从实模式开始
  1139                                  
  1140                                  ap_init:
  1141 00000000 B8000F                      mov ax, AP_START_UP_ADDR >> 4
  1142 00000003 8ED8                        mov ds, ax 
  1143                                  
  1144                                      SET_SPIN_LOCK al, byte [lock_var]               ; 自旋知道获得锁
    49                              <1>  %%spin_lock:
    50 00000005 803E[8200]00        <1>  cmp %2, 0
    51 0000000A 7404                <1>  je %%get_lock
    52 0000000C F390                <1>  pause
    53 0000000E EBF5                <1>  jmp %%spin_lock
    54                              <1>  %%get_lock:
    55 00000010 B001                <1>  mov %1, 1
    56 00000012 8606[8200]          <1>  xchg %1, %2
    57 00000016 3C00                <1>  cmp %1, 0
    58 00000018 75EB                <1>  jne %%spin_lock
  1145                                  
  1146 0000001A B8E007                      mov ax, SDA_PHY_ADDR >> 4                       ; 切换到系统数据区
  1147 0000001D 8ED8                        mov ds, ax 
  1148                                  
  1149 0000001F 0F01160200                  lgdt [2]                                        ; 加载描述符寄存器 GDTR, 实模式下只加载 6 字节的内容, 界限值 2 字节, 基地址 4 字节, 描述符已经填好
  1150                                  
  1151 00000024 E492                        in al, 0x92                                     ; 南桥芯片内端口
  1152 00000026 0C02                        or al, 0000_0010B
  1153 00000028 E692                        out 0x92, al                                    ; 打开 A20
  1154                                  
  1155 0000002A FA                          cli                                             ; 中断机制尚未工作
  1156                                  
  1157 0000002B 0F20C0                      mov eax, cr0
  1158 0000002E 6683C801                    or eax, 1
  1159 00000032 0F22C0                      mov cr0, eax                                    ; 设置 PE 位
  1160                                  
  1161                                      ; 进入保护模式...
  1162 00000035 EA[3AF0]0800                jmp 0x0008: AP_START_UP_ADDR + .flush           ; 0x0008 是保护模式下的代码段描述符的选择子, 清流水线并串行化处理器
  1163                                  
  1164                                      [bits 32]
  1165                                  .flush:
  1166 0000003A B810000000                  mov eax, 0x0010                                 ; 加载数据段(4gb)选择子
  1167 0000003F 8ED0                        mov ss, eax                                     ; 加载堆栈段(4gb)选择子
  1168 00000041 BC007E0000                  mov esp, 0x7e00                                 ; 堆栈指针
  1169                                  
  1170                                      ; 令 CR3 寄存器指向 4 级表头(保护模式下的 32 位 CR3)
  1171 00000046 B800A00000                  mov eax, PML4_PHY_ADDR                          ; PCD = PWT = 0
  1172 0000004B 0F22D8                      mov cr3, eax 
  1173                                  
  1174                                      ; 开启物理地址扩展 PAE
  1175 0000004E 0F20E0                      mov eax, cr4 
  1176 00000051 0FBAE805                    bts eax, 5
  1177 00000055 0F22E0                      mov cr4, eax 
  1178                                  
  1179                                      ; 设置型号专属寄存器 IA32_EFER.LME，允许 IA_32e 模式
  1180 00000058 B9800000C0                  mov ecx, 0x0c0000080                            ; 指定型号专属寄存器 IA32_EFER
  1181 0000005D 0F32                        rdmsr 
  1182 0000005F 0FBAE808                    bts eax, 8                                      ; 设置 LME 位
  1183 00000063 0F30                        wrmsr
  1184                                  
  1185                                      ; 开启分页功能
  1186 00000065 0F20C0                      mov eax, cr0 
  1187 00000068 0FBAE81F                    bts eax, 31                                     ; 置位 CR0.PG
  1188 0000006C 0F22C0                      mov cr0, eax 
  1189                                  
  1190                                      ; 进入 64 位模式
  1191 0000006F EA[76F00000]1800            jmp CORE_CODE64_SEL:AP_START_UP_ADDR + .to64
  1192                                  .to64:
  1193                                      bits 64
  1194                                  
  1195                                      ; 转入内核中继续初始化, 使用高端线性地址
  1196 00000076 48BB-                       mov rbx, UPPER_CORE_LINEAR + ap_to_core_entry
  1196 00000078 [CB0902000080FFFF] 
  1197 00000080 FFE3                        jmp rbx 
  1198                                  
  1199 00000082 00                      lock_var db 0
  1200                                  
  1201                                  ap_init_tail:
  1202                                  
  1203                                  section core_tail
  1204                                  core_end:
