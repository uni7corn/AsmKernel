     1                                  ; 内核
     2                                  
     3                                  %include "./common/global_defs.asm"
     1                              <1> ; 全局常量定义
     2                              <1> 
     3                              <1> %ifndef _GLOBAL_DEFS_
     4                              <1>     %define _GLOBAL_DEFS_
     5                              <1> 
     6                              <1>     SDA_PHY_ADDR        equ     0x00007e00	; 系统数据区的起始物理地址
     7                              <1>     PML5_PHY_ADDR       equ     0x00009000	; 内核 5 级头表物理地址
     8                              <1>     PML4_PHY_ADDR       equ     0x0000a000	; 内核 4 级头表物理地址
     9                              <1>     PDPT_PHY_ADDR       equ     0x0000b000	; 对应于低端 2MB 的内核页目录指针表物理地址
    10                              <1>     PDT_PHY_ADDR        equ     0x0000c000	; 对应于低端 2MB 的页目录表物理地址
    11                              <1>     PT_PHY_ADDR         equ     0x0000d000	; 对应于低端 2MB 的内核页表的物理地址
    12                              <1>     IDT_PHY_ADDR        equ     0x0000e000	; 中断描述符表的物理地址
    13                              <1>     LDR_PHY_ADDR        equ     0x0000f000	; 用于安装内核加载器的起始物理地址
    14                              <1>     GDT_PHY_ADDR        equ     0x00010000	; 全局描述符表 GDT 的物理地址
    15                              <1>     CORE_PHY_ADDR       equ     0x00020000	; 内核的起始物理地址
    16                              <1>     COR_PDPT_ADDR       equ     0x00100000	; 从这个物理地址开始的 1MB 是内核的 254 个页目录指针表
    17                              <1> 
    18                              <1>     LDR_START_SECTOR    equ     1      	        ; 内核加载器在硬盘上的起始逻辑扇区号
    19                              <1>     COR_START_SECTOR    equ     9      	        ; 内核程序在硬盘上的起始逻辑扇区号
    20                              <1> 
    21                              <1>     ; 虚拟内存空间的高端起始于线性地址 0xffff800000000000
    22                              <1>     UPPER_LINEAR_START  equ     0xffff800000000000  
    23                              <1>     UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR	    ; 内核的高端线性地址
    24                              <1>     UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000	        ; 文本显示缓冲区的高端起始线性地址
    25                              <1>     UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR	    ; 系统数据区的高端线性地址
    26                              <1>     UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR	    ; GDT 的高端线性地址
    27                              <1>     UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR	    ; IDT 的高端线性地址
    28                              <1> 
    29                              <1>     ; 与全局描述符表有关的选择子定义, 及内存管理有关的常量定义
    30                              <1>     CORE_CODE64_SEL     equ     0x0018	; 内核代码段的描述符选择子(RPL=00)
    31                              <1>     CORE_STACK64_SEL    equ     0x0020	; 内核栈段的描述符选择子(RPL=00)
    32                              <1>     RESVD_DESC_SEL      equ     0x002b	; 保留的描述符选择子
    33                              <1>     USER_CODE64_SEL     equ     0x003b	; 3 特权级代码段的描述符选择子(RPL=11)
    34                              <1>     USER_STACK64_SEL    equ     0x0033	; 3 特权级栈段的描述符选择子(RPL=11)
    35                              <1> 
    36                              <1>     PHY_MEMORY_SIZE     equ     32    	            ; 物理内存大小(MB), 要求至少 3MB
    37                              <1>     CORE_ALLOC_START    equ     0xffff800000200000	; 在虚拟地址空间高端(内核)分配内存时的起始地址
    38                              <1>     USER_ALLOC_START    equ     0x0000000000000000	; 在每个任务虚拟地址空间低端分配内存时的起始地址
    39                              <1> 
    40                              <1>     ; 创建任务时, 需要分配一个物理页作为新任务的 4 级头表, 并分配一个临时的线性地址来初始化这个页
    41                              <1>     NEW_PML4_LINEAR     equ     0xffffff7ffffff000	; 用来映射新任务 4 级头表的线性地址
    42                              <1>     LAPIC_START_ADDR    equ     0xffffff7fffffe000	; LOCAL APIC 寄存器的起始线性地址
    43                              <1>     IOAPIC_START_ADDR   equ     0xffffff7fffffd000	; I/O APIC 寄存器的起始线性地址
    44                              <1>     AP_START_UP_ADDR    equ     0x0000f000 	        ; 应用处理器(AP)启动代码的物理地址
    45                              <1>     SUGG_PREEM_SLICE    equ     55          	    ; 推荐的任务/线程抢占时间片长度(毫秒)
    46                              <1> 
    47                              <1>     ; 多处理器环境下的自旋锁加锁宏。需要两个参数: 寄存器, 以及一个对应宽度的锁变量
    48                              <1>     %macro  SET_SPIN_LOCK 2             ; 两个参数, 分别是寄存器 %1 和锁变量 %2
    49                              <1>             %%spin_lock:
    50                              <1>                     cmp %2, 0           ; 看一眼锁现在是不是 0
    51                              <1>                     je %%get_lock      	; 如果是 0，说明没人占，跳过去抢
    52                              <1>                     pause				; 不是 0，先喘口气（降低 CPU 占用）, 见书中 341 页
    53                              <1>                     jmp %%spin_lock    	; 继续看
    54                              <1>             %%get_lock:
    55                              <1>                     mov %1, 1
    56                              <1>                     xchg %1, %2         ; 用 xchg 的“原子交换”能力抢锁，抢不到就一直循环（自旋）
    57                              <1>                     cmp %1, 0          	; 交换回来的 %2 旧值是 0 吗？
    58                              <1>                     jne %%spin_lock   	; 不是 0 说明别人先插了旗，回到开头重抢
    59                              <1>     %endmacro
    60                              <1> 
    61                              <1> %endif
     4                                  
     5                                  SECTION core_header                                 ; 内核头部
     6 00000000 [00000000]                  length      dd core_end                         ; 内核总长度
     7 00000004 [AC0F0000]                  init_entry  dd init                             ; 内核入口点
     8 00000008 0000000000000000            position    dq 0                                ; 内核加载虚拟地址
     9                                  
    10                                  SECTION core_data                                   ; 内核数据段
    11 00000000 41435049206973206E-         acpi_error  db "ACPI is not supported or data error.", 0x0d, 0x0a, 0
    11 00000009 6F7420737570706F72-
    11 00000012 746564206F72206461-
    11 0000001B 7461206572726F722E-
    11 00000024 0D0A00             
    12                                  
    13 00000027 00                          num_cpus    db 0                                ; 逻辑处理器数量
    14 00000028 00<rep 100h>                cpu_list    times 256 db 0                      ; Local APIC ID的列表
    15 00000128 00000000                    lapic_addr  dd 0                                ; Local APIC的物理地址
    16                                  
    17 0000012C 00000000                    ioapic_addr dd 0                                ; I/O APIC的物理地址
    18 00000130 00                          ioapic_id   db 0                                ; I/O APIC ID
    19                                  
    20 00000131 00                          ack_cpus    db 0                                ; 处理器初始化应答计数
    21                                  
    22 00000132 00000000                    clocks_1ms  dd 0                                ; 处理器在1ms内经历的时钟数
    23                                  
    24 00000136 457865637574696E67-         welcome     db "Executing in 64-bit mode.Init MP", 249, 0
    24 0000013F 20696E2036342D6269-
    24 00000148 74206D6F64652E496E-
    24 00000151 6974204D50F900     
    25 00000158 204350552873292072-         cpu_init_ok db " CPU(s) ready.", 0x0d, 0x0a, 0
    25 00000161 656164792E0D0A00   
    26                                  
    27 00000169 00<rep 100h>                buffer      times 256 db 0
    28                                  
    29 00000269 [0609000000000000]          sys_entry   dq get_screen_row
    30 00000271 [8208000000000000]                      dq get_cmos_time
    31 00000279 [DE00000000000000]                      dq put_cstringxy64
    32 00000281 [1E0E000000000000]                      dq create_process
    33 00000289 [B40D000000000000]                      dq get_current_pid
    34 00000291 [CB0D000000000000]                      dq terminate_process
    35 00000299 [1109000000000000]                      dq get_cpu_number
    36 000002A1 0000000000000000            pcb_ptr     dq 0                                ; 进程控制块PCB首节点的线性地址
    37                                  
    38                                  
    39                                  SECTION core_code                                   ; 内核代码段
    40                                  
    41                                  %include "./common/core_utils64.asm"
     1                              <1> ; 内核通用代码
     2                              <1> 
     3                              <1> ; 在多处理器环境中使用时, 需要在内核程序中定义宏 __MP__
     4                              <1> 
     5                              <1> %include "./common/global_defs.asm"
     1                              <2> ; 全局常量定义
     2                              <2> 
     3                              <2> %ifndef _GLOBAL_DEFS_
     4                              <2>     %define _GLOBAL_DEFS_
     5                              <2> 
     6                              <2>     SDA_PHY_ADDR        equ     0x00007e00	; 系统数据区的起始物理地址
     7                              <2>     PML5_PHY_ADDR       equ     0x00009000	; 内核 5 级头表物理地址
     8                              <2>     PML4_PHY_ADDR       equ     0x0000a000	; 内核 4 级头表物理地址
     9                              <2>     PDPT_PHY_ADDR       equ     0x0000b000	; 对应于低端 2MB 的内核页目录指针表物理地址
    10                              <2>     PDT_PHY_ADDR        equ     0x0000c000	; 对应于低端 2MB 的页目录表物理地址
    11                              <2>     PT_PHY_ADDR         equ     0x0000d000	; 对应于低端 2MB 的内核页表的物理地址
    12                              <2>     IDT_PHY_ADDR        equ     0x0000e000	; 中断描述符表的物理地址
    13                              <2>     LDR_PHY_ADDR        equ     0x0000f000	; 用于安装内核加载器的起始物理地址
    14                              <2>     GDT_PHY_ADDR        equ     0x00010000	; 全局描述符表 GDT 的物理地址
    15                              <2>     CORE_PHY_ADDR       equ     0x00020000	; 内核的起始物理地址
    16                              <2>     COR_PDPT_ADDR       equ     0x00100000	; 从这个物理地址开始的 1MB 是内核的 254 个页目录指针表
    17                              <2> 
    18                              <2>     LDR_START_SECTOR    equ     1      	        ; 内核加载器在硬盘上的起始逻辑扇区号
    19                              <2>     COR_START_SECTOR    equ     9      	        ; 内核程序在硬盘上的起始逻辑扇区号
    20                              <2> 
    21                              <2>     ; 虚拟内存空间的高端起始于线性地址 0xffff800000000000
    22                              <2>     UPPER_LINEAR_START  equ     0xffff800000000000  
    23                              <2>     UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR	    ; 内核的高端线性地址
    24                              <2>     UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000	        ; 文本显示缓冲区的高端起始线性地址
    25                              <2>     UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR	    ; 系统数据区的高端线性地址
    26                              <2>     UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR	    ; GDT 的高端线性地址
    27                              <2>     UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR	    ; IDT 的高端线性地址
    28                              <2> 
    29                              <2>     ; 与全局描述符表有关的选择子定义, 及内存管理有关的常量定义
    30                              <2>     CORE_CODE64_SEL     equ     0x0018	; 内核代码段的描述符选择子(RPL=00)
    31                              <2>     CORE_STACK64_SEL    equ     0x0020	; 内核栈段的描述符选择子(RPL=00)
    32                              <2>     RESVD_DESC_SEL      equ     0x002b	; 保留的描述符选择子
    33                              <2>     USER_CODE64_SEL     equ     0x003b	; 3 特权级代码段的描述符选择子(RPL=11)
    34                              <2>     USER_STACK64_SEL    equ     0x0033	; 3 特权级栈段的描述符选择子(RPL=11)
    35                              <2> 
    36                              <2>     PHY_MEMORY_SIZE     equ     32    	            ; 物理内存大小(MB), 要求至少 3MB
    37                              <2>     CORE_ALLOC_START    equ     0xffff800000200000	; 在虚拟地址空间高端(内核)分配内存时的起始地址
    38                              <2>     USER_ALLOC_START    equ     0x0000000000000000	; 在每个任务虚拟地址空间低端分配内存时的起始地址
    39                              <2> 
    40                              <2>     ; 创建任务时, 需要分配一个物理页作为新任务的 4 级头表, 并分配一个临时的线性地址来初始化这个页
    41                              <2>     NEW_PML4_LINEAR     equ     0xffffff7ffffff000	; 用来映射新任务 4 级头表的线性地址
    42                              <2>     LAPIC_START_ADDR    equ     0xffffff7fffffe000	; LOCAL APIC 寄存器的起始线性地址
    43                              <2>     IOAPIC_START_ADDR   equ     0xffffff7fffffd000	; I/O APIC 寄存器的起始线性地址
    44                              <2>     AP_START_UP_ADDR    equ     0x0000f000 	        ; 应用处理器(AP)启动代码的物理地址
    45                              <2>     SUGG_PREEM_SLICE    equ     55          	    ; 推荐的任务/线程抢占时间片长度(毫秒)
    46                              <2> 
    47                              <2>     ; 多处理器环境下的自旋锁加锁宏。需要两个参数: 寄存器, 以及一个对应宽度的锁变量
    48                              <2>     %macro  SET_SPIN_LOCK 2             ; 两个参数, 分别是寄存器 %1 和锁变量 %2
    49                              <2>             %%spin_lock:
    50                              <2>                     cmp %2, 0           ; 看一眼锁现在是不是 0
    51                              <2>                     je %%get_lock      	; 如果是 0，说明没人占，跳过去抢
    52                              <2>                     pause				; 不是 0，先喘口气（降低 CPU 占用）, 见书中 341 页
    53                              <2>                     jmp %%spin_lock    	; 继续看
    54                              <2>             %%get_lock:
    55                              <2>                     mov %1, 1
    56                              <2>                     xchg %1, %2         ; 用 xchg 的“原子交换”能力抢锁，抢不到就一直循环（自旋）
    57                              <2>                     cmp %1, 0          	; 交换回来的 %2 旧值是 0 吗？
    58                              <2>                     jne %%spin_lock   	; 不是 0 说明别人先插了旗，回到开头重抢
    59                              <2>     %endmacro
    60                              <2> 
    61                              <2> %endif
     6                              <1> 
     7                              <1> 	[bits 64]
     8                              <1> 
     9                              <1> ; ------------------------------------------------------------
    10                              <1> ; put_string64
    11                              <1> ; 功能: 显示 0 终止的字符串并移动光标
    12                              <1> ; 输入: rbx=字符串的线性地址
    13                              <1> ; ------------------------------------------------------------
    14                              <1> %ifdef __MP__
    15                              <1> _prn_str_locker dq 0
    16                              <1> %endif
    17                              <1> 
    18                              <1> put_string64:
    19 00000000 53                  <1> 	push rbx 
    20 00000001 51                  <1> 	push rcx 
    21                              <1> 
    22 00000002 9C                  <1> 	pushfq 
    23 00000003 FA                  <1> 	cli 
    24                              <1> %ifdef __MP__
    25                              <1> 	SET_SPIN_LOCK rcx, qword [rel _prn_str_locker]		; 上锁
    26                              <1> %endif 
    27                              <1> 
    28                              <1> .getc:
    29 00000004 8A0B                <1> 	mov cl, [rbx]
    30 00000006 08C9                <1> 	or cl, cl 							; 检查是不是 0
    31 00000008 740A                <1> 	jz .exit 							; 如果是 0 跳转到退出代码
    32 0000000A E809000000          <1> 	call put_char 
    33 0000000F 48FFC3              <1> 	inc rbx 
    34 00000012 EBF0                <1> 	jmp .getc
    35                              <1> 
    36                              <1> .exit:
    37                              <1> %ifdef __MP__ 
    38                              <1> 	mov qword [rel _prn_str_locker], 0					; 释放锁
    39                              <1> %endif
    40 00000014 9D                  <1> 	popfq
    41                              <1> 
    42 00000015 59                  <1> 	pop rcx 
    43 00000016 5B                  <1> 	pop rbx 
    44                              <1> 
    45 00000017 C3                  <1> 	ret 
    46                              <1> 	
    47                              <1> ; ------------------------------------------------------------
    48                              <1> ; put_char
    49                              <1> ; 功能: 在屏幕上的当前光标处显示一个字符并推进光标(ldr.asm 中 put_char 的 64 位版本)
    50                              <1> ; 输入: cl=字符ASCII码
    51                              <1> ; ------------------------------------------------------------
    52                              <1> put_char:
    53 00000018 50                  <1> 	push rax 
    54 00000019 53                  <1> 	push rbx 
    55 0000001A 51                  <1> 	push rcx 
    56 0000001B 52                  <1> 	push rdx 
    57 0000001C 56                  <1> 	push rsi 
    58 0000001D 57                  <1> 	push rdi 
    59                              <1> 
    60                              <1> 	; 获取光标位置
    61 0000001E 66BAD403            <1> 	mov dx, 0x3d4
    62 00000022 B00E                <1> 	mov al, 0x0e 
    63 00000024 EE                  <1> 	out dx, al 
    64 00000025 66FFC2              <1> 	inc dx 
    65 00000028 EC                  <1> 	in al, dx 								; 高字
    66 00000029 88C4                <1> 	mov ah, al 
    67                              <1> 
    68 0000002B 66FFCA              <1> 	dec dx 
    69 0000002E B00F                <1> 	mov al, 0x0f 
    70 00000030 EE                  <1> 	out dx, al 
    71 00000031 66FFC2              <1> 	inc dx 
    72 00000034 EC                  <1> 	in al, dx 								; 低字
    73 00000035 6689C3              <1> 	mov bx, ax 								; 此时 bx 中存储了字符的数目, 一个字符占两个字节
    74 00000038 4881E3FFFF0000      <1> 	and rbx, 0x000000000000ffff 			; 准备使用 64 位寻址方式访问显存
    75                              <1> 
    76 0000003F 80F90D              <1> 	cmp cl, 0x0d							; 回车符?
    77 00000042 750E                <1> 	jnz .put_0a
    78 00000044 6689D8              <1> 	mov ax, bx 
    79 00000047 B350                <1> 	mov bl, 80
    80 00000049 F6F3                <1> 	div bl 
    81 0000004B F6E3                <1> 	mul bl 									; 移到本行起始
    82 0000004D 6689C3              <1> 	mov bx, ax 	
    83 00000050 EB6C                <1> 	jmp .set_cursor
    84                              <1> 
    85                              <1> .put_0a:
    86 00000052 80F90A              <1> 	cmp cl, 0x0a 							; 换行符?
    87 00000055 7506                <1> 	jnz .put_other
    88 00000057 6683C350            <1> 	add bx, 80								; 平移一行
    89 0000005B EB16                <1> 	jmp .roll_screen
    90                              <1> 
    91                              <1> .put_other:						
    92 0000005D 66D1E3              <1> 	shl bx, 1								; 转换成字节数
    93 00000060 48B800800B000080FF- <1> 	mov rax, UPPER_TEXT_VIDEO
    93 00000069 FF                  <1>
    94 0000006A 880C18              <1> 	mov [rax + rbx], cl 					; 写入字符
    95                              <1> 
    96 0000006D 66D1EB              <1> 	shr bx, 1								; 转回字符数
    97 00000070 66FFC3              <1> 	inc bx 
    98                              <1> 
    99                              <1> .roll_screen:
   100 00000073 6681FBD007          <1> 	cmp bx, 2000							; 光标超出屏幕? 滚屏
   101 00000078 7C44                <1> 	jl .set_cursor 
   102                              <1> 	
   103 0000007A 6653                <1> 	push bx 
   104                              <1> 
   105 0000007C FC                  <1> 	cld 									; 清除方向标志位
   106 0000007D 48BEA0800B000080FF- <1> 	mov rsi, UPPER_TEXT_VIDEO + 0xa0		; 源地址
   106 00000086 FF                  <1>
   107 00000087 48BF00800B000080FF- <1> 	mov rdi, UPPER_TEXT_VIDEO				; 目标地址
   107 00000090 FF                  <1>
   108 00000091 B9E0010000          <1> 	mov rcx, 480							; 480 == 24 x 80 x 2 / 8。前 24 行向上平移一行
   109 00000096 F348A5              <1> 	rep movsq								
   110                              <1> 
   111 00000099 66BB000F            <1> 	mov bx, 3840							; 24 x 80 x 2。清除最后一行
   112 0000009D B950000000          <1> 	mov rcx, 80
   113                              <1> .cls:
   114 000000A2 48B800800B000080FF- <1> 	mov rax, UPPER_TEXT_VIDEO
   114 000000AB FF                  <1>
   115 000000AC 66C704182007        <1> 	mov word [rax + rbx], 0x0720
   116 000000B2 6683C302            <1> 	add bx, 2 
   117 000000B6 E2EA                <1> 	loop .cls 
   118                              <1> 
   119 000000B8 665B                <1> 	pop bx 									; 考虑换行符
   120 000000BA 6683EB50            <1> 	sub bx, 80
   121                              <1> 
   122                              <1> .set_cursor:
   123 000000BE 66BAD403            <1> 	mov dx, 0x3d4
   124 000000C2 B00E                <1> 	mov al, 0x0e 
   125 000000C4 EE                  <1> 	out dx, al 
   126 000000C5 66FFC2              <1> 	inc dx 									; 0x3d5
   127 000000C8 88F8                <1> 	mov al, bh 
   128 000000CA EE                  <1> 	out dx, al 
   129                              <1> 
   130 000000CB 66FFCA              <1> 	dec dx 									; 0x3d4
   131 000000CE B00F                <1> 	mov al, 0x0f 
   132 000000D0 EE                  <1> 	out dx, al 
   133 000000D1 66FFC2              <1> 	inc dx 									; 0x3d5
   134 000000D4 88D8                <1> 	mov al, bl 
   135 000000D6 EE                  <1> 	out dx, al 
   136                              <1> 
   137 000000D7 5F                  <1> 	pop rdi 
   138 000000D8 5E                  <1> 	pop rsi 
   139 000000D9 5A                  <1> 	pop rdx 
   140 000000DA 59                  <1> 	pop rcx 
   141 000000DB 5B                  <1> 	pop rbx 
   142 000000DC 58                  <1> 	pop rax 
   143                              <1> 
   144 000000DD C3                  <1> 	ret 
   145                              <1> 
   146                              <1> ; ------------------------------------------------------------
   147                              <1> ; put_cstringxy64
   148                              <1> ; 功能: 在指定位置用指定颜色显示 0 终止的字符串，只适用于打印图形字符。由于各程序打印时的坐标位置不同，互不干扰，不需要加锁和互斥。
   149                              <1> ; 输入: rbx=字符串首地址, dh=行, dl=列, r9b=颜色属性
   150                              <1> ; ------------------------------------------------------------
   151                              <1> %ifdef __MP__ 
   152                              <1> _prnxy_locker dp 0
   153                              <1> %endif 
   154                              <1> 
   155                              <1> put_cstringxy64:
   156 000000DE 50                  <1> 	push rax 
   157 000000DF 53                  <1> 	push rbx 
   158 000000E0 51                  <1> 	push rcx 
   159 000000E1 52                  <1> 	push rdx 
   160 000000E2 4150                <1> 	push r8 
   161                              <1> 
   162                              <1> 	; 指定坐标位置在显存内的偏移量
   163 000000E4 88F0                <1> 	mov al, dh 
   164 000000E6 B5A0                <1> 	mov ch, 160									; 每行 80 个字符, 占用 160 字节
   165 000000E8 F6E5                <1> 	mul ch 
   166 000000EA D0E2                <1> 	shl dl, 1									; 每个字符占两字节
   167 000000EC 6681E2FF00          <1> 	and dx, 0x00ff
   168 000000F1 6601D0              <1> 	add ax, dx 									; 得到相应显存偏移
   169 000000F4 4825FFFF0000        <1> 	and rax, 0x000000000000ffff
   170                              <1> 
   171 000000FA 9C                  <1> 	pushfq										; 将 RFLAGS 寄存器的全部 64 位标志位压入当前栈顶
   172 000000FB FA                  <1> 	cli 
   173                              <1> 
   174                              <1> %ifdef __MP__									; 读写显存时加锁
   175                              <1> 	SET_SPIN_LOCK r8, qword [rel _prnxy_locker]
   176                              <1> %endif 
   177                              <1> 
   178 000000FC 49B800800B000080FF- <1> 	mov r8, UPPER_TEXT_VIDEO					; 显存起始线性地址
   178 00000105 FF                  <1>
   179                              <1> .nextc:
   180 00000106 8A13                <1> 	mov dl, [rbx]								; 获取将要显示的字符
   181 00000108 08D2                <1> 	or dl, dl 
   182 0000010A 7412                <1> 	jz .exit 
   183 0000010C 41881400            <1> 	mov byte [r8 + rax], dl 					; 字符内容
   184 00000110 45884C0001          <1> 	mov byte [r8 + rax + 1], r9b 				; 字符颜色
   185 00000115 48FFC3              <1> 	inc rbx 
   186 00000118 4883C002            <1> 	add rax, 2
   187 0000011C EBE8                <1> 	jmp .nextc
   188                              <1> .exit:
   189 0000011E 4D31C0              <1> 	xor r8, r8 
   190                              <1> 
   191                              <1> %ifdef __MP__									; 读写显存时释放锁
   192                              <1> 	mov qword [rel _prnxy_locker], 0
   193                              <1> %endif 
   194                              <1> 
   195 00000121 9D                  <1> 	popfq 
   196                              <1> 
   197 00000122 4158                <1> 	pop r8 
   198 00000124 5A                  <1> 	pop rdx 
   199 00000125 59                  <1> 	pop rcx 
   200 00000126 5B                  <1> 	pop rbx 
   201 00000127 58                  <1> 	pop rax 
   202                              <1> 
   203 00000128 C3                  <1> 	ret 
   204                              <1> 
   205                              <1> ; ------------------------------------------------------------
   206                              <1> ; make_interrupt_gate
   207                              <1> ; 功能: 创建 64 位的中断门
   208                              <1> ; 输入: rax=处理程序的线性地址
   209                              <1> ; 输出: rdi 与 rsi 组成中断门(中断门、陷阱门格式见书中 148 页)
   210                              <1> ; ------------------------------------------------------------
   211                              <1> make_interrupt_gate:
   212 00000129 4889C7              <1> 	mov rdi, rax 
   213 0000012C 48C1EF20            <1> 	shr rdi, 32 						; 门的高 64 位, 其中高 32 位是保留
   214                              <1> 
   215 00000130 50                  <1> 	push rax 							; 借助栈构造, 先压入完整 rax, 也就是门的低 64 位, 在对其修改
   216 00000131 66C74424021800      <1> 	mov word [rsp + 2], CORE_CODE64_SEL	; 填入选择子
   217 00000138 89442404            <1> 	mov [rsp + 4], eax 					; 填入线性地址 31~16 位
   218 0000013C 66C7442404008E      <1> 	mov word [rsp + 4], 0x8e00			; 填入属性, P=1, TYPE=64 的中断门, 覆盖填入
   219 00000143 5E                  <1> 	pop rsi 
   220                              <1> 
   221 00000144 C3                  <1> 	ret 								; 可以参考书中 155 页的图
   222                              <1> 
   223                              <1> ; ------------------------------------------------------------
   224                              <1> ; make_tss_descriptor
   225                              <1> ; 功能: 创建 64 位的 TSS 描述符
   226                              <1> ; 输入: rax=TSS 的线性地址
   227                              <1> ; 输出: rdi:rsi=TSS 描述符(LDT, TSS 描述符格式见书中 200 页)
   228                              <1> ; ------------------------------------------------------------
   229                              <1> make_tss_descriptor:
   230 00000145 50                  <1> 	push rax 
   231                              <1> 
   232 00000146 4889C7              <1> 	mov rdi, rax 
   233 00000149 48C1EF20            <1> 	shr rdi, 32							; 得到门高 64 位, 存在 rdi 中
   234                              <1> 
   235 0000014D 50                  <1> 	push rax 							; 借助栈构造, 先压入完整 rax, 也就是门的低 64 位, 在对其修改
   236 0000014E 48C1242410          <1> 	shl qword [rsp], 16 				; 将线性地址 23~0 位移到正确位置
   237 00000153 66C704246800        <1> 	mov word [rsp], 104					; 填入段界限标准长度
   238 00000159 8A442405            <1> 	mov al, [rsp + 5]
   239 0000015D 88442407            <1> 	mov [rsp + 7], al 					; 将线性地址 31~24 位移到正确位置
   240 00000161 C644240589          <1> 	mov byte [rsp + 5], 0x89 			; P=1, DPL=0, TYPE=0b1001(64 位 TSS)
   241 00000166 C644240600          <1> 	mov byte [rsp + 6], 0				; G, 0, 0, AVL, limit
   242 0000016B 5E                  <1> 	pop rsi								; 门低 64 位
   243                              <1> 
   244 0000016C 58                  <1> 	pop rax 
   245                              <1> 
   246 0000016D C3                  <1> 	ret 
   247                              <1> 
   248                              <1> ; ------------------------------------------------------------
   249                              <1> ; mount_idt_entry
   250                              <1> ; 功能: 在中断描述符表 IDT 中安装门描述符
   251                              <1> ; 输入: r8=中断向量, rdi 与 rsi 组成中断门
   252                              <1> ; ------------------------------------------------------------
   253                              <1> mount_idt_entry:
   254 0000016E 4150                <1> 	push r8
   255 00000170 4151                <1> 	push r9 
   256                              <1> 
   257 00000172 49C1E004            <1> 	shl r8, 4 							; 中断号乘以 16 得到表内偏移, 每个中断门 16 字节大小
   258 00000176 49B900E000000080FF- <1> 	mov r9, UPPER_IDT_LINEAR			; 中断描述符表的高端地址
   258 0000017F FF                  <1>
   259 00000180 4B893401            <1> 	mov [r9 + r8], rsi 
   260 00000184 4B897C0108          <1> 	mov [r9 + r8 + 8], rdi 
   261                              <1> 
   262 00000189 4159                <1> 	pop r9 
   263 0000018B 4158                <1> 	pop r8 
   264                              <1> 
   265 0000018D C3                  <1> 	ret  
   266                              <1> 
   267                              <1> ; ------------------------------------------------------------
   268                              <1> ; init_8259
   269                              <1> ; 功能: 初始化8259中断控制器，包括重新设置向量号
   270                              <1> ; ------------------------------------------------------------
   271                              <1> init_8259:
   272 0000018E 50                  <1> 	push rax
   273                              <1> 
   274 0000018F B011                <1> 	mov al, 0x11
   275 00000191 E620                <1> 	out 0x20, al                    	; ICW1: 边沿触发/级联方式
   276 00000193 B020                <1> 	mov al, 0x20
   277 00000195 E621                <1> 	out 0x21, al  						; ICW2: 起始中断向量（避开前31个异常的向量）
   278 00000197 B004                <1> 	mov al, 0x04
   279 00000199 E621                <1> 	out 0x21, al  						; ICW3: 从片级联到 IR2
   280 0000019B B001                <1> 	mov al, 0x01
   281 0000019D E621                <1> 	out 0x21, al                  		; ICW4: 非总线缓冲，全嵌套，正常 EOI
   282                              <1> 
   283 0000019F B011                <1> 	mov al, 0x11
   284 000001A1 E6A0                <1> 	out 0xa0, al                  		; ICW1: 边沿触发/级联方式
   285 000001A3 B028                <1> 	mov al, 0x28
   286 000001A5 E6A1                <1> 	out 0xa1, al                  		; ICW2: 起始中断向量-->0x28
   287 000001A7 B002                <1> 	mov al, 0x02
   288 000001A9 E6A1                <1> 	out 0xa1, al                  		; ICW3: 从片识别标志，级联到主片 IR2
   289 000001AB B001                <1> 	mov al, 0x01
   290 000001AD E6A1                <1> 	out 0xa1, al                  		; ICW4: 非总线缓冲，全嵌套，正常 EOI
   291                              <1> 
   292 000001AF 58                  <1> 	pop rax
   293 000001B0 C3                  <1> 	ret
   294                              <1> 
   295                              <1> ; ------------------------------------------------------------
   296                              <1> ; read_hard_disk_0
   297                              <1> ; 功能: 从硬盘读取一个逻辑扇区
   298                              <1> ; 输入: rax=逻辑扇区号, rbx=目标缓冲区线性地址
   299                              <1> ; 输出: rbx=rbx+512
   300                              <1> ; ------------------------------------------------------------
   301                              <1> %ifdef __MP__
   302                              <1> _read_hdd_locker dq 0						
   303                              <1> %endif
   304                              <1> 
   305                              <1> read_hard_disk_0:
   306 000001B1 50                  <1> 	push rax 
   307 000001B2 51                  <1> 	push rcx 
   308 000001B3 52                  <1> 	push rdx 
   309 000001B4 9C                  <1> 	pushfq
   310                              <1> 
   311 000001B5 FA                  <1> 	cli 
   312                              <1> 
   313                              <1> %ifdef __MP__
   314                              <1> 	SET_SPIN_LOCK rdx, qword [rel _read_hdd_locker]
   315                              <1> %endif
   316                              <1> 
   317 000001B6 50                  <1> 	push rax 
   318                              <1> 
   319 000001B7 66BAF201            <1> 	mov dx, 0x1f2 								; 0x1f2
   320 000001BB B001                <1> 	mov al, 1
   321 000001BD EE                  <1> 	out dx, al 									; 读取扇区数
   322                              <1> 
   323 000001BE 66FFC2              <1> 	inc dx 										; 0x1f3 
   324 000001C1 58                  <1> 	pop rax 
   325 000001C2 EE                  <1> 	out dx, al 									; LBA 地址 7~0
   326                              <1> 
   327 000001C3 B108                <1> 	mov cl, 8 
   328                              <1> 
   329 000001C5 66FFC2              <1> 	inc dx 										; 0x1f4
   330 000001C8 48D3E8              <1> 	shr rax, cl 
   331 000001CB EE                  <1> 	out dx, al 									; LBA 地址 15~8
   332                              <1> 
   333 000001CC 66FFC2              <1> 	inc dx 										; 0x1f5
   334 000001CF 48D3E8              <1> 	shr rax, cl 
   335 000001D2 EE                  <1> 	out dx, al 									; LBA 地址 23~16
   336                              <1> 
   337 000001D3 66FFC2              <1> 	inc dx 										; 0x1f6
   338 000001D6 48D3E8              <1> 	shr rax, cl 
   339 000001D9 0CE0                <1> 	or al, 0xe0 								; 第一硬盘, LBA 地址 27~24
   340 000001DB EE                  <1> 	out dx, al 
   341                              <1> 
   342 000001DC 66FFC2              <1> 	inc dx 										; 0x1f6
   343 000001DF B020                <1> 	mov al, 0x20 								; 读命令
   344 000001E1 EE                  <1> 	out dx, al 
   345                              <1> 
   346                              <1> .waits:
   347 000001E2 EC                  <1> 	in al, dx 
   348 000001E3 A808                <1> 	test al, 8
   349 000001E5 74FB                <1> 	jz .waits
   350                              <1> 	; 不忙且硬盘已经准备好传输数据
   351 000001E7 B900010000          <1> 	mov rcx, 256								; 总共要读的字数=2字节
   352 000001EC 66BAF001            <1> 	mov dx, 0x1f0 
   353                              <1> .readw:
   354 000001F0 66ED                <1> 	in ax, dx 
   355 000001F2 668903              <1> 	mov [rbx], ax 
   356 000001F5 4883C302            <1> 	add rbx, 2
   357 000001F9 E2F5                <1> 	loop .readw 
   358                              <1> 
   359                              <1> %ifdef __MP__
   360                              <1> 	mov qword [rel _read_hdd_locker], 0
   361                              <1> %endif
   362                              <1> 
   363 000001FB 9D                  <1> 	popfq
   364 000001FC 5A                  <1> 	pop rdx 
   365 000001FD 59                  <1> 	pop rcx 
   366 000001FE 58                  <1> 	pop rax 
   367                              <1> 
   368 000001FF C3                  <1> 	ret 
   369                              <1> 
   370                              <1> ; ------------------------------------------------------------
   371                              <1> ; allocate_a_4k_page
   372                              <1> ; 功能: 分配一个 4KB 的页
   373                              <1> ; 输出: rax=页的物理地址
   374                              <1> ; ------------------------------------------------------------	
   375 00000200 FF<rep 40h>         <1> _page_bit_map times 2 * 1024 / 4 / 8 db 0xff 		; 对应物理内存前 512 页(2MB), 见书中 193 页
   376 00000240 00<rep 3C0h>        <1> 	times (PHY_MEMORY_SIZE - 2) * 1024 / 4 / 8 db 0	; 存放后续的页面
   377                              <1> _page_map_len equ $ - _page_bit_map
   378                              <1> 
   379                              <1> allocate_a_4k_page:
   380 00000600 4831C0              <1> 	xor rax, rax 
   381                              <1> .b1:
   382 00000603 F0480FAB05F4FBFFFF  <1> 	lock bts [rel _page_bit_map], rax 				; 多处理器需要 lock, 这是一个指令前缀，用于将随后的指令变成原子操作
   383 0000060C 730B                <1> 	jnc .b2 
   384 0000060E 48FFC0              <1> 	inc rax 
   385 00000611 483D00200000        <1> 	cmp rax, _page_map_len * 8
   386 00000617 7CEA                <1> 	jl .b1 
   387                              <1> 
   388                              <1> 	; 对我们这个简单的系统来说，通常不存在页面不够分配的情况。对于一个流行的系统来说, 
   389                              <1> 	; 如果页面不够分配，需要在这里执行虚拟内存管理，即，回收已经注销的页面，或者执行页面的换入和换出。
   390                              <1> .b2:
   391 00000619 48C1E00C            <1> 	shl rax, 12										; rax 是位数, 转换为内存要乘 4098
   392                              <1> 
   393 0000061D C3                  <1> 	ret 
   394                              <1> 
   395                              <1> ; ------------------------------------------------------------
   396                              <1> ; lin_to_lin_of_pml4e
   397                              <1> ; 功能: 返回指定的线性地址所对应的 4 级头表项的线性地址
   398                              <1> ; 输入: r13=线性地址
   399                              <1> ; 输出: r14=对应的 4 级头表项的线性地址
   400                              <1> ; ------------------------------------------------------------
   401                              <1> lin_to_lin_of_pml4e:
   402 0000061E 4155                <1> 	push r13 
   403                              <1> 
   404 00000620 49BE0000000080FF00- <1> 	mov r14, 0x0000_ff80_0000_0000 			; 保留 4 级头表索引部分
   404 00000629 00                  <1>
   405 0000062A 4D21F5              <1> 	and r13, r14 	
   406 0000062D 49C1ED24            <1> 	shr r13, 36								; 右移到低位, 相当于偏移 = 索引 * 8
   407                              <1> 
   408                              <1> 	; 这个利用了递归映射, 还记得在 ldr.asm 中我们将 4 级头表中最后一个项填入了其本身的地址, 
   409                              <1> 	; 而 0xffff_ffff_ffff_f000 这个线性地址前缀会一直访问最后一个表项, 得到的也一直是 4 级头表的地址
   410 00000631 49C7C600F0FFFF      <1> 	mov r14, 0xffff_ffff_ffff_f000			; 访问 4 级头表所用的地址前缀
   411 00000638 4D01EE              <1> 	add r14, r13 							
   412                              <1> 
   413 0000063B 415D                <1> 	pop r13 
   414                              <1> 
   415 0000063D C3                  <1> 	ret 
   416                              <1> 
   417                              <1> ; ------------------------------------------------------------
   418                              <1> ; lin_to_lin_of_pdpte
   419                              <1> ; 功能: 返回指定的线性地址所对应的页目录指针项的线性地址
   420                              <1> ; 输入: r13=线性地址
   421                              <1> ; 输出: r14=对应的页目录指针项的线性地址
   422                              <1> ; ------------------------------------------------------------
   423                              <1> lin_to_lin_of_pdpte:
   424 0000063E 4155                <1> 	push r13 
   425                              <1> 
   426 00000640 49BE000000C0FFFF00- <1> 	mov r14, 0x0000_ffff_c000_0000			; 保留 4 级头表索引和页目录指针表索引部分
   426 00000649 00                  <1>
   427 0000064A 4D21F5              <1> 	and r13, r14 
   428 0000064D 49C1ED1B            <1> 	shr r13, 27								
   429                              <1> 
   430                              <1> 	; 同上
   431 00000651 49C7C60000E0FF      <1> 	mov r14, 0xffff_ffff_ffe0_0000
   432 00000658 4D01EE              <1> 	add r14, r13 
   433                              <1> 
   434 0000065B 415D                <1> 	pop r13
   435                              <1> 
   436 0000065D C3                  <1> 	ret 
   437                              <1> 
   438                              <1> ; ------------------------------------------------------------
   439                              <1> ; lin_to_lin_of_pdte
   440                              <1> ; 功能: 返回指定的线性地址所对应的页目录项的线性地址
   441                              <1> ; 输入: r13=线性地址
   442                              <1> ; 输出: r14=对应的页目录项的线性地址
   443                              <1> ; ------------------------------------------------------------
   444                              <1> lin_to_lin_of_pdte:
   445 0000065E 4155                <1> 	push r13 
   446                              <1> 
   447 00000660 49BE0000E0FFFFFF00- <1> 	mov r14, 0x0000_ffff_ffe0_0000			; 保留 4 级头表索引、页目录指针表索引和页目录表
   447 00000669 00                  <1>
   448 0000066A 4D21F5              <1> 	and r13, r14 
   449 0000066D 49C1ED12            <1> 	shr r13, 18								
   450                              <1> 
   451                              <1> 	; 同上
   452 00000671 49C7C6000000C0      <1> 	mov r14, 0xffff_ffff_c000_0000
   453 00000678 4D01EE              <1> 	add r14, r13 
   454                              <1> 
   455 0000067B 415D                <1> 	pop r13
   456                              <1> 
   457 0000067D C3                  <1> 	ret 
   458                              <1> 
   459                              <1> ; ------------------------------------------------------------
   460                              <1> ; lin_to_lin_of_pte
   461                              <1> ; 功能: 返回指定的线性地址所对应的页表项的线性地址
   462                              <1> ; 输入: r13=线性地址
   463                              <1> ; 输出: r14=对应的页表项的线性地址
   464                              <1> ; ------------------------------------------------------------
   465                              <1> lin_to_lin_of_pte:
   466 0000067E 4155                <1> 	push r13 
   467                              <1> 
   468 00000680 49BE00F0FFFFFFFF00- <1> 	mov r14, 0x0000_ffff_ffff_f000			; 保留 4 级头表、页目录指针表、页目录表和页表的索引部分
   468 00000689 00                  <1>
   469 0000068A 4D21F5              <1> 	and r13, r14 
   470 0000068D 49C1ED09            <1> 	shr r13, 9								
   471                              <1> 
   472                              <1> 	; 同上
   473 00000691 49BE0000000080FFFF- <1> 	mov r14, 0xffff_ff80_0000_0000
   473 0000069A FF                  <1>
   474 0000069B 4D01EE              <1> 	add r14, r13 
   475                              <1> 
   476 0000069E 415D                <1> 	pop r13
   477                              <1> 
   478 000006A0 C3                  <1> 	ret 
   479                              <1> 
   480                              <1> 
   481                              <1> ; ------------------------------------------------------------
   482                              <1> ; find_pte_for_laddr
   483                              <1> ; 功能: 为指定的线性地址寻找到页表项线性地址
   484                              <1> ; 注意: 不保证线程安全, 如果需要在外部加锁, 关中断. 使用了 rcx, rax, r14 寄存器, 但不负责维护内容不变, 如果需要在外部 push, pop
   485                              <1> ; 输入: r13=线性地址
   486                              <1> ; 输出: r14=页表项线性地址
   487                              <1> ; ------------------------------------------------------------
   488                              <1> find_pte_for_laddr:
   489                              <1> 	; 四级头表一定存在, 检查对应地址的四级头表项是否存在
   490 000006A1 E878FFFFFF          <1> 	call lin_to_lin_of_pml4e							; 得到四级头表项的线性地址
   491 000006A6 49F70601000000      <1> 	test qword [r14], 1									; 看 P 位是否为 1 判断表项是否存在
   492 000006AD 752B                <1> 	jnz .b0
   493                              <1> 
   494                              <1> 	; 创建并安装该线性地址所对应的 4 级头表项(创建页目录指针表)
   495 000006AF E84CFFFFFF          <1> 	call allocate_a_4k_page								; 分配一个页作为页目录指针表
   496 000006B4 4883C807            <1> 	or rax, 0x07										; rax 是分配页的物理地址, 添加属性位 U/S=R/W=P=1
   497 000006B8 498906              <1> 	mov [r14], rax 										; 在 4 级头表中登记 4 级头表项
   498                              <1> 
   499                              <1> 	; 清空刚分配的页目录指针表
   500 000006BB E87EFFFFFF          <1> 	call lin_to_lin_of_pdpte
   501 000006C0 49C1EE0C            <1> 	shr r14, 12
   502 000006C4 49C1E60C            <1> 	shl r14, 12											; 得到页目录指针表的线性地址, 低 12 位是页目录指针项在页目录指针表内的偏移
   503 000006C8 B900020000          <1> 	mov rcx, 512
   504                              <1> .cls0:
   505 000006CD 49C70600000000      <1> 	mov qword [r14], 0
   506 000006D4 4983C608            <1> 	add r14, 8
   507 000006D8 E2F3                <1> 	loop .cls0
   508                              <1> 
   509                              <1> .b0:
   510                              <1> 	; 检查该线性地址对应的页目录指针项是否存在
   511 000006DA E85FFFFFFF          <1> 	call lin_to_lin_of_pdpte 							; 得到页目录指针项的线性地址
   512 000006DF 49F70601000000      <1> 	test qword [r14], 1									; 看 P 位是否为 1 判断表项是否存在
   513 000006E6 752B                <1> 	jnz .b1 
   514                              <1> 
   515                              <1> 	; 创建并安装该线性地址对应的页目录指针项
   516 000006E8 E813FFFFFF          <1> 	call allocate_a_4k_page								; 分配一个页作为页目录表
   517 000006ED 4883C807            <1> 	or rax, 0x07
   518 000006F1 498906              <1> 	mov [r14], rax 
   519                              <1> 
   520                              <1> 	; 清空刚分配的页目录表
   521 000006F4 E865FFFFFF          <1> 	call lin_to_lin_of_pdte 
   522 000006F9 49C1EE0C            <1> 	shr r14, 12
   523 000006FD 49C1E60C            <1> 	shl r14, 12 
   524 00000701 B900020000          <1> 	mov rcx, 512 
   525                              <1> .cls1:
   526 00000706 49C70600000000      <1> 	mov qword [r14], 0
   527 0000070D 4983C608            <1> 	add r14, 8
   528 00000711 E2F3                <1> 	loop .cls1 
   529                              <1> 
   530                              <1> .b1:
   531                              <1> 	; 检查该线性地址对应的页目录指针项是否存在
   532 00000713 E846FFFFFF          <1> 	call lin_to_lin_of_pdte 
   533 00000718 49F70601000000      <1> 	test qword [r14], 1
   534 0000071F 752B                <1> 	jnz .b2 
   535                              <1> 
   536                              <1> 	; 创建并安装该线性地址对应的页目录项, 即分配页表
   537 00000721 E8DAFEFFFF          <1> 	call allocate_a_4k_page
   538 00000726 4883C807            <1> 	or rax, 0x07
   539 0000072A 498906              <1> 	mov [r14], rax 
   540                              <1> 
   541                              <1> 	; 清空刚分配的页表
   542 0000072D E84CFFFFFF          <1> 	call lin_to_lin_of_pte 
   543 00000732 49C1EE0C            <1> 	shr r14, 12
   544 00000736 49C1E60C            <1> 	shl r14, 12
   545 0000073A B900020000          <1> 	mov rcx, 512
   546                              <1> 
   547                              <1> .cls2:
   548 0000073F 49C70600000000      <1> 	mov qword [r14], 0
   549 00000746 4983C608            <1> 	add r14, 8
   550 0000074A E2F3                <1> 	loop .cls2 
   551                              <1> 
   552                              <1> .b2:
   553                              <1> 	; 检查该线性地址所对应的页表项是否存在
   554 0000074C E82DFFFFFF          <1> 	call lin_to_lin_of_pte 
   555                              <1> 
   556 00000751 C3                  <1> 	ret 
   557                              <1> 
   558                              <1> ; ------------------------------------------------------------
   559                              <1> ; setup_paging_for_laddr
   560                              <1> ; 功能: 为指定的线性地址安装分页
   561                              <1> ; 输入: r13=线性地址
   562                              <1> ; ------------------------------------------------------------
   563                              <1> %ifdef __MP__
   564                              <1> _spaging_locker dq 0
   565                              <1> %endif
   566                              <1> 
   567                              <1> setup_paging_for_laddr:
   568 00000752 51                  <1> 	push rcx 
   569 00000753 50                  <1> 	push rax 
   570 00000754 4156                <1> 	push r14 
   571 00000756 9C                  <1> 	pushfq
   572                              <1> 
   573 00000757 FA                  <1> 	cli 
   574                              <1> 
   575                              <1> %ifdef __MP__
   576                              <1> 	SET_SPIN_LOCK r14, qword [rel _spaging_locker]
   577                              <1> %endif 
   578                              <1> 
   579 00000758 E844FFFFFF          <1> 	call find_pte_for_laddr
   580 0000075D 49F70601000000      <1> 	test qword [r14], 1
   581 00000764 750C                <1> 	jnz .exit
   582                              <1> 
   583                              <1> 	; 创建并安装该地址对应的页表项, 即最终分配的页
   584 00000766 E895FEFFFF          <1> 	call allocate_a_4k_page
   585 0000076B 4883C807            <1> 	or rax, 0x07										; 设置属性
   586 0000076F 498906              <1> 	mov [r14], rax 
   587                              <1> 
   588                              <1> .exit:
   589                              <1> %ifdef __MP__
   590                              <1> 	mov qword [rel _spaging_locker], 0
   591                              <1> %endif
   592 00000772 9D                  <1> 	popfq 
   593                              <1> 
   594 00000773 415E                <1> 	pop r14 
   595 00000775 58                  <1> 	pop rax 
   596 00000776 59                  <1> 	pop rcx 
   597                              <1> 
   598 00000777 C3                  <1> 	ret 
   599                              <1> ; ------------------------------------------------------------
   600                              <1> ; mapping_laddr_to_page
   601                              <1> ; 功能: 建立线性地址到物理页的映射, 即, 为指定的线性地址安装指定的物理页
   602                              <1> ; 输入: r13=线性地址, rax=页的物理地址（含属性）
   603                              <1> ; ------------------------------------------------------------
   604                              <1> %ifdef __MP__
   605                              <1> _mapping_locker dq 0
   606                              <1> %endif
   607                              <1> 
   608                              <1> mapping_laddr_to_page:
   609 00000778 51                  <1> 	push rcx 
   610 00000779 4156                <1> 	push r14 
   611 0000077B 9C                  <1> 	pushfq
   612                              <1> 
   613 0000077C FA                  <1> 	cli 
   614                              <1> 
   615                              <1> %ifdef __MP__
   616                              <1> 	SET_SPIN_LOCK r14, qword [rel _mapping_locker]
   617                              <1> %endif
   618                              <1> 
   619 0000077D 50                  <1> 	push rax 
   620 0000077E E81EFFFFFF          <1> 	call find_pte_for_laddr								; 得到页表项的线性地址
   621 00000783 58                  <1> 	pop rax 
   622 00000784 498906              <1> 	mov [r14], rax 										; 在页表项中写入页的物理地址
   623                              <1> 
   624                              <1> %ifdef __MP__
   625                              <1> 	mov qword [rel _mapping_locker], 0
   626                              <1> %endif
   627                              <1> 
   628 00000787 9D                  <1> 	popfq
   629 00000788 415E                <1> 	pop r14 
   630 0000078A 59                  <1> 	pop rcx 
   631                              <1> 
   632 0000078B C3                  <1> 	ret 
   633                              <1> 	
   634                              <1> ; ------------------------------------------------------------
   635                              <1> ; core_memory_allocate
   636                              <1> ; 功能: 在虚拟地址空间的高端（内核）分配内存
   637                              <1> ; 输入: rcx=请求分配的字节数
   638                              <1> ; 输出: r13=本次分配的起始线性地址, r14=下次分配的起始线性地址
   639                              <1> ; ------------------------------------------------------------
   640 0000078C 000020000080FFFF    <1> _core_next_linear dq CORE_ALLOC_START
   641                              <1> 
   642                              <1> %ifdef __MP__
   643                              <1> _core_alloc_locker dq 0
   644                              <1> %endif
   645                              <1> 
   646                              <1> core_memory_allocate:
   647 00000794 9C                  <1> 	pushfq 
   648 00000795 FA                  <1> 	cli 
   649                              <1> %ifdef __MP__
   650                              <1> 	SET_SPIN_LOCK r14, qword [rel _core_alloc_locker]
   651                              <1> %endif
   652 00000796 4C8B2DEFFFFFFF      <1> 	mov r13, [rel _core_next_linear]					; 起始地址
   653 0000079D 4D8D740D00          <1> 	lea r14, [r13 + rcx]								; 下次分配的起始地址
   654                              <1> 
   655 000007A2 49F7C607000000      <1> 	test r14, 0x07 										; 进行 8 字节对齐处理
   656 000007A9 740C                <1> 	jz .algn
   657 000007AB 4983C608            <1> 	add r14, 0x08
   658 000007AF 49C1EE03            <1> 	shr r14, 3
   659 000007B3 49C1E603            <1> 	shl r14, 3											; 最低的 3 个比特变 0
   660                              <1> 
   661                              <1> .algn:
   662 000007B7 4C8935CEFFFFFF      <1> 	mov qword [rel _core_next_linear], r14 				; 写回, 保留, 下一次用
   663                              <1> 
   664                              <1> %ifdef __MP__
   665                              <1> 	mov qword [rel _core_alloc_locker], 0
   666                              <1> %endif
   667                              <1> 
   668 000007BE 9D                  <1> 	popfq
   669                              <1> 
   670 000007BF 4155                <1> 	push r13 
   671 000007C1 4156                <1> 	push r14 
   672                              <1> 
   673                              <1> 	; 以下为请求的内存分配页。R13 为本次分配的线性地址；R14 为下次分配的线性地址
   674 000007C3 49C1ED0C            <1> 	shr r13, 12
   675 000007C7 49C1E50C            <1> 	shl r13, 12											; 清除页内偏移
   676 000007CB 49C1EE0C            <1> 	shr r14, 12
   677 000007CF 49C1E60C            <1> 	shl r14, 12
   678                              <1> .next:
   679 000007D3 E87AFFFFFF          <1> 	call setup_paging_for_laddr							; 安装线性地址所在页
   680 000007D8 4981C500100000      <1> 	add r13, 0x1000
   681 000007DF 4D39F5              <1> 	cmp r13, r14 
   682 000007E2 7EEF                <1> 	jle .next 
   683                              <1> 
   684 000007E4 415E                <1> 	pop r14 
   685 000007E6 415D                <1> 	pop r13 
   686                              <1> 
   687 000007E8 C3                  <1> 	ret 
   688                              <1> 
   689                              <1> ; ------------------------------------------------------------
   690                              <1> ; user_memory_allocate
   691                              <1> ; 功能: 在用户任务的私有空间（低端）分配内存
   692                              <1> ; 输入: r11=任务控制块 PCB 的线性地址, rcx=希望分配的字节数
   693                              <1> ; 输出: r13=本次分配的起始线性地址, r14=下次分配的起始线性地址
   694                              <1> ; ------------------------------------------------------------
   695                              <1> user_memory_allocate:
   696 000007E9 4D8B6B18            <1> 	mov r13, [r11 + 24]								; 获得本次分配的起始线性地址
   697 000007ED 4D8D740D00          <1> 	lea r14, [r13 + rcx]							; 下次分配的起始线性地址
   698                              <1> 
   699 000007F2 49F7C607000000      <1> 	test r14, 0x07									; 是否按 8 字节对齐
   700 000007F9 740C                <1> 	jz .algn
   701 000007FB 49C1EE03            <1> 	shr r14, 3 										; 8 字节向上取整
   702 000007FF 49C1E603            <1> 	shl r14, 3 
   703 00000803 4983C608            <1> 	add r14, 0x08 
   704                              <1> 
   705                              <1> .algn:
   706 00000807 4D897318            <1> 	mov [r11 + 24], r14 							; 写回 PCB 中
   707                              <1> 
   708 0000080B 4155                <1> 	push r13 
   709 0000080D 4156                <1> 	push r14 
   710                              <1> 
   711                              <1> 	; 以下为请求的内存分配页
   712 0000080F 49C1ED0C            <1> 	shr r13, 12										; 清除页内便宜
   713 00000813 49C1E50C            <1> 	shl r13, 12
   714 00000817 49C1EE0C            <1> 	shr r14, 12
   715 0000081B 49C1E60C            <1> 	shl r14, 12
   716                              <1> 
   717                              <1> .next:
   718 0000081F E82EFFFFFF          <1> 	call setup_paging_for_laddr						; 为当前线性地址安装页
   719 00000824 4981C500100000      <1> 	add r13, 0x1000
   720 0000082B 4D39F5              <1> 	cmp r13, r14 
   721 0000082E 7EEF                <1> 	jle .next
   722                              <1> 
   723 00000830 415E                <1> 	pop r14
   724 00000832 415D                <1> 	pop r13 
   725                              <1> 
   726 00000834 C3                  <1> 	ret 
   727                              <1> 
   728                              <1> ; ------------------------------------------------------------
   729                              <1> ; copy_current_pml4
   730                              <1> ; 功能: 创建新的 4 级头表，并复制当前 4 级头表的内容
   731                              <1> ; 输出: rax=新 4 级头表的物理地址及属性
   732                              <1> ; ------------------------------------------------------------
   733                              <1> %ifdef __MP__
   734                              <1> _copy_locker dq 0
   735                              <1> %endif
   736                              <1> 
   737                              <1> copy_current_pml4:
   738 00000835 56                  <1> 	push rsi 
   739 00000836 57                  <1> 	push rdi 
   740 00000837 4155                <1> 	push r13 
   741 00000839 51                  <1> 	push rcx 
   742 0000083A 9C                  <1> 	pushfq
   743                              <1> 
   744 0000083B FA                  <1> 	cli 
   745                              <1> 
   746                              <1> %ifdef __MP__
   747                              <1> 	SET_SPIN_LOCK rcx, qword [rel _copy_locker]
   748                              <1> %endif
   749                              <1> 
   750 0000083C E8BFFDFFFF          <1> 	call allocate_a_4k_page						; 分配一个物理页
   751 00000841 4883C807            <1> 	or rax, 0x07 								; 添加属性
   752 00000845 49BD00F0FFFF7FFFFF- <1> 	mov r13, NEW_PML4_LINEAR					; 用指定的线性地址映射和访问刚分配的这个物理页
   752 0000084E FF                  <1>
   753 0000084F E824FFFFFF          <1> 	call mapping_laddr_to_page
   754                              <1> 
   755                              <1> 	; 目标表项在页部件的转换速查缓冲器 TLB 的缓存, 需要用 invlpg 执行刷新
   756 00000854 410F017D00          <1> 	invlpg [r13]
   757                              <1> 
   758 00000859 48C7C600F0FFFF      <1> 	mov rsi, 0xffff_ffff_ffff_f000				; rsi -> 当前活动4级头表的线性地址(还是利用递归映射)
   759 00000860 4C89EF              <1> 	mov rdi, r13 								; rdi -> 新 4 级头表的线性地址
   760 00000863 B900020000          <1> 	mov rcx, 512								; rcx -> 要复制的目录项数
   761 00000868 FC                  <1> 	cld 										; 将 RFLAGS 中的方向标志位（DF）设置为 0, 即地址自动递增
   762 00000869 F348A5              <1> 	repe movsq
   763                              <1> 
   764 0000086C 498985F80F0000      <1> 	mov [r13 + 0xff8], rax 						; 0xff8 = 512 * 8, 新 4 级头表的 511 号表项指向它自己, 方便递归映射 
   765 00000873 410F01BDF80F0000    <1> 	invlpg [r13 + 0xff8]
   766                              <1> 
   767                              <1> %ifdef __MP__
   768                              <1> 	mov qword [rel _copy_locker], 0
   769                              <1> %endif
   770                              <1> 
   771 0000087B 9D                  <1> 	popfq
   772 0000087C 59                  <1> 	pop rcx 
   773 0000087D 415D                <1> 	pop r13
   774 0000087F 5F                  <1> 	pop rdi 
   775 00000880 5E                  <1> 	pop rsi 
   776                              <1> 
   777 00000881 C3                  <1> 	ret 
   778                              <1> 
   779                              <1> ; ------------------------------------------------------------
   780                              <1> ; get_cmos_time
   781                              <1> ; 功能: 从 CMOS 中获取当前时间, 详情见书中 225 页
   782                              <1> ; 输入: rbx=缓冲区线性地址
   783                              <1> ; ------------------------------------------------------------
   784                              <1> %ifdef __MP__
   785                              <1> _cmos_locker dq 0
   786                              <1> %endif
   787                              <1> 
   788                              <1> get_cmos_time:
   789 00000882 50                  <1> 	push rax 
   790 00000883 9C                  <1> 	pushfq
   791 00000884 FA                  <1> 	cli 
   792                              <1> 
   793                              <1> %ifdef __MP__
   794                              <1> 	SET_SPIN_LOCK rax, qword [rel _cmos_locker]
   795                              <1> %endif
   796                              <1> 
   797                              <1> .w0:
   798 00000885 B08A                <1> 	mov al, 0x8a 
   799 00000887 E670                <1> 	out 0x70, al 
   800 00000889 E471                <1> 	in al, 0x71 								; 读寄存器 A
   801 0000088B A880                <1> 	test al, 0x80 								; 测试第 7 位 UIP, 等待更新周期结束
   802 0000088D 75F6                <1> 	jnz .w0 
   803                              <1> 
   804 0000088F B084                <1> 	mov al, 0x84 
   805 00000891 E670                <1> 	out 0x70, al 
   806 00000893 E471                <1> 	in al, 0x71 								; 读RTC当前时间(时)
   807 00000895 88C4                <1> 	mov ah, al 									; BCD 编码, 用两个寄存器处理
   808                              <1> 
   809 00000897 C0EC04              <1> 	shr ah, 4									; 处理高四位						
   810 0000089A 80E40F              <1> 	and ah, 0x0f 
   811 0000089D 80C430              <1> 	add ah, 0x30 								; 转换成 ASCII
   812 000008A0 8823                <1> 	mov [rbx], ah 
   813                              <1> 
   814 000008A2 240F                <1> 	and al, 0x0f 								; 处理低四位
   815 000008A4 0430                <1> 	add al, 0x30 
   816 000008A6 884301              <1> 	mov [rbx + 1], al 
   817                              <1> 
   818 000008A9 C643023A            <1> 	mov byte [rbx + 2], ":"
   819                              <1> 
   820 000008AD B082                <1> 	mov al, 0x82 
   821 000008AF E670                <1> 	out 0x70, al 
   822 000008B1 E471                <1> 	in al, 0x71									; 读RTC当前时间(分)
   823 000008B3 88C4                <1> 	mov ah, al 
   824                              <1> 
   825 000008B5 C0EC04              <1> 	shr ah, 4			
   826 000008B8 80E40F              <1> 	and ah, 0x0f 
   827 000008BB 80C430              <1> 	add ah, 0x30 
   828 000008BE 886303              <1> 	mov [rbx + 3], ah 
   829                              <1> 
   830 000008C1 240F                <1> 	and al, 0x0f 
   831 000008C3 0430                <1> 	add al, 0x30 
   832 000008C5 884304              <1> 	mov [rbx + 4], al 
   833                              <1> 
   834 000008C8 C643053A            <1> 	mov byte [rbx + 5], ":"
   835                              <1> 
   836 000008CC B080                <1> 	mov al, 0x80 
   837 000008CE E670                <1> 	out 0x70, al 
   838 000008D0 E471                <1> 	in al, 0x71									; 读RTC当前时间(秒)
   839 000008D2 88C4                <1> 	mov ah, al 
   840                              <1> 
   841 000008D4 C0EC04              <1> 	shr ah, 4
   842 000008D7 80E40F              <1> 	and ah, 0x0f 
   843 000008DA 80C430              <1> 	add ah, 0x30
   844 000008DD 886306              <1> 	mov [rbx + 6], ah 
   845                              <1> 
   846 000008E0 240F                <1> 	and al, 0x0f 
   847 000008E2 0430                <1> 	add al, 0x30 
   848 000008E4 884307              <1> 	mov [rbx + 7], al 
   849                              <1> 
   850 000008E7 C6430800            <1> 	mov byte [rbx + 8], 0						; 终止字符
   851                              <1> 
   852                              <1> %ifdef __MP__
   853                              <1> 	mov qword [rel _cmos_locker], 0
   854                              <1> %endif
   855                              <1> 
   856 000008EB 9D                  <1> 	popfq
   857 000008EC 58                  <1> 	pop rax 
   858                              <1> 
   859 000008ED C3                  <1> 	ret 
   860                              <1> 
   861                              <1> ; ------------------------------------------------------------
   862                              <1> ; generate_process_id
   863                              <1> ; 功能: 生成唯一的进程标识
   864                              <1> ; 输出: rax=进程标识
   865                              <1> ; ------------------------------------------------------------
   866 000008EE 0000000000000000    <1> _process_id dq 0
   867                              <1> 
   868                              <1> generate_process_id:
   869 000008F6 B801000000          <1> 	mov rax, 1
   870 000008FB F0480FC105EAFFFFFF  <1> 	lock xadd qword [rel _process_id], rax 		; lock 前缀确保这条指令是原子操作, xadd 是 "交换并相加" 指令, 会将源操作数和目的操作数相加，结果存入目的操作数，同时将目的操作数的原始值存入源操作数
   871                              <1> 	
   872 00000904 C3                  <1> 	ret 
   873                              <1> 
   874                              <1> ; ------------------------------------------------------------
   875                              <1> ; get_screen_row
   876                              <1> ; 功能: 返回下一个屏幕坐标行的行号
   877                              <1> ; 输出: dh=行号
   878                              <1> ; ------------------------------------------------------------
   879 00000905 08                  <1> _screen_row db 8 								; 前边已经显示了 7 行, 所以从 8 开始
   880                              <1> 
   881                              <1> get_screen_row:
   882 00000906 B601                <1> 	mov dh, 1
   883 00000908 F00FC035F5FFFFFF    <1> 	lock xadd byte [rel _screen_row], dh 
   884                              <1> 
   885 00000910 C3                  <1> 	ret 
   886                              <1> 
   887                              <1> ; ------------------------------------------------------------
   888                              <1> ; get_cpu_number
   889                              <1> ; 功能: 返回当前处理器的编号
   890                              <1> ; 输出: rax=处理器编号
   891                              <1> ; ------------------------------------------------------------
   892                              <1> get_cpu_number:
   893 00000911 9C                  <1> 	pushfq
   894 00000912 FA                  <1> 	cli 
   895 00000913 0F01F8              <1> 	swapgs
   896 00000916 65488B042510000000  <1> 	mov rax, [gs:16]							; 在专属数据区取
   897 0000091F 0F01F8              <1> 	swapgs
   898 00000922 9D                  <1> 	popfq
   899 00000923 C3                  <1> 	ret 
   900                              <1> 
   901                              <1> ; ------------------------------------------------------------
   902                              <1> ; memory_allocate
   903                              <1> ; 功能: 用户空间的内存分配
   904                              <1> ; 输入: rdx=期望分配的字节数
   905                              <1> ; 输出: r13=所分配内存的起始线性地址
   906                              <1> ; ------------------------------------------------------------
   907                              <1> memory_allocate:
   908 00000924 51                  <1> 	push rcx 
   909 00000925 4153                <1> 	push r11 
   910 00000927 4156                <1> 	push r14 
   911                              <1> 
   912 00000929 9C                  <1> 	pushfq
   913 0000092A FA                  <1> 	cli 
   914 0000092B 0F01F8              <1> 	swapgs
   915 0000092E 654C8B1C2508000000  <1> 	mov r11, [gs:8]								; PCB 线性地址
   916 00000937 0F01F8              <1> 	swapgs
   917 0000093A 9D                  <1> 	popfq
   918                              <1> 
   919 0000093B 4889D1              <1> 	mov rcx, rdx 
   920 0000093E E8A6FEFFFF          <1> 	call user_memory_allocate
   921                              <1> 
   922 00000943 415E                <1> 	pop r14 
   923 00000945 415B                <1> 	pop r11 
   924 00000947 59                  <1> 	pop rcx 
   925                              <1> 
   926 00000948 C3                  <1> 	ret 
    42                                  %include "./common/user_static64.asm"
     1                              <1> ; 用户通用代码
     2                              <1> 
     3                              <1>     bits 64 
     4                              <1> 
     5                              <1> ; ------------------------------------------------------------
     6                              <1> ; bin64_to_dec
     7                              <1> ; 功能: 将二进制数转换为十进制字符串
     8                              <1> ; 输入: r8=64位二进制数, rbx=目标缓冲区线性地址
     9                              <1> ; ------------------------------------------------------------
    10                              <1> bin64_to_dec: 
    11 00000949 50                  <1>     push rax
    12 0000094A 53                  <1>     push rbx
    13 0000094B 51                  <1>     push rcx
    14 0000094C 52                  <1>     push rdx
    15 0000094D 4150                <1>     push r8
    16                              <1> 
    17 0000094F 490FBAE03F          <1>     bt r8, 63                                       ; 检查最高位, 处理正,负数
    18 00000954 7309                <1>     jnc .begin
    19 00000956 C6032D              <1>     mov byte [rbx], "-"
    20 00000959 49F7D8              <1>     neg r8                                          ; 取反, 将负数转为正数
    21                              <1> 
    22 0000095C 48FFC3              <1>     inc rbx
    23                              <1> 
    24                              <1> .begin:
    25 0000095F 4C89C0              <1>     mov rax, r8                                     ; rax 是被除数
    26 00000962 41B80A000000        <1>     mov r8, 10
    27 00000968 4831C9              <1>     xor rcx, rcx                                    ; rcx 是位数
    28                              <1> 
    29                              <1> .next_div:
    30 0000096B 4831D2              <1>     xor rdx, rdx                                    ; 使用 128 位除法, 要将 rdx 清零
    31 0000096E 49F7F0              <1>     div r8 
    32 00000971 52                  <1>     push rdx                                        ; 保存分解的数位
    33 00000972 48FFC1              <1>     inc rcx 
    34 00000975 4809C0              <1>     or rax, rax                                     ; 商为 0?
    35 00000978 7402                <1>     jz .rotate
    36 0000097A EBEF                <1>     jmp .next_div
    37                              <1> 
    38                              <1> .rotate:
    39 0000097C 5A                  <1>     pop rdx 
    40 0000097D 80C230              <1>     add dl, 0x30                                    ; 将数位转为 ASCII
    41 00000980 8813                <1>     mov [rbx], dl 
    42 00000982 48FFC3              <1>     inc rbx 
    43 00000985 E2F5                <1>     loop .rotate
    44                              <1> 
    45 00000987 C60300              <1>     mov byte [rbx], 0
    46                              <1> 
    47 0000098A 4158                <1>     pop r8
    48 0000098C 5A                  <1>     pop rdx
    49 0000098D 59                  <1>     pop rcx
    50 0000098E 5B                  <1>     pop rbx
    51 0000098F 58                  <1>     pop rax
    52                              <1> 
    53 00000990 C3                  <1>     ret 
    54                              <1> 
    55                              <1> ; ------------------------------------------------------------
    56                              <1> ; string_concatenates
    57                              <1> ; 功能: 将源字符串连接到目的字符串的尾部
    58                              <1> ; 输入: rsi=源字符串的线性地址, rdi=目的字符串的线性地址
    59                              <1> ; ------------------------------------------------------------
    60                              <1> string_concatenates:
    61 00000991 50                  <1>     push rax
    62 00000992 56                  <1>     push rsi
    63 00000993 57                  <1>     push rdi
    64                              <1> 
    65                              <1>     
    66                              <1> .r0:                                                ; 先找到 rdi 的结尾
    67 00000994 803F00              <1>     cmp byte [rdi], 0
    68 00000997 7405                <1>     jz .r1 
    69 00000999 48FFC7              <1>     inc rdi 
    70 0000099C EBF6                <1>     jmp .r0 
    71                              <1>     
    72                              <1> .r1:                                                ; 再复制源字符串过去
    73 0000099E 8A06                <1>     mov al, [rsi]
    74 000009A0 8807                <1>     mov [rdi], al 
    75 000009A2 3C00                <1>     cmp al, 0
    76 000009A4 7408                <1>     jz .r2 
    77 000009A6 48FFC6              <1>     inc rsi 
    78 000009A9 48FFC7              <1>     inc rdi 
    79 000009AC EBF0                <1>     jmp .r1 
    80                              <1>     
    81                              <1> .r2:
    82 000009AE 5F                  <1>     pop rdi 
    83 000009AF 5E                  <1>     pop rsi 
    84 000009B0 58                  <1>     pop rax 
    85                              <1> 
    86 000009B1 C3                  <1>     ret 
    43                                  
    44                                      [bits 64]
    45                                  
    46                                  
    47 000009B2 F900                    _ap_string      db 249, 0
    48                                  
    49                                  ; ------------------------------------------------------------
    50                                  ; ap_to_core_entry
    51                                  ; 功能: 应用处理器（AP）进入内核的入口点
    52                                  ; ------------------------------------------------------------
    53                                  ap_to_core_entry:
    54                                      ; 启用 GDT 的高端线性地址并加载 IDTR
    55 000009B4 48B8007E00000080FF-         mov rax, UPPER_SDA_LINEAR
    55 000009BD FF                 
    56 000009BE 0F0110                      lgdt [rax + 0]                                  ; 只有 64 位模式下才能加载 64 位线性地址
    57 000009C1 0F01580C                    lidt [rax + 0x0c]
    58                                  
    59                                      ; 为当前处理器创建 64 位 模式下专属栈
    60 000009C5 B900100000                  mov rcx, 4096
    61 000009CA E8C5FDFFFF                  call core_memory_allocate
    62 000009CF 4C89F4                      mov rsp, r14 
    63                                  
    64                                      ; 创建当前处理器的专属存储区(格式见书中 348 页)
    65 000009D2 B900010000                  mov rcx, 256                                    ; 专属数据区长度, 含 TSS
    66 000009D7 E8B8FDFFFF                  call core_memory_allocate
    67 000009DC 498D8580000000              lea rax, [r13 + 128]                            ; TSS 开始于专属存储区偏移为 128 的地方
    68 000009E3 E85DF7FFFF                  call make_tss_descriptor
    69                                  
    70 000009E8 49BF007E00000080FF-         mov r15, UPPER_SDA_LINEAR
    70 000009F1 FF                 
    71                                  
    72                                      ; 安装 TSS 描述符到 GDT
    73 000009F2 4D8B4704                    mov r8, [r15 + 4]                               ; r8=gdt 的线性地址
    74 000009F6 490FB74F02                  movzx rcx, word [r15 + 2]                       ; rcx=gdt 的界限值
    75 000009FB 4989740801                  mov [r8 + rcx + 1], rsi                         ; TSS 描述符的低 64 位
    76 00000A00 49897C0809                  mov [r8 + rcx + 9], rdi                         ; TSS 描述符的高 64 位
    77                                  
    78 00000A05 664183470210                add word [r15 + 2], 16                          ; TSS 大小
    79 00000A0B 410F015702                  lgdt [r15 + 2]                                  ; 重新加载 GDTR
    80                                  
    81 00000A10 66C1E903                    shr cx, 3                                       ; 除 8 得到索引
    82 00000A14 66FFC1                      inc cx                                          ; 找到 TSS 描述符
    83 00000A17 66C1E103                    shl cx, 3                                       ; 乘 8 得到正确偏移
    84                                  
    85 00000A1B 0F00D9                      ltr cx                                          ; 为当前任务加载任务寄存器 TR
    86                                  
    87                                      ; 将处理器专属数据区首地址保存到当前处理器的型号专属寄存器 IA32_KERNEL_GS_BASE
    88 00000A1E B9020100C0                  mov ecx, 0xc000_0102                            ; IA32_KERNEL_GS_BASE
    89 00000A23 4C89E8                      mov rax, r13                                    ; 只用 EAX
    90 00000A26 4C89EA                      mov rdx, r13 
    91 00000A29 48C1EA20                    shr rdx, 32 
    92 00000A2D 0F30                        wrmsr 
    93                                  
    94                                      ; 为快速系统调用 SYSCALL 和 SYSRET 准备参数
    95 00000A2F B9800000C0                  mov ecx, 0x0c0000080                            ; 指定型号专属寄存器 IA32_EFER
    96 00000A34 0F32                        rdmsr 
    97 00000A36 0FBAE800                    bts eax, 0                                      ; 设置 SCE 位，允许 SYSCALL 指令
    98 00000A3A 0F30                        wrmsr
    99                                  
   100 00000A3C B9810000C0                  mov ecx, 0xc0000081                             ; STAR
   101 00000A41 BA18002B00                  mov edx, (RESVD_DESC_SEL << 16) | CORE_CODE64_SEL
   102 00000A46 0F30                        wrmsr
   103                                  
   104 00000A48 B9820000C0                  mov ecx, 0xc0000082                             ; LSTAR
   105 00000A4D 488B05(08000000)            mov rax, [rel position]
   106 00000A54 488D80[700F0000]            lea rax, [rax + syscall_procedure]              ; 只用 EAX 部分
   107 00000A5B 4889C2                      mov rdx, rax
   108 00000A5E 48C1EA20                    shr rdx, 32                                     ; 使用 EDX 部分
   109 00000A62 0F30                        wrmsr
   110                                  
   111 00000A64 B9840000C0                  mov ecx, 0xc0000084                             ; FMASK
   112 00000A69 31D2                        xor edx, edx
   113 00000A6B B800770400                  mov eax, 0x00047700                             ; 要求 TF=IF=DF=AC=0, IOPL=00
   114 00000A70 0F30                        wrmsr
   115                                  
   116 00000A72 4C8B3D(08000000)            mov r15, [rel position]
   117 00000A79 498D9F[B2090000]            lea rbx, [r15 + _ap_string]
   118 00000A80 E87BF5FFFF                  call put_string64
   119                                  
   120 00000A85 0F01F8                      swapgs                                          ; 准备用 GS 操作当前处理器的专属数据, IA32_KERNEL_GS_BASE 与 GS 互换内容
   121 00000A88 6548C7042508000000-         mov qword [gs:8], 0                             ; PCB 的线性地址 = 0, 没有正在执行的任务
   121 00000A91 00000000           
   122 00000A95 4831C0                      xor rax, rax 
   123 00000A98 8A05(31010000)              mov al, byte [rel ack_cpus]
   124 00000A9E 654889042510000000          mov [gs:16], rax                                ; 设置处理器编号
   125 00000AA7 654889242518000000          mov [gs:24], rsp                                ; 保存当前处理器的固有栈指针
   126 00000AB0 0F01F8                      swapgs
   127                                  
   128 00000AB3 FE05(31010000)              inc byte [rel ack_cpus]                         ; 递增应答计数值
   129                                  
   130 00000AB9 C60425[82F00000]00          mov byte [AP_START_UP_ADDR + lock_var], 0       ; 释放自旋锁
   131                                  
   132 00000AC1 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR                       ; Local APIC 的线性地址
   132 00000ACA FF                 
   133 00000ACB 0FBAAEF000000008            bts dword [rsi + 0xf0], 8                       ; 设置 SVR 寄存器, 允许 LAPIC
   134                                  
   135 00000AD3 FB                          sti                                             ; 开放中断
   136                                  
   137                                  .do_idle:
   138 00000AD4 F4                          hlt 
   139 00000AD5 EBFD                        jmp .do_idle
   140                                  
   141                                  ; ------------------------------------------------------------
   142                                  ; general_interrupt_handler
   143                                  ; 功能: 通用中断处理
   144                                  ; ------------------------------------------------------------
   145                                  general_interrupt_handler:
   146 00000AD7 48CF                        iretq
   147                                  
   148                                  ; ------------------------------------------------------------
   149                                  ; general_exception_handler
   150                                  ; 功能: 通用异常处理
   151                                  ; ------------------------------------------------------------
   152                                  general_exception_handler:
   153 00000AD9 4C8B3D(08000000)            mov r15, [rel position]                         ; 在 24 行 0 列显示红底白字的错误信息
   154 00000AE0 498D9F[F50A0000]            lea rbx, [r15 + exceptm]
   155 00000AE7 B618                        mov dh, 24
   156 00000AE9 B200                        mov dl, 0
   157 00000AEB 41B14F                      mov r9b, 0x4f 
   158 00000AEE E8EBF5FFFF                  call put_cstringxy64                            ; 在 core_utils64.asm 中实现
   159                                  
   160 00000AF3 FA                          cli 
   161 00000AF4 F4                          hlt                                             ; 停机且不接受外部硬件中断
   162                                  
   163 00000AF5 412065786365707469-     exceptm         db "A exception raised, halt.", 0   ; 发生异常时的错误信息
   163 00000AFE 6F6E20726169736564-
   163 00000B07 2C2068616C742E00   
   164                                  
   165                                  ; ------------------------------------------------------------
   166                                  ; search_for_a_ready_task
   167                                  ; 功能: 查找一个就绪的任务并将其置为忙, 本程序在中断处理过程内调用，默认中断是关闭状态。
   168                                  ; 输出: r11=就绪任务的 PCB 线性地址
   169                                  ; ------------------------------------------------------------
   170                                  search_for_a_ready_task:
   171 00000B0F 50                          push rax 
   172 00000B10 53                          push rbx 
   173 00000B11 51                          push rcx 
   174                                  
   175 00000B12 B901000000                  mov rcx, 1                                      ; rcx=任务的“忙”状态
   176                                  
   177 00000B17 0F01F8                      swapgs 
   178 00000B1A 65488B1C2508000000          mov rbx, [gs:8]                                 ; 取得当前任务的 PCB 线性地址
   179 00000B23 0F01F8                      swapgs
   180 00000B26 4989DB                      mov r11, rbx 
   181 00000B29 4883FB00                    cmp rbx, 0                                      ; 专属数据区存的 PCB 线性地址为 0, 也就是刚初始化
   182 00000B2D 750A                        jne .again
   183 00000B2F 488B1D(A1020000)            mov rbx, [rel pcb_ptr]                          ; 那就从链表头部开始找
   184 00000B36 4989DB                      mov r11, rbx 
   185                                  .again:
   186 00000B39 4D8B9B18010000              mov r11, [r11 + 280]                            ; 取得下一个节点
   187 00000B40 4831C0                      xor rax, rax 
   188 00000B43 F0490FB14B10                lock cmpxchg [r11 + 16], rcx                    ; 原子操作, 详情见 374 页
   189 00000B49 740A                        jz .return
   190 00000B4B 4939DB                      cmp r11, rbx                                    ; 是否转一圈回到当前节点?
   191 00000B4E 7402                        je .fmiss                                       ; 是, 未找到就绪任务
   192 00000B50 EBE7                        jmp .again
   193                                  
   194                                  .fmiss:
   195 00000B52 4D31DB                      xor r11, r11 
   196                                  .return:
   197 00000B55 59                          pop rcx 
   198 00000B56 5B                          pop rbx 
   199 00000B57 58                          pop rax 
   200 00000B58 C3                          ret 
   201                                  
   202                                  ; ------------------------------------------------------------
   203                                  ; resume_execute_a_task
   204                                  ; 功能: 恢复执行一个任务
   205                                  ; 输入: r11=指定任务的 PCB 线性地址, 本程序在中断处理过程内调用，默认中断是关闭状态。
   206                                  ; ------------------------------------------------------------
   207                                  resume_execute_a_task:
   208 00000B59 8B05(32010000)              mov eax, [rel clocks_1ms]                       ; 以下计算新任务运行时间
   209 00000B5F 418B9BF0000000              mov ebx, [r11 + 240]                            ; 任务制定的时间片
   210 00000B66 F7E3                        mul ebx 
   211                                  
   212 00000B68 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
   212 00000B71 FF                 
   213 00000B72 48C786E00300000B00-         mov qword [rsi + 0x3e0], 0x0b                   ; 1 分频
   213 00000B7B 0000               
   214 00000B7D 48C78620030000FD00-         mov qword [rsi + 0x320], 0xfd                   ; 单次击发模式, Fixed, 中断信号 0xfd, 详情见书中 276 页
   214 00000B86 0000               
   215                                  
   216 00000B88 498B5B38                    mov rbx, [r11 + 56]
   217 00000B8C 0F22DB                      mov cr3, rbx                                    ; 切换地址空间
   218                                  
   219 00000B8F 0F01F8                      swapgs
   220 00000B92 654C891C2508000000          mov [gs:8], r11                                 ; 将新任务设置为当前任务
   221                                      ; mov qword [r11 + 16], 1                         ; 置任务状态为忙, 在 lock cmpxchg [r11 + 16], rcx 中已经被设置
   222 00000B9B 498B5B20                    mov rbx, [r11 + 32]                             ; 取 PCB 中的 RSP0
   223 00000B9F 6548891C2584000000          mov [gs:128 + 4], rbx                           ; 置 TSS 中的 RSP0
   224 00000BA8 0F01F8                      swapgs
   225                                  
   226 00000BAB 498B4B50                    mov rcx, [r11 + 80]
   227 00000BAF 498B5358                    mov rdx, [r11 + 88]
   228 00000BB3 498B7B68                    mov rdi, [r11 + 104]
   229 00000BB7 498B6B70                    mov rbp, [r11 + 112]
   230 00000BBB 498B6378                    mov rsp, [r11 + 120]
   231 00000BBF 4D8B8380000000              mov r8, [r11 + 128]
   232 00000BC6 4D8B8B88000000              mov r9, [r11 + 136]
   233 00000BCD 4D8B9390000000              mov r10, [r11 + 144]
   234 00000BD4 4D8BA3A0000000              mov r12, [r11 + 160]
   235 00000BDB 4D8BABA8000000              mov r13, [r11 + 168]
   236 00000BE2 4D8BB3B0000000              mov r14, [r11 + 176]
   237 00000BE9 4D8BBBB8000000              mov r15, [r11 + 184]
   238 00000BF0 41FFB3D0000000              push qword [r11 + 208]                          ; SS
   239 00000BF7 41FF7378                    push qword [r11 + 120]                          ; RSP
   240 00000BFB 41FFB3E8000000              push qword [r11 + 232]                          ; RFLAGS
   241 00000C02 41FFB3C8000000              push qword [r11 + 200]                          ; CS
   242 00000C09 41FFB3C0000000              push qword [r11 + 192]                          ; RIP
   243                                  
   244 00000C10 898680030000                mov dword [rsi + 0x380], eax                    ; 开始计时
   245                                  
   246 00000C16 498B4340                    mov rax, [r11 + 64]
   247 00000C1A 498B5B48                    mov rbx, [r11 + 72]
   248 00000C1E 498B7360                    mov rsi, [r11 + 96]
   249 00000C22 4D8B9B98000000              mov r11, [r11 + 152]
   250                                  
   251 00000C29 48CF                        iretq                                           ; 转入新任务的空间执行
   252                                  
   253                                  ; ------------------------------------------------------------
   254                                  ; time_slice_out_handler
   255                                  ; 功能: 时间片到期中断的处理过程
   256                                  ; ------------------------------------------------------------
   257                                  time_slice_out_handler:
   258 00000C2B 50                          push rax
   259 00000C2C 53                          push rbx 
   260 00000C2D 4153                        push r11 
   261                                  
   262 00000C2F 49BB00E0FFFF7FFFFF-         mov r11, LAPIC_START_ADDR                       ; 给 Local APIC 发送中断结束命令 EOI
   262 00000C38 FF                 
   263 00000C39 41C783B00000000000-         mov dword [r11 + 0xb0], 0
   263 00000C42 0000               
   264                                  
   265 00000C44 E8C6FEFFFF                  call search_for_a_ready_task
   266 00000C49 4D09DB                      or r11, r11 
   267 00000C4C 0F8494000000                jz .return                                      ; 未找到就绪任务
   268                                  
   269 00000C52 0F01F8                      swapgs
   270 00000C55 65488B042508000000          mov rax, qword [gs:8]                           ; 当前任务的 PCB 线性地址
   271 00000C5E 0F01F8                      swapgs
   272                                  
   273                                      ; 保存当前任务的状态以便将来恢复执行。
   274 00000C61 0F20DB                      mov rbx, cr3                                    ; 保存原任务的分页系统
   275 00000C64 48895838                    mov qword [rax + 56], rbx
   276                                      ; mov [rax + 64], rax                            ; 不需设置，将来恢复执行时从栈中弹出
   277                                      ; mov [rax + 72], rbx                            ; 不需设置，将来恢复执行时从栈中弹出
   278 00000C68 48894850                    mov [rax + 80], rcx
   279 00000C6C 48895058                    mov [rax + 88], rdx
   280 00000C70 48897060                    mov [rax + 96], rsi
   281 00000C74 48897868                    mov [rax + 104], rdi
   282 00000C78 48896870                    mov [rax + 112], rbp
   283 00000C7C 48896078                    mov [rax + 120], rsp
   284 00000C80 4C898080000000              mov [rax + 128], r8
   285 00000C87 4C898888000000              mov [rax + 136], r9
   286 00000C8E 4C899090000000              mov [rax + 144], r10
   287                                      ;mov [rax + 152], r11                           ; 不需设置，将来恢复执行时从栈中弹出
   288 00000C95 4C89A0A0000000              mov [rax + 160], r12
   289 00000C9C 4C89A8A8000000              mov [rax + 168], r13
   290 00000CA3 4C89B0B0000000              mov [rax + 176], r14
   291 00000CAA 4C89B8B8000000              mov [rax + 184], r15
   292 00000CB1 488B1D(08000000)            mov rbx, [rel position]
   293 00000CB8 488D9B[E60C0000]            lea rbx, [rbx + .return]                        ; 将来恢复执行时，是从中断返回
   294 00000CBF 488998C0000000              mov [rax + 192], rbx                            ; RIP域为中断返回点
   295 00000CC6 8C88C8000000                mov [rax + 200], cs
   296 00000CCC 8C90D0000000                mov [rax + 208], ss
   297 00000CD2 9C                          pushfq
   298 00000CD3 8F80E8000000                pop qword [rax + 232]
   299                                  
   300 00000CD9 48C7401000000000            mov qword [rax + 16], 0                         ; 置任务状态为就绪
   301                                  
   302 00000CE1 E973FEFFFF                  jmp resume_execute_a_task                       ; 恢复并执行新任务
   303                                  
   304                                  .return:
   305 00000CE6 415B                        pop r11
   306 00000CE8 5B                          pop rbx 
   307 00000CE9 58                          pop rax 
   308 00000CEA 48CF                        iretq
   309                                  
   310                                  ; ------------------------------------------------------------
   311                                  ; new_task_notify_handler
   312                                  ; 功能: 新任务创建后，将广播新任务创建消息给所有处理器，所有处理器执行此中断服务例程。
   313                                  ; ------------------------------------------------------------
   314                                  new_task_notify_handler:
   315 00000CEC 56                          push rsi 
   316 00000CED 4153                        push r11 
   317                                  
   318 00000CEF 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR                       
   318 00000CF8 FF                 
   319 00000CF9 C786B0000000000000-         mov dword [rsi + 0xb0], 0                       ; 发送 EOI
   319 00000D02 00                 
   320                                  
   321 00000D03 0F01F8                      swapgs
   322 00000D06 6548833C2508000000-         cmp qword [gs:8], 0                             ; 当前处理器没有任务执行吗?
   322 00000D0F 00                 
   323 00000D10 0F01F8                      swapgs
   324 00000D13 751F                        jne .return 
   325                                  
   326 00000D15 E8F5FDFFFF                  call search_for_a_ready_task
   327 00000D1A 4D09DB                      or r11, r11 
   328 00000D1D 7415                        jz .return                                      ; 未找到就绪任务
   329                                  
   330 00000D1F 4883C410                    add rsp, 16,                                    ; 去掉前面压入的两个
   331 00000D23 654889242518000000          mov qword [gs:24], rsp                          ; 保存固有栈当前指针, 以便将来返回, 在进入中断时 RIP → CS → RFLAGS → RSP → SS 按顺序入栈
   332 00000D2C 0F01F8                      swapgs
   333                                  
   334 00000D2F E925FEFFFF                  jmp resume_execute_a_task                       ; 执行新任务
   335                                  
   336                                  .return:
   337 00000D34 415B                        pop r11
   338 00000D36 5E                          pop rsi 
   339 00000D37 48CF                        iretq 
   340                                  
   341                                  ; ------------------------------------------------------------
   342                                  ; general_8259ints_handler
   343                                  ; 功能: 通用的 8259 中断处理过程
   344                                  ; ------------------------------------------------------------
   345                                  general_8259ints_handler:
   346 00000D39 50                          push rax 
   347                                  
   348 00000D3A B020                        mov al, 0x20                                    ; 中断结束命令 EOI
   349 00000D3C E6A0                        out 0xa0, al                                    ; 向从片发送
   350 00000D3E E620                        out 0x20, al                                    ; 向主片发送
   351                                  
   352 00000D40 58                          pop rax 
   353                                  
   354 00000D41 48CF                        iretq
   355                                  
   356                                  ; ------------------------------------------------------------
   357                                  ; append_to_pcb_link
   358                                  ; 功能: 在 PCB 链上追加任务控制块
   359                                  ; 输入: r11=PCB 线性基地址
   360                                  ; ------------------------------------------------------------
   361 00000D43 0000000000000000        _append_lock dq 0
   362                                  
   363                                  append_to_pcb_link:
   364 00000D4B 50                          push rax 
   365 00000D4C 53                          push rbx 
   366                                  
   367 00000D4D 9C                          pushfq
   368 00000D4E FA                          cli 
   369                                      SET_SPIN_LOCK rax, qword [rel _append_lock]
    49                              <1>  %%spin_lock:
    50 00000D4F 48833DECFFFFFF00    <1>  cmp %2, 0
    51 00000D57 7404                <1>  je %%get_lock
    52 00000D59 F390                <1>  pause
    53 00000D5B EBF2                <1>  jmp %%spin_lock
    54                              <1>  %%get_lock:
    55 00000D5D B801000000          <1>  mov %1, 1
    56 00000D62 488705DAFFFFFF      <1>  xchg %1, %2
    57 00000D69 4883F800            <1>  cmp %1, 0
    58 00000D6D 75E0                <1>  jne %%spin_lock
   370                                  
   371 00000D6F 488B1D(A1020000)            mov rbx, [rel pcb_ptr]                          ; 取得链表首节点的线性地址
   372 00000D76 4809DB                      or rbx, rbx 
   373 00000D79 7513                        jnz .not_empty                                  ; 链表非空就跳转
   374 00000D7B 4D891B                      mov [r11], r11                                  ; 唯一的节点, 前驱是自己
   375 00000D7E 4D899B18010000              mov [r11 + 280], r11                            ; 后继节点也是自己
   376 00000D85 4C891D(A1020000)            mov [rel pcb_ptr], r11                          ; 填入内核
   377 00000D8C EB17                        jmp .return 
   378                                  
   379                                  .not_empty:
   380                                      ; rbx=头节点, rax=头节点的前驱节点, r11=追加的节点
   381 00000D8E 488B03                      mov rax, [rbx]                                  ; 取得头节点的前驱线性地址
   382 00000D91 4C899818010000              mov [rax + 280], r11                            ; 头节点的后继是追加节点
   383 00000D98 49899B18010000              mov [r11 + 280], rbx                            ; 追加节点的后继是头节点
   384 00000D9F 498903                      mov [r11], rax                                  ; 追加节点的前驱是头节点的前驱
   385 00000DA2 4C891B                      mov [rbx], r11                                  ; 头节点的前驱是追加节点
   386                                  
   387                                  .return:
   388 00000DA5 48C70593FFFFFF0000-         mov qword [rel _append_lock], 0
   388 00000DAE 0000               
   389 00000DB0 9D                          popfq
   390                                  
   391 00000DB1 5B                          pop rbx 
   392 00000DB2 58                          pop rax 
   393                                  
   394 00000DB3 C3                          ret 
   395                                  
   396                                  ; ------------------------------------------------------------
   397                                  ; get_current_pid
   398                                  ; 功能: 返回当前任务（进程）的标识
   399                                  ; 输出: rax=当前任务（进程）的标识
   400                                  ; ------------------------------------------------------------
   401                                  get_current_pid:
   402 00000DB4 9C                          pushfq
   403 00000DB5 FA                          cli 
   404 00000DB6 0F01F8                      swapgs
   405 00000DB9 65488B042508000000          mov rax, [gs:8]
   406 00000DC2 488B4008                    mov rax, [rax + 8]
   407 00000DC6 0F01F8                      swapgs
   408 00000DC9 9D                          popfq
   409                                  
   410 00000DCA C3                          ret 
   411                                  
   412                                  ; ------------------------------------------------------------
   413                                  ; terminate_process
   414                                  ; 功能: 终止当前任务
   415                                  ; ------------------------------------------------------------
   416                                  terminate_process:
   417 00000DCB 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
   417 00000DD4 FF                 
   418 00000DD5 C78620030000000001-         mov dword [rsi + 0x320], 0x00010000             ; 屏蔽定时器中断
   418 00000DDE 00                 
   419                                  
   420 00000DDF FA                          cli                                             ; 执行流改变期间禁止时钟中断引发的任务切换
   421                                  
   422 00000DE0 0F01F8                      swapgs
   423 00000DE3 65488B042508000000          mov rax, [gs:8]                                 ; PCB 线性地址
   424 00000DEC 48C7401002000000            mov qword [rax + 16], 2                         ; 任务状态=终止
   425 00000DF4 6548C7042500000000-         mov qword [gs:0], 0
   425 00000DFD 00000000           
   426 00000E01 65488B242518000000          mov rsp, [gs:24]                                ; 切换到处理器固有栈
   427 00000E0A 0F01F8                      swapgs
   428                                  
   429 00000E0D E8FDFCFFFF                  call search_for_a_ready_task
   430 00000E12 4D09DB                      or r11, r11 
   431 00000E15 7405                        jz .sleep                                       ; 未找到就绪任务
   432                                  
   433 00000E17 E93DFDFFFF                  jmp resume_execute_a_task                       ; 执行新任务
   434                                  
   435                                  .sleep:
   436 00000E1C 48CF                        iretq
   437                                  
   438                                  ; ------------------------------------------------------------
   439                                  ; create_process
   440                                  ; 功能: 创建新的任务, 即分配好空间, 创建并填入 PCB
   441                                  ; 输入: r8=程序的起始逻辑扇区号
   442                                  ; ------------------------------------------------------------
   443                                  create_process:
   444 00000E1E 50                          push rax
   445 00000E1F 53                          push rbx
   446 00000E20 51                          push rcx
   447 00000E21 52                          push rdx
   448 00000E22 56                          push rsi
   449 00000E23 57                          push rdi
   450 00000E24 55                          push rbp
   451 00000E25 4150                        push r8
   452 00000E27 4151                        push r9
   453 00000E29 4152                        push r10
   454 00000E2B 4153                        push r11
   455 00000E2D 4154                        push r12
   456 00000E2F 4155                        push r13
   457 00000E31 4156                        push r14
   458 00000E33 4157                        push r15
   459                                  
   460                                      ; 在内核空间创建任务控制块 PCB, 来记录任务相关信息, 内核通过任务控制块来跟踪和识别任务, 并对任务进行管理和控制
   461 00000E35 B900020000                  mov rcx, 512                                    ; 任务控制块 PCB 的尺寸, PCB 的格式见书中 205 图
   462 00000E3A E855F9FFFF                  call core_memory_allocate                       ; 在内核分配地址
   463                                  
   464 00000E3F 4D89EB                      mov r11, r13                                    ; r11 寄存器用来保存 PCB 线性地址
   465                                  
   466 00000E42 49C7431800000000            mov qword [r11 + 24], USER_ALLOC_START          ; 填写 PCB 的下一次内存分配时可用线性地址
   467                                      
   468                                      ; 从当前的四级头表复制并创建新任务的四级头表
   469 00000E4A E8E6F9FFFF                  call copy_current_pml4                          ; 在 core_utils64.asm 中实现
   470 00000E4F 49894338                    mov [r11 + 56], rax                             ; 填写 PCB 的 CR3, 默认 PCD=PWT=0(这两个属性忘记的话可以看看书中 123 页)
   471                                  
   472                                      ; 以下，切换到新任务的地址空间，并清空其 4 级头表的前半部分。
   473                                      ; 我们正在地址空间的高端执行，可正常执行内核代码并访问内核数据，同时，当前使用的栈位于地址空间高端的栈。
   474 00000E53 410F20DF                    mov r15, cr3                                    ; 保存控制寄存器, 本次是临时切换, 还要再切回来
   475 00000E57 0F22D8                      mov cr3, rax                                    ; 切换到新四级头表的新地址空间
   476                                  
   477                                      ; 清空四级头表的前半部分, 即局部地址
   478 00000E5A 48C7C000F0FFFF              mov rax, 0xffff_ffff_ffff_f000                  ; 四级头表线性地址, 还是递归映射...
   479 00000E61 B900010000                  mov rcx, 256
   480                                  .clsp:
   481 00000E66 48C70000000000              mov qword [rax], 0
   482 00000E6D 4883C008                    add rax, 8
   483 00000E71 E2F3                        loop .clsp
   484                                  
   485 00000E73 0F20D8                      mov rax, cr3                                    ; 刷新 TLB
   486 00000E76 0F22D8                      mov cr3, rax 
   487                                  
   488                                      ; 为新任务分配 0 特权级使用的栈空间
   489 00000E79 B900000100                  mov rcx, 4096 * 16                              ; 在内核地址开辟空间
   490 00000E7E E811F9FFFF                  call core_memory_allocate
   491 00000E83 4D897320                    mov [r11 + 32], r14                             ; 填入 PCB 中 RSP0, 满减栈, 所以写入结尾地址
   492                                  
   493                                      ; 为新任务分配 3 特权级使用的栈空间
   494 00000E87 B900000100                  mov rcx, 4096 * 16                              ; 在用户地址开辟空间
   495 00000E8C E858F9FFFF                  call user_memory_allocate
   496 00000E91 4D897378                    mov [r11 + 120], r14                            ; 填入 PCB 中 RSP
   497                                  
   498 00000E95 49C7431000000000            mov qword [r11 + 16], 0                         ; PCB 中的任务状态填为就绪    
   499                                  
   500                                      ; 以下开始加载用户程序
   501 00000E9D B900020000                  mov rcx, 512                                    ; 在用户空间开辟一个缓冲区
   502 00000EA2 E842F9FFFF                  call user_memory_allocate
   503 00000EA7 4C89EB                      mov rbx, r13 
   504 00000EAA 4C89C0                      mov rax, r8                                     ; r8 中存的用户程序起始扇区号         
   505 00000EAD E8FFF2FFFF                  call read_hard_disk_0
   506                                  
   507 00000EB2 4D896D10                    mov [r13 + 16], r13                             ; 在程序头填写它自己的起始线性地址
   508 00000EB6 4D89EE                      mov r14, r13 
   509 00000EB9 4D037508                    add r14, [r13 + 8]
   510 00000EBD 4D89B3C0000000              mov [r11 + 192], r14                            ; 在 PCB 中登记程序入口的线性地址
   511                                  
   512                                      ; 以下读取程序剩下代码
   513 00000EC4 498B4D00                    mov rcx, [r13]                                  ; 程序尺寸(在程序头部记录)
   514 00000EC8 48F7C1FF010000              test rcx, 0x1ff                                 ; 能被 512 整除吗?
   515 00000ECF 740F                        jz .y512
   516 00000ED1 48C1E909                    shr rcx, 9                                      ; 不能就凑整
   517 00000ED5 48C1E109                    shl rcx, 9
   518 00000ED9 4881C100020000              add rcx, 512
   519                                  .y512:
   520 00000EE0 4881E900020000              sub rcx, 512                                    ; 减去已读一个扇区的长度
   521 00000EE7 7416                        jz .rdok 
   522 00000EE9 E8FBF8FFFF                  call user_memory_allocate                       ; 先分配内存在读数据
   523 00000EEE 48C1E909                    shr rcx, 9                                      ; 除以 512, 计算还需要读的扇区数
   524 00000EF2 48FFC0                      inc rax                                         ; 起始扇区号
   525                                  .b1:
   526 00000EF5 E8B7F2FFFF                  call read_hard_disk_0
   527 00000EFA 48FFC0                      inc rax 
   528 00000EFD E2F6                        loop .b1 
   529                                  
   530                                  .rdok:
   531 00000EFF 49C783C80000003B00-         mov qword [r11 + 200], USER_CODE64_SEL          ; 填写 PCB 中代码段选择子
   531 00000F08 0000               
   532 00000F0A 49C783D00000003300-         mov qword [r11 + 208], USER_STACK64_SEL         ; 填写 PCB 中栈段选择子
   532 00000F13 0000               
   533                                  
   534 00000F15 9C                          pushfq
   535 00000F16 418F83E8000000              pop qword [r11 + 232]                           ; 填写 PCB 中 RFLAGS
   536                                  
   537 00000F1D 49C783F00000003700-         mov qword [r11 + 240], SUGG_PREEM_SLICE         ; 推荐的执行时间片
   537 00000F26 0000               
   538                                  
   539 00000F28 E8C9F9FFFF                  call generate_process_id
   540 00000F2D 49894308                    mov [r11 + 8], rax                              ; 填入 PCB 中当前任务标识
   541                                  
   542 00000F31 E815FEFFFF                  call append_to_pcb_link                         ; 将 PCB 添加到进程控制链表尾部
   543                                  
   544 00000F36 410F22DF                    mov cr3, r15                                    ; 切换到原任务地址空间
   545                                  
   546 00000F3A 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR                       ; Local APIC 的线性地址
   546 00000F43 FF                 
   547 00000F44 C78610030000000000-         mov dword [rsi + 0x310], 0
   547 00000F4D 00                 
   548 00000F4E C78600030000FE4008-         mov dword [rsi + 0x300], 0x000840fe             ; 向所有处理器发送任务认领中断
   548 00000F57 00                 
   549                                  
   550 00000F58 415F                        pop r15
   551 00000F5A 415E                        pop r14
   552 00000F5C 415D                        pop r13
   553 00000F5E 415C                        pop r12
   554 00000F60 415B                        pop r11
   555 00000F62 415A                        pop r10
   556 00000F64 4159                        pop r9
   557 00000F66 4158                        pop r8
   558 00000F68 5D                          pop rbp
   559 00000F69 5F                          pop rdi
   560 00000F6A 5E                          pop rsi
   561 00000F6B 5A                          pop rdx
   562 00000F6C 59                          pop rcx
   563 00000F6D 5B                          pop rbx
   564 00000F6E 58                          pop rax
   565                                  
   566 00000F6F C3                          ret
   567                                  ; ------------------------------------------------------------
   568                                  ; syscall_procedure
   569                                  ; 功能: 系统调用的处理过程, 处理器会自动关闭可屏蔽中断
   570                                  ; 注意: rcx 和 r11 由处理器使用, 保存 rip 和 rflags 的内容; rbp 和 r15 由此例程占用. 如有必要, 请用户程序在调用 syscall 前保存它们, 在系统调用返回后自行恢复.
   571                                  ; ------------------------------------------------------------
   572                                  syscall_procedure: 
   573                                  
   574 00000F70 0F01F8                      swapgs
   575 00000F73 654889242500000000          mov [gs:0], rsp                                 ; 保存当前 3 特权级栈指针
   576 00000F7C 65488B242584000000          mov rsp, [gs:128 + 4],                          ; 使用 TSS 的 RSP0 作为安全栈
   577 00000F85 65FF342500000000            push qword [gs:0]                               
   578 00000F8D 0F01F8                      swapgs
   579 00000F90 FB                          sti                                             ; 准备工作全部完成，中断和任务切换无虞
   580                                  
   581 00000F91 4157                        push r15 
   582 00000F93 4C8B3D(08000000)            mov r15, [rel position]
   583 00000F9A 4D03BCC7[69020000]          add r15, [r15 + rax * 8 + sys_entry]            ; 得到指定的那个系统调用功能的线性地址
   584 00000FA2 41FFD7                      call r15
   585 00000FA5 415F                        pop r15 
   586                                  
   587 00000FA7 FA                          cli 
   588 00000FA8 5C                          pop rsp                                         ; 恢复原先的 3 特权级栈指针
   589 00000FA9 480F07                      o64 sysret
   590                                  
   591                                  ; ------------------------------------------------------------
   592                                  ; init
   593                                  ; 功能: 初始化内核工作环境
   594                                  ; ------------------------------------------------------------
   595                                  init: 
   596                                      ; 将 GDT 的线性地址映射到虚拟内存高端的相同位置。
   597                                      ; 处理器不支持 64 位立即数到内存地址的操作, 所以用两条指令完成。
   598 00000FAC 48B8000001000080FF-         mov rax, UPPER_GDT_LINEAR                       ; GDT 高端线性地址
   598 00000FB5 FF                 
   599 00000FB6 48890425047E0000            mov qword [SDA_PHY_ADDR + 4], rax
   600                                  
   601 00000FBE 0F011425027E0000            lgdt [SDA_PHY_ADDR + 2]                
   602                                  
   603                                      ; 将栈映射到高端
   604                                      ; 64 位模式下不支持源操作数为 64 位立即数的加法操作。
   605 00000FC6 48B8000000000080FF-         mov rax, UPPER_LINEAR_START
   605 00000FCF FF                 
   606 00000FD0 4801C4                      add rsp, rax 
   607                                  
   608                                      ; 准备让处理器从虚拟地址空间的高端开始执行（现在依然在低端执行）
   609 00000FD3 48B8000000000080FF-         mov rax, UPPER_LINEAR_START
   609 00000FDC FF                 
   610 00000FDD 480105(08000000)            add [rel position], rax                         ; 更新 position 处地址, 采用相对寻址方式
   611 00000FE4 488B05(08000000)            mov rax, [rel position]
   612 00000FEB 4805[F30F0000]              add rax, .to_upper
   613 00000FF1 FFE0                        jmp rax                                         ; 用 jmp 改变 rip
   614                                  
   615                                  .to_upper:
   616                                      ; 接下来初始化中断描述符表 IDT，并为 32 个异常以及 224 个中断安装门描述符
   617                                  
   618                                      ; 为 32 个异常创建通用处理过程的中断门
   619 00000FF3 4C8B0D(08000000)            mov r9, [rel position]
   620 00000FFA 498D81[D90A0000]            lea rax, [r9 + general_exception_handler]
   621 00001001 E823F1FFFF                  call make_interrupt_gate                        ; 在 core_utils64.asm 中实现
   622                                  
   623 00001006 4D31C0                      xor r8, r8  
   624                                  .idt0:                                              ; 32 个异常
   625 00001009 E860F1FFFF                  call mount_idt_entry                            ; 在 core_utils64.asm 中实现
   626 0000100E 49FFC0                      inc r8 
   627 00001011 4983F81F                    cmp r8, 31 
   628 00001015 7EF2                        jle .idt0
   629                                  
   630                                      ; 创建并安装中断门
   631 00001017 498D81[D70A0000]            lea rax, [r9 + general_interrupt_handler]       
   632 0000101E E806F1FFFF                  call make_interrupt_gate                        ; 在 core_utils64.asm 中实现
   633                                  
   634 00001023 41B820000000                mov r8, 32 
   635                                  .idt1:
   636 00001029 E840F1FFFF                  call mount_idt_entry                            ; 在 core_utils64.asm 中实现
   637 0000102E 49FFC0                      inc r8 
   638 00001031 4981F8FF000000              cmp r8, 255
   639 00001038 7EEF                        jle .idt1
   640                                  
   641 0000103A 48B800E000000080FF-         mov rax, UPPER_IDT_LINEAR                       ; 中断描述符表 IDT 的高端线性地址
   641 00001043 FF                 
   642 00001044 48BB007E00000080FF-         mov rbx, UPPER_SDA_LINEAR                       ; 系统数据区 SDA 的高端线性地址
   642 0000104D FF                 
   643 0000104E 66C7430CFF0F                mov word [rbx + 0x0c], 256 * 16 - 1
   644 00001054 4889430E                    mov qword [rbx + 0x0e], rax                     ; 将 IDT 的线性地址和界限写入内核空间保存
   645                                  
   646 00001058 0F015B0C                    lidt [rbx + 0x0c]                               ; 加载 IDT
   647                                  
   648 0000105C B0FF                        mov al, 0xff                                    ; 屏蔽所有发往 8259A 主芯片的中断信号
   649 0000105E E621                        out 0x21, al                                    ; 多处理器下不再使用 8259 芯片
   650                                  
   651                                      ; 在 64 位模式下显示的第一条信息!
   652 00001060 4C8B3D(08000000)            mov r15, [rel position]
   653 00001067 498D9F[36010000]            lea rbx, [r15 + welcome]
   654 0000106E E88DEFFFFF                  call put_string64                               ; 在 core_utils64.asm 中实现
   655                                  
   656                                      ; 安装系统服务(syscall, sysret)所需的代码段和栈段描述符
   657 00001073 49BF007E00000080FF-         mov r15, UPPER_SDA_LINEAR                       ; 系统数据区 SDA 的线性地址
   657 0000107C FF                 
   658 0000107D 4831DB                      xor rbx, rbx 
   659 00001080 66418B5F02                  mov bx, [r15 + 2]                               ; 得到 GDT 界限值(表的总字节数 - 1 == 下标)
   660 00001085 66FFC3                      inc bx 
   661 00001088 49035F04                    add rbx, [r15 + 4]                              ; GDT 基址 + GDT 界限值 + 1 == 新描述符的地址
   662                                                          
   663                                      ; 增加新的描述符, 这里可以看书中 182 页的图, 将之前设置的四个描述符也画全了
   664                                  
   665                                      ; 创建 4# 描述符, 栈/数据段描述符, DPL= 0
   666 0000108C C703FFFF0000                mov dword [rbx], 0x0000ffff
   667 00001092 C743040092CF00              mov dword [rbx + 4], 0x00cf9200                
   668                                      ; 创建 5# 描述符, 兼容模式下代码段描述符, 暂不支持, 位置保留, 设为全 0
   669 00001099 C7430800000000              mov dword [rbx + 8], 0  
   670 000010A0 C7430C00000000              mov dword [rbx + 12], 0
   671                                      ; 创建 6# 描述符, 栈/数据段描述符, DPL= 3
   672 000010A7 C74310FFFF0000              mov dword [rbx + 16], 0x0000ffff
   673 000010AE C7431400F2CF00              mov dword [rbx + 20], 0x00cff200
   674                                      ; 创建 7# 描述符, 64 位模式的代码段描述符, DPL= 3
   675 000010B5 C74318FFFF0000              mov dword [rbx + 24], 0x0000ffff
   676 000010BC C7431C00F8AF00              mov dword [rbx + 28], 0x00aff800
   677                                  
   678                                      ; 我们为每个逻辑处理器都准备一个专属数据区, 它是由每个处理器的 GS 所指向的。
   679                                      ; 为当前处理器(BSP)准备专属数据区, 设置 GS 并安装任务状态段 TSS 的描述符
   680                                      ; 详情见书中 348 页
   681 000010C3 B900010000                  mov rcx, 256                                    ; 专属数据区长度
   682 000010C8 E8C7F6FFFF                  call core_memory_allocate                       ; 在 core_utils64.asm 中实现
   683 000010CD 49C7450800000000            mov qword [r13 + 8], 0                          ; 当前任务的 PCB 指针, 初始化为 0
   684 000010D5 49C7451000000000            mov qword [r13 + 16], 0                         ; 将当前的处理器编号设置为 #0
   685 000010DD 49896518                    mov [r13 + 24], rsp                             ; 当前处理器的专属栈
   686 000010E1 498D8580000000              lea rax, [r13 + 128]                            ; TSS 开始于专属数据区内偏移为 128 的地方
   687 000010E8 E858F0FFFF                  call make_tss_descriptor
   688 000010ED 48897320                    mov qword [rbx + 32], rsi                       ; TSS 描述符的低 64 位
   689 000010F1 48897B28                    mov qword [rbx + 40], rdi                       ; TSS 描述符的高 64 位
   690                                  
   691 000010F5 664183470230                add word [r15 + 2], 48                          ; 更新 GDT 的边界值, 48 是四个段描述符和一个 TSS 描述符的字节数
   692 000010FB 410F015702                  lgdt [r15 + 2]
   693                                  
   694 00001100 66B94000                    mov cx, 0x0040                                  ; TSS 描述符选择子
   695 00001104 0F00D9                      ltr cx                                          ; 使用 ltr 指令加载 TSS 选择子
   696                                  
   697                                      ; 将处理器专属数据区首地址保存到当前处理器的型号专属寄存器 IA32_KERNEL_GS_BASE
   698 00001107 B9020100C0                  mov ecx, 0xc000_0102                            ; IA32_KERNEL_GS_BASE
   699 0000110C 4C89E8                      mov rax, r13                                    ; 只用 eax
   700 0000110F 4C89EA                      mov rdx, r13 
   701 00001112 48C1EA20                    shr rdx, 32                                     ; 只用 edx
   702 00001116 0F30                        wrmsr
   703                                  
   704                                      ; 为快速系统调用 syscall 和 sysret 准备参数, 详细见书中 180-185
   705 00001118 B9800000C0                  mov ecx, 0x0c0000080                            ; 指定型号专属寄存器 IA32_EFER
   706 0000111D 0F32                        rdmsr
   707 0000111F 0FBAE800                    bts eax, 0                                      ; 置位 SCE 位, 允许 syscall 和 sysret
   708 00001123 0F30                        wrmsr
   709                                  
   710 00001125 B9810000C0                  mov ecx, 0xc0000081                             ; IA32_STAR, syscall 会自动切换代码段寄存器（CS）到内核态的代码段，其值来自 IA32_STAR
   711 0000112A BA18002B00                  mov edx, (RESVD_DESC_SEL << 16) | CORE_CODE64_SEL ; 高 32 位, RESVD_DESC_SEL 是用户态代码段选择子（返回用户态时使用）, CORE_CODE64_SEL 是内核态代码段选择子（进入内核态时使用）
   712 0000112F 31C0                        xor eax, eax                                    ; 低 32 位
   713 00001131 0F30                        wrmsr                                           
   714                                  
   715 00001133 B9820000C0                  mov ecx, 0xc0000082                             ; IA32_LSTAR
   716 00001138 488B05(08000000)            mov rax, [rel position]
   717 0000113F 488D80[700F0000]            lea rax, [rax + syscall_procedure]              ; 只用 EAX 部分
   718 00001146 4889C2                      mov rdx, rax 
   719 00001149 48C1EA20                    shr rdx, 32                                     ; 只用 EDX 部分
   720 0000114D 0F30                        wrmsr
   721                                  
   722 0000114F B9840000C0                  mov ecx, 0xc0000084                             ; IA32_FMASK
   723 00001154 31D2                        xor edx, edx 
   724 00001156 B800770400                  mov eax, 0x00047700                             ; 将 TF, IF, DF, IOPL, AC 清零, 其他保持不变, 可看书 185 页的图
   725 0000115B 0F30                        wrmsr
   726                                  
   727                                      ; 以下初始化高级可编程中断控制器 APIC。在计算机启动后，BIOS已经对 LAPIC 和 IOAPIC 做了
   728                                      ; 初始化并创建了相关的高级配置和电源管理接口（ACPI）表项。可以从中获取多处理器和
   729                                      ; APIC 信息。英特尔架构的个人计算机（IA-PC）从 1MB 物理内存中搜索获取；启用可扩展固件
   730                                      ; 接口（EFI或者叫UEFI）的计算机需使用 EFI 传递的 EFI 系统表指针定位相关表格并从中获取
   731                                      ; 多处理器和 APIC 信息。为简单起见，我们采用前一种传统的方式。请注意虚拟机的配置！
   732                                  
   733                                      ; ACPI 申领的内存区域已经保存在我们的系统数据区（SDA），以下将其读出。此内存区可能
   734                                      ; 位于分页系统尚未映射的部分，故以下先将这部分内存进行一一映射（线性地址=物理地址）
   735 0000115D 66833C25167E000000          cmp word [SDA_PHY_ADDR + 0x16], 0               ; 检查检查地址范围描述结构的数量是否为 0
   736 00001166 7411                        jz .acpi_err                                    ; 除非 bios 不支持 acpi, 否则不会是 0
   737 00001168 BE187E0000                  mov rsi, SDA_PHY_ADDR + 0x18                    ; 系统数据区, 地址范围描述结构的起始地址
   738                                  .looking:
   739 0000116D 837E1003                    cmp dword [rsi + 16], 3                         ; 3 代表是 ACPI 申领的内存, ACPI 的介绍可以看书中 257 页
   740 00001171 741B                        jz .looked
   741 00001173 4883C620                    add rsi, 32                                     ; 每个地址范围描述结构的长度
   742 00001177 E2F4                        loop .looking
   743                                  
   744                                  .acpi_err:
   745 00001179 4C8B3D(08000000)            mov r15, [rel position]
   746 00001180 498D9F[00000000]            lea rbx, [r15 + acpi_error]
   747 00001187 E852EFFFFF                  call put_cstringxy64
   748 0000118C FA                          cli 
   749 0000118D F4                          hlt 
   750                                  
   751                                  .looked:
   752 0000118E 488B1E                      mov rbx, [rsi]                                  ; ACPI 申领的起始物理地址
   753 00001191 488B4E08                    mov rcx, [rsi + 8]                              ; ACPI 申领的内存大小, 以字节计
   754 00001195 4801D9                      add rcx, rbx                                    ; ACPI 申领的内存上边界
   755 00001198 48C7C200F0FFFF              mov rdx, 0xffff_ffff_ffff_f000                  ; 用于生成页地址的掩码
   756                                  
   757                                  .mapping:
   758 0000119F 4989DD                      mov r13, rbx                                    ; 映射的线性地址
   759 000011A2 4889D8                      mov rax, rbx 
   760 000011A5 4821D0                      and rax, rdx 
   761 000011A8 4883C807                    or rax, 0x07                                    ; 将地址设置上属性
   762 000011AC E8C7F5FFFF                  call mapping_laddr_to_page
   763 000011B1 4881C300100000              add rbx, 0x1000
   764 000011B8 4839CB                      cmp rbx, rcx 
   765 000011BB 7EE2                        jle .mapping
   766                                  
   767                                      ; 从物理地址 0x60000(常规内存顶端) 开始, 搜索系统描述指针结构(RSDP)
   768 000011BD BB00000600                  mov rbx, 0x60000
   769 000011C2 48B952534420505452-         mov rcx, "RSD PTR "                             ; 结构起始标记
   769 000011CB 20                 
   770                                  
   771                                  .searc:
   772 000011CC 48390B                      cmp qword [rbx], rcx
   773 000011CF 740F                        je .finda 
   774 000011D1 4883C310                    add rbx, 16                                     ; 结构的标记位于 16 字节边界处, 也就是说可以以 16 字节为单位搜索
   775 000011D5 4881FBF0FF0F00              cmp rbx, 0xffff0                                ; 搜索上边界
   776 000011DC 7CEE                        jl .searc 
   777 000011DE EB99                        jmp .acpi_err                                   ; 未找到 RSDP, 报错停机
   778                                  
   779                                  .finda:
   780                                      ; RSDT 和 XSDT 都指向 MADT, 但 RSDT 给出的是 32 位物理地址, 而 XDST 给出 64 位物理地址。
   781                                      ; 只有 VCPI 2.0 及更高版本才有 XSDT。典型地, VBox 支持 ACPI 2.0 而 Bochs 仅支持 1.0
   782                                      ; 这个可以看书中 274 往后的几个图
   783 000011E0 807B0F02                    cmp byte [rbx + 15], 2                          ; 检测 ACPI 的版本是否为 2
   784 000011E4 752B                        jne .acpi_1
   785 000011E6 488B5B18                    mov rbx, [rbx + 24]                             ; 得到扩展的系统描述表 XSDT 的物理地址
   786                                  
   787                                      ; 以下开始在 XSDT 中遍历搜索多 APIC 描述符表, 即 MADT
   788 000011EA 4831FF                      xor rdi, rdi                                    ; 下面要使用 rdi, 尽管 edi 赋值了, 但还是要清空 rdi
   789 000011ED 8B7B04                      mov edi, [rbx + 4]                              ; 得到 XSDT 长度, 以字节计
   790 000011F0 4801DF                      add rdi, rbx                                    ; 计算上边界的物理地址
   791 000011F3 4883C324                    add rbx, 36                                     ; XSDT 尾部数组的物理地址
   792                                  .madt0:
   793 000011F7 4C8B1B                      mov r11, [rbx]             
   794 000011FA 41813B41504943              cmp dword [r11], "APIC"                         ; MADT 表的标记
   795 00001201 7436                        je .findm                       
   796 00001203 4883C308                    add rbx, 8                                      ; 下一个元素
   797 00001207 4839FB                      cmp rbx, rdi  
   798 0000120A 7CEB                        jl .madt0
   799 0000120C E968FFFFFF                  jmp .acpi_err
   800                                  
   801                                      ; 一些处理 VCPI 1.0, 在 RSDT 中遍历搜索 MADT
   802                                  .acpi_1:
   803 00001211 8B5B10                      mov ebx, [rbx + 16]                             ; 得到根系统描述符表 RSDT 的物理地址
   804 00001214 678B7B04                    mov edi, [ebx + 4]                              ; 得到 RSDT 的长度, 以字节计
   805 00001218 01DF                        add edi, ebx                                    ; 上边界物理地址
   806 0000121A 83C324                      add ebx, 36                                     ; 尾部数组的物理地址
   807 0000121D 4D31DB                      xor r11, r11 
   808                                  .madt1:
   809 00001220 67448B1B                    mov r11d, [ebx]
   810 00001224 41813B41504943              cmp dword [r11], "APIC"                         ; MADT 表的标记
   811 0000122B 740C                        je .findm
   812 0000122D 83C304                      add ebx, 4
   813 00001230 39FB                        cmp ebx, edi 
   814 00001232 7CEC                        jl .madt1
   815 00001234 E940FFFFFF                  jmp .acpi_err
   816                                  
   817                                  .findm:
   818                                      ; 此时, r11 是 MADT 的物理地址
   819 00001239 418B5324                    mov edx, [r11 + 36]                             ; 预置的 Local APIC 物理地址
   820 0000123D 891D(28010000)              mov [rel lapic_addr], ebx
   821                                  
   822                                      ; 以下开始遍历系统中的逻辑处理器的 LAPIC ID 和 I/O APIC
   823 00001243 4C8B3D(08000000)            mov r15, [rel position]
   824 0000124A 4D8DBF[28000000]            lea r15, [r15 + cpu_list]
   825                                  
   826 00001251 4831FF                      xor rdi, rdi 
   827 00001254 418B7B04                    mov edi, [r11 + 4]                              ; MADT 的长度
   828 00001258 4C01DF                      add rdi, r11                                    ; 上边界物理地址
   829 0000125B 4983C32C                    add r11, 44                                     ; 指向 MADT 尾部中断控制器结构列表
   830                                  .enumd:
   831 0000125F 41803B00                    cmp byte [r11], 0                               ; 0 代表 Local APIC
   832 00001263 7408                        je .l_apic
   833 00001265 41803B01                    cmp byte [r11], 1                               ; 1 代表 I/O APIC
   834 00001269 741B                        je .ioapic
   835 0000126B EB2D                        jmp .m_end 
   836                                  .l_apic:
   837 0000126D 41837B0400                  cmp dword [r11 + 4], 0                          ; Local APIC flag
   838 00001272 7426                        jz .m_end
   839 00001274 418A4303                    mov al, [r11 + 3]                                ; 获取 Local APIC ID
   840 00001278 418807                      mov [r15], al                                   ; 保存 Local APIC ID 到 cpu_list
   841 0000127B 49FFC7                      inc r15
   842 0000127E FE05(27000000)              inc byte [rel num_cpus]                         ; 原来 cpu 数量是这么统计出来的
   843 00001284 EB14                        jmp .m_end
   844                                  .ioapic:
   845 00001286 418A4302                    mov al, [r11 + 2]                               ; 取出 I/O APIC ID
   846 0000128A 8805(30010000)              mov [rel ioapic_id], al                         ; 保存 I/O APIC ID
   847 00001290 418B4304                    mov eax, [r11 + 4]                              ; 取出 I/O APIC 物理地址
   848 00001294 8905(2C010000)              mov [rel ioapic_addr], eax                      ; 保存 I/O APIC ID 物理地址
   849                                  .m_end:
   850 0000129A 4831C0                      xor rax, rax 
   851 0000129D 418A4301                    mov al, [r11 + 1]
   852 000012A1 4901C3                      add r11, rax                                    ; 计算出下一个中断控制结构列表的物理地址
   853 000012A4 4939FB                      cmp r11, rdi 
   854 000012A7 7CB6                        jl .enumd
   855                                  
   856                                      ; 遍历完成, 映射物理地址到内核指定区域
   857                                  
   858                                      ; Local APIC -> LAPIC_START_ADDR
   859 000012A9 49BD00E0FFFF7FFFFF-         mov r13, LAPIC_START_ADDR
   859 000012B2 FF                 
   860 000012B3 4831C0                      xor rax, rax 
   861 000012B6 8B05(28010000)              mov eax, [rel lapic_addr]                       ; 取出 LAPIC 的物理地址
   862 000012BC 83C81F                      or eax, 0x1f                                    ; 设置属性, PCD=PWT=U/S=R/W=P=1, 强不可缓存
   863 000012BF E8B4F4FFFF                  call mapping_laddr_to_page
   864                                      ; I/O APIC -> IOAPIC_START_ADDR
   865 000012C4 49BD00D0FFFF7FFFFF-         mov r13, IOAPIC_START_ADDR
   865 000012CD FF                 
   866 000012CE 4831C0                      xor rax, rax 
   867 000012D1 8B05(2C010000)              mov eax, [rel ioapic_addr]
   868 000012D7 83C81F                      or eax, 0x1f  
   869 000012DA E899F4FFFF                  call mapping_laddr_to_page
   870                                  
   871                                      ; 以下测量当前处理器 1ms 内经历了多少时钟周期, 作为后续的定时基准, 详情见书中284 页
   872 000012DF 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
   872 000012E8 FF                 
   873                                  
   874 000012E9 C78620030000000001-         mov dword [rsi + 0x320], 0x10000                ; 定时器的本地向量表入口寄存器, 单次击发模式
   874 000012F2 00                 
   875 000012F3 C786E00300000B0000-         mov dword [rsi + 0x3e0], 0x0b                   ; 定时器的分频配置寄存器: 1 分频
   875 000012FC 00                 
   876                                  
   877 000012FD B00B                        mov al, 0x0b                                    ; RTC 寄存器 B                                     
   878 000012FF 0C80                        or al, 0x80                                     ; 阻断 NMI
   879 00001301 E670                        out 0x70, al            
   880 00001303 B052                        mov al, 0x52                                    ; 设置寄存器 B, 开发周期性中断, 开放更新结束后中断, BCD 码, 24 小时制
   881 00001305 E671                        out 0x71, al 
   882                                  
   883 00001307 B08A                        mov al, 0x8a                                    ; CMOS 寄存器 A
   884 00001309 E670                        out 0x70, al 
   885 0000130B B02D                        mov al, 0x2d                                    ; 32 kHz, 125 ms 的周期性中断
   886 0000130D E671                        out 0x71, al                                    ; 写回 CMOS 寄存器 A
   887                                  
   888 0000130F B08C                        mov al, 0x8c
   889 00001311 E670                        out 0x70, al 
   890 00001313 E471                        in al, 0x71                                     ; 读寄存器 C
   891                                  .w0:
   892 00001315 E471                        in al, 0x71 
   893 00001317 480FBAE006                  bt rax, 6                                       ; 更新周期结束中断已发生
   894 0000131C 73F7                        jnc .w0 
   895 0000131E C78680030000FFFFFF-         mov dword [rsi + 0x380], 0xffff_ffff            ; 定时器初始计数寄存器: 置初始值并开始计数
   895 00001327 FF                 
   896                                  .w1:
   897 00001328 E471                        in al, 0x71     
   898 0000132A 480FBAE006                  bt rax, 6   
   899 0000132F 73F7                        jnc .w1 
   900 00001331 8B9690030000                mov edx, [rsi + 0x390],                         ; 定时器初始计数寄存器: 读当前计数值
   901                                  
   902 00001337 B8FFFFFFFF                  mov eax, 0xffff_ffff
   903 0000133C 29D0                        sub eax, edx 
   904 0000133E 31D2                        xor edx, edx 
   905 00001340 BB7D000000                  mov ebx, 125                                    ; 125ms
   906 00001345 F7F3                        div ebx                                         ; 结果存在 eax 中, 即当前处理器在 1ms 内的时钟数
   907                                  
   908 00001347 8905(32010000)              mov [rel clocks_1ms], eax                       ; 记录
   909                                  
   910 0000134D B00B                        mov al, 0x0b                                    ; RTC 寄存器 B
   911 0000134F 0C80                        or al, 0x80                                     ; 阻断 NMI
   912 00001351 E670                        out 0x70, al 
   913 00001353 B012                        mov al, 0x12                                    ; 设置寄存器 B, 只允许更新周期结束中断
   914 00001355 E671                        out 0x71, al 
   915                                  
   916                                      ; 安装用于任务切换的中断处理过程
   917 00001357 4C8B0D(08000000)            mov r9, [rel position]
   918 0000135E 498D81[EC0C0000]            lea rax, [r9 + new_task_notify_handler]         ; 得到中断处理过程的线性地址
   919 00001365 E8BFEDFFFF                  call make_interrupt_gate                        
   920                                  
   921 0000136A FA                          cli 
   922 0000136B 41B8FE000000                mov r8, 0xfe                                    ; 任务切换使用的中断向量, 数越大, 优先级越高
   923 00001371 E8F8EDFFFF                  call mount_idt_entry
   924 00001376 FB                          sti 
   925                                  
   926                                      ; 以下安装时间片到期中断处理过程
   927 00001377 4C8B0D(08000000)            mov r9, [rel position]
   928 0000137E 498D81[2B0C0000]            lea rax, [r9 + time_slice_out_handler]          ; 得到中断处理过程的线性地址
   929 00001385 E89FEDFFFF                  call make_interrupt_gate            
   930                                  
   931 0000138A FA                          cli 
   932 0000138B 41B8FD000000                mov r8, 0xfd 
   933 00001391 E8D8EDFFFF                  call mount_idt_entry
   934 00001396 FB                          sti
   935                                  
   936                                      ; 以下初始化应用处理器 AP, 先将初始化代码复制到物理内存的选定位置
   937 00001397 488B35(08000000)            mov rsi, [rel position]
   938 0000139E 488DB6[00000000]            lea rsi, [rsi + section.ap_init_block.start]    ; 源
   939 000013A5 BF00F00000                  mov rdi, AP_START_UP_ADDR                       ; 目的地
   940 000013AA B983000000                  mov rcx, ap_init_tail - ap_init                 ; 次数
   941 000013AF FC                          cld 
   942 000013B0 F3A4                        repe movsb 
   943                                  
   944                                      ; 所有处理器都应该在初始化期间递增应答计数值
   945 000013B2 FE05(31010000)              inc byte [rel ack_cpus]                         ; BSP 自己的应答计数值
   946                                  
   947                                      ; 给其它处理器发送 INIT IPI 和 SIPI, 命令他们初始化自己
   948 000013B8 48BE00E0FFFF7FFFFF-         mov rsi, LAPIC_START_ADDR
   948 000013C1 FF                 
   949 000013C2 C78610030000000000-         mov dword [rsi + 0x310], 0
   949 000013CB 00                 
   950 000013CC C7860003000000450C-         mov dword [rsi + 0x300], 0x000c4500             ; 先发送 INIT IPI
   950 000013D5 00                 
   951 000013D6 C786000300000F460C-         mov dword [rsi + 0x300], (AP_START_UP_ADDR >> 12) | 0x000c4600      ; start up IPI
   951 000013DF 00                 
   952 000013E0 C786000300000F460C-         mov dword [rsi + 0x300], (AP_START_UP_ADDR >> 12) | 0x000c4600      ; 保险起见发两次
   952 000013E9 00                 
   953                                  
   954 000013EA 8A05(27000000)              mov al, [rel num_cpus]
   955                                  
   956                                  .wcpus:
   957 000013F0 3A05(31010000)              cmp al, [rel ack_cpus]
   958 000013F6 75F8                        jne .wcpus                                      ; 等待所有应用处理器的应答
   959                                  
   960                                      ; 显示已应答的处理器数量
   961 000013F8 4C8B3D(08000000)            mov r15, [rel position]
   962                                  
   963 000013FF 4D31C0                      xor r8, r8 
   964 00001402 448A05(31010000)            mov r8b, [rel ack_cpus]
   965 00001409 498D9F[69010000]            lea rbx, [r15 + buffer]
   966 00001410 E834F5FFFF                  call bin64_to_dec
   967 00001415 E8E6EBFFFF                  call put_string64
   968                                  
   969 0000141A 498D9F[58010000]            lea rbx, [r15 + cpu_init_ok]
   970 00001421 E8DAEBFFFF                  call put_string64
   971                                  
   972                                      ; 以下创建进程
   973 00001426 41B832000000                mov r8, 50
   974 0000142C E8EDF9FFFF                  call create_process
   975                                  
   976 00001431 E99EF6FFFF                  jmp ap_to_core_entry.do_idle                    ; 去处理器集结休息区
   977                                  
   978                                  section ap_init_block vstart=0                      ; vstart 改变段内汇编地址, 让其都相对于段起始, 即这段代码是浮动的
   979                                  
   980                                      bits 16                                         ; 应用处理器 AP 从实模式开始
   981                                  
   982                                  ap_init:
   983 00000000 B8000F                      mov ax, AP_START_UP_ADDR >> 4
   984 00000003 8ED8                        mov ds, ax 
   985                                  
   986                                      SET_SPIN_LOCK al, byte [lock_var]               ; 自旋知道获得锁
    49                              <1>  %%spin_lock:
    50 00000005 803E[8200]00        <1>  cmp %2, 0
    51 0000000A 7404                <1>  je %%get_lock
    52 0000000C F390                <1>  pause
    53 0000000E EBF5                <1>  jmp %%spin_lock
    54                              <1>  %%get_lock:
    55 00000010 B001                <1>  mov %1, 1
    56 00000012 8606[8200]          <1>  xchg %1, %2
    57 00000016 3C00                <1>  cmp %1, 0
    58 00000018 75EB                <1>  jne %%spin_lock
   987                                  
   988 0000001A B8E007                      mov ax, SDA_PHY_ADDR >> 4                       ; 切换到系统数据区
   989 0000001D 8ED8                        mov ds, ax 
   990                                  
   991 0000001F 0F01160200                  lgdt [2]                                        ; 加载描述符寄存器 GDTR, 实模式下只加载 6 字节的内容, 界限值 2 字节, 基地址 4 字节, 描述符已经填好
   992                                  
   993 00000024 E492                        in al, 0x92                                     ; 南桥芯片内端口
   994 00000026 0C02                        or al, 0000_0010B
   995 00000028 E692                        out 0x92, al                                    ; 打开 A20
   996                                  
   997 0000002A FA                          cli                                             ; 中断机制尚未工作
   998                                  
   999 0000002B 0F20C0                      mov eax, cr0
  1000 0000002E 6683C801                    or eax, 1
  1001 00000032 0F22C0                      mov cr0, eax                                    ; 设置 PE 位
  1002                                  
  1003                                      ; 进入保护模式...
  1004 00000035 EA[3AF0]0800                jmp 0x0008: AP_START_UP_ADDR + .flush           ; 0x0008 是保护模式下的代码段描述符的选择子, 清流水线并串行化处理器
  1005                                  
  1006                                      [bits 32]
  1007                                  .flush:
  1008 0000003A B810000000                  mov eax, 0x0010                                 ; 加载数据段(4gb)选择子
  1009 0000003F 8ED0                        mov ss, eax                                     ; 加载堆栈段(4gb)选择子
  1010 00000041 BC007E0000                  mov esp, 0x7e00                                 ; 堆栈指针
  1011                                  
  1012                                      ; 令 CR3 寄存器指向 4 级表头(保护模式下的 32 位 CR3)
  1013 00000046 B800A00000                  mov eax, PML4_PHY_ADDR                          ; PCD = PWT = 0
  1014 0000004B 0F22D8                      mov cr3, eax 
  1015                                  
  1016                                      ; 开启物理地址扩展 PAE
  1017 0000004E 0F20E0                      mov eax, cr4 
  1018 00000051 0FBAE805                    bts eax, 5
  1019 00000055 0F22E0                      mov cr4, eax 
  1020                                  
  1021                                      ; 设置型号专属寄存器 IA32_EFER.LME，允许 IA_32e 模式
  1022 00000058 B9800000C0                  mov ecx, 0x0c0000080                            ; 指定型号专属寄存器 IA32_EFER
  1023 0000005D 0F32                        rdmsr 
  1024 0000005F 0FBAE808                    bts eax, 8                                      ; 设置 LME 位
  1025 00000063 0F30                        wrmsr
  1026                                  
  1027                                      ; 开启分页功能
  1028 00000065 0F20C0                      mov eax, cr0 
  1029 00000068 0FBAE81F                    bts eax, 31                                     ; 置位 CR0.PG
  1030 0000006C 0F22C0                      mov cr0, eax 
  1031                                  
  1032                                      ; 进入 64 位模式
  1033 0000006F EA[76F00000]1800            jmp CORE_CODE64_SEL:AP_START_UP_ADDR + .to64
  1034                                  .to64:
  1035                                      bits 64
  1036                                  
  1037                                      ; 转入内核中继续初始化, 使用高端线性地址
  1038 00000076 48BB-                       mov rbx, UPPER_CORE_LINEAR + ap_to_core_entry
  1038 00000078 [B40902000080FFFF] 
  1039 00000080 FFE3                        jmp rbx 
  1040                                  
  1041 00000082 00                      lock_var db 0
  1042                                  
  1043                                  ap_init_tail:
  1044                                  
  1045                                  section core_tail
  1046                                  core_end:
