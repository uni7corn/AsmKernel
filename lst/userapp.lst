     1                                  ; 用户程序
     2                                  
     3                                  section app_header                              ; 应用程序头部
     4 00000000 [4201000000000000]          length  dq app_end                          ; #0：用户程序的总长度（字节数）
     5 00000008 [3601000000000000]          entry   dq start                            ; #8：用户程序入口点
     6 00000010 0000000000000000            linear  dq 0                                ; #16：用户程序加载的虚拟（线性）地址
     7                                  
     8                                  section app_data                                ; 应用程序数据段
     9 00000000 00<rep 80h>                 app_msg     times 128 db 0                  ; 应用程序消息缓冲区
    10 00000080 50726F636573732049-         pid_prex    db "Process ID:", 0             ; 进程标识符前缀文本
    10 00000089 443A00             
    11 0000008C 00<rep 20h>                 pid         times 32 db 0                   ; 进程标识符的文本
    12 000000AC 20646F696E6720312B-         delim       db " doing 1+2+3+...+", 0       ; 分隔文本
    12 000000B5 322B332B2E2E2E2B00 
    13 000000BE 00<rep 20h>                 addend      times 32 db 0                   ; 加数的文本
    14 000000DE 3D00                        equal       db "=", 0                       ; 等于号
    15 000000E0 00<rep 20h>                 cusum       times 32 db 0                   ; 相加结果的文本
    16                                  
    17                                  section app_code                                ; 应用程序代码段
    18                                  
    19                                  %include "./common/user_static64.asm"
     1                              <1> ; 用户通用代码
     2                              <1> 
     3                              <1>     bits 64 
     4                              <1> 
     5                              <1> ; ------------------------------------------------------------
     6                              <1> ; bin64_to_dec
     7                              <1> ; 功能: 将二进制数转换为十进制字符串
     8                              <1> ; 输入: r8=64位二进制数, rbx=目标缓冲区线性地址
     9                              <1> ; ------------------------------------------------------------
    10                              <1> bin64_to_dec: 
    11 00000000 50                  <1>     push rax
    12 00000001 53                  <1>     push rbx
    13 00000002 51                  <1>     push rcx
    14 00000003 52                  <1>     push rdx
    15 00000004 4150                <1>     push r8
    16                              <1> 
    17 00000006 490FBAE03F          <1>     bt r8, 63                                       ; 检查最高位, 处理正,负数
    18 0000000B 7309                <1>     jnc .begin
    19 0000000D C6032D              <1>     mov byte [rbx], "-"
    20 00000010 49F7D8              <1>     neg r8                                          ; 取反, 将负数转为正数
    21                              <1> 
    22 00000013 48FFC3              <1>     inc rbx
    23                              <1> 
    24                              <1> .begin:
    25 00000016 4C89C0              <1>     mov rax, r8                                     ; rax 是被除数
    26 00000019 41B80A000000        <1>     mov r8, 10
    27 0000001F 4831C9              <1>     xor rcx, rcx                                    ; rcx 是位数
    28                              <1> 
    29                              <1> .next_div:
    30 00000022 4831D2              <1>     xor rdx, rdx                                    ; 使用 128 位除法, 要将 rdx 清零
    31 00000025 49F7F0              <1>     div r8 
    32 00000028 52                  <1>     push rdx                                        ; 保存分解的数位
    33 00000029 48FFC1              <1>     inc rcx 
    34 0000002C 4809C0              <1>     or rax, rax                                     ; 商为 0?
    35 0000002F 7402                <1>     jz .rotate
    36 00000031 EBEF                <1>     jmp .next_div
    37                              <1> 
    38                              <1> .rotate:
    39 00000033 5A                  <1>     pop rdx 
    40 00000034 80C230              <1>     add dl, 0x30                                    ; 将数位转为 ASCII
    41 00000037 8813                <1>     mov [rbx], dl 
    42 00000039 48FFC3              <1>     inc rbx 
    43 0000003C E2F5                <1>     loop .rotate
    44                              <1> 
    45 0000003E C60300              <1>     mov byte [rbx], 0
    46                              <1> 
    47 00000041 4158                <1>     pop r8
    48 00000043 5A                  <1>     pop rdx
    49 00000044 59                  <1>     pop rcx
    50 00000045 5B                  <1>     pop rbx
    51 00000046 58                  <1>     pop rax
    52                              <1> 
    53 00000047 C3                  <1>     ret 
    54                              <1> 
    55                              <1> ; ------------------------------------------------------------
    56                              <1> ; string_concatenates
    57                              <1> ; 功能: 将源字符串连接到目的字符串的尾部
    58                              <1> ; 输入: rsi=源字符串的线性地址, rdi=目的字符串的线性地址
    59                              <1> ; ------------------------------------------------------------
    60                              <1> string_concatenates:
    61 00000048 50                  <1>     push rax
    62 00000049 56                  <1>     push rsi
    63 0000004A 57                  <1>     push rdi
    64                              <1> 
    65                              <1>     
    66                              <1> .r0:                                                ; 先找到 rdi 的结尾
    67 0000004B 803F00              <1>     cmp byte [rdi], 0
    68 0000004E 7405                <1>     jz .r1 
    69 00000050 48FFC7              <1>     inc rdi 
    70 00000053 EBF6                <1>     jmp .r0 
    71                              <1>     
    72                              <1> .r1:                                                ; 再复制源字符串过去
    73 00000055 8A06                <1>     mov al, [rsi]
    74 00000057 8807                <1>     mov [rdi], al 
    75 00000059 3C00                <1>     cmp al, 0
    76 0000005B 7408                <1>     jz .r2 
    77 0000005D 48FFC6              <1>     inc rsi 
    78 00000060 48FFC7              <1>     inc rdi 
    79 00000063 EBF0                <1>     jmp .r1 
    80                              <1>     
    81                              <1> .r2:
    82 00000065 5F                  <1>     pop rdi 
    83 00000066 5E                  <1>     pop rsi 
    84 00000067 58                  <1>     pop rax 
    85                              <1> 
    86 00000068 C3                  <1>     ret 
    20                                  
    21                                      bits 64
    22                                  
    23                                  main:
    24 00000069 B800000000                  mov rax, 0                                  ; 确定当前程序可以使用的显示行, dh=行号
    25 0000006E 0F05                        syscall  
    26                                  
    27 00000070 B200                        mov dl, 0
    28 00000072 41B10F                      mov r9b, 0x0f
    29                                  
    30 00000075 4C8B25(10000000)            mov r12, [rel linear]                       ; 当前程序加载的起始线性地址
    31 0000007C B804000000                  mov rax, 4                                  ; 获取当前进程标识
    32 00000081 0F05                        syscall 
    33 00000083 4989C0                      mov r8, rax 
    34 00000086 498D9C24[8C000000]          lea rbx, [r12 + pid]
    35 0000008E E86DFFFFFF                  call bin64_to_dec                           ; 将进程标识转为字符串
    36                                  
    37 00000093 41B800000000                mov r8, 0                                   ; r8 存放累加和
    38 00000099 41BA01000000                mov r10, 1                                  ; r10 存放加数
    39                                  
    40                                  .cusum:
    41 0000009F 4D01D0                      add r8, r10 
    42 000000A2 498D9C24[E0000000]          lea rbx, [r12 + cusum]
    43 000000AA E851FFFFFF                  call bin64_to_dec                           ; 本次相加的结果转为字符串
    44 000000AF 4D87D0                      xchg r8, r10 
    45 000000B2 498D9C24[BE000000]          lea rbx, [r12 + addend]
    46 000000BA E841FFFFFF                  call bin64_to_dec                           ; 将本次加数转为字符串
    47 000000BF 4D87D0                      xchg r8, r10 
    48                                  
    49 000000C2 498DBC24[00000000]          lea rdi, [r12 + app_msg]                    ; 清空缓冲区
    50 000000CA C60700                      mov byte [rdi], 0
    51                                  
    52                                      ; 链接字符串, 填入 app_msg 中
    53 000000CD 498DB424[80000000]          lea rsi, [r12 + pid_prex]
    54 000000D5 E86EFFFFFF                  call string_concatenates 
    55 000000DA 498DB424[8C000000]          lea rsi, [r12 + pid]
    56 000000E2 E861FFFFFF                  call string_concatenates
    57 000000E7 498DB424[AC000000]          lea rsi, [r12 + delim]
    58 000000EF E854FFFFFF                  call string_concatenates
    59 000000F4 498DB424[BE000000]          lea rsi, [r12 + addend]
    60 000000FC E847FFFFFF                  call string_concatenates
    61 00000101 498DB424[DE000000]          lea rsi, [r12 + equal]
    62 00000109 E83AFFFFFF                  call string_concatenates
    63 0000010E 498DB424[E0000000]          lea rsi, [r12 + cusum]
    64 00000116 E82DFFFFFF                  call string_concatenates
    65                                  
    66 0000011B 4889FB                      mov rbx, rdi                                ; 显示字符串
    67 0000011E B802000000                  mov rax, 2  
    68 00000123 0F05                        syscall
    69                                  
    70 00000125 49FFC2                      inc r10 
    71 00000128 4981FAA0860100              cmp r10, 100000
    72 0000012F 0F8E6AFFFFFF                jle .cusum
    73                                  
    74 00000135 C3                          ret 
    75                                  
    76                                  start:
    77                                      ; 初始化代码...
    78                                  
    79 00000136 E82EFFFFFF                  call main
    80                                  
    81                                      ; 清理, 收尾代码
    82                                  
    83 0000013B B805000000                  mov rax, 5                                  ; 终止任务
    84 00000140 0F05                        syscall
    85                                  
    86                                  app_end:
