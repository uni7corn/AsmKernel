     1                                  ; 用户程序
     2                                  
     3                                  section app_header                              ; 应用程序头部
     4 00000000 [7701000000000000]          length  dq app_end                          ; #0：用户程序的总长度（字节数）
     5 00000008 [6B01000000000000]          entry   dq start                            ; #8：用户程序入口点
     6 00000010 0000000000000000            linear  dq 0                                ; #16：用户程序加载的虚拟（线性）地址
     7                                  
     8                                  section app_data                                ; 应用程序数据段
     9 00000000 00<rep 80h>                 app_msg     times 128 db 0                  ; 应用程序消息缓冲区
    10                                  
    11 00000080 5461736B2000                pid_prex    db "Task ", 0                   ; 进程标识前缀文本
    12 00000086 00<rep 20h>                 pid         times 32 db 0                   ; 进程标识的文本
    13                                  
    14 000000A6 206F6E204350552000          cpu_prex    db " on CPU ", 0                ; 处理器标识的前缀文本
    15 000000AF 00<rep 20h>                 pcpu        times 32 db 0                   ; 处理器标识的文本
    16                                  
    17 000000CF 20646F20312B322B33-         delim       db " do 1+2+3+...+", 0          ; 分隔文本
    17 000000D8 2B2E2E2E2B00       
    18 000000DE 00<rep 20h>                 addend      times 32 db 0                   ; 加数的文本
    19 000000FE 3D00                        equal       db "=", 0                       ; 等于号
    20 00000100 00<rep 20h>                 cusum       times 32 db 0                   ; 相加结果的文本
    21                                  
    22                                  section app_code                                ; 应用程序代码段
    23                                  
    24                                  %include "./common/user_static64.asm"
     1                              <1> ; 用户通用代码
     2                              <1> 
     3                              <1>     bits 64 
     4                              <1> 
     5                              <1> ; ------------------------------------------------------------
     6                              <1> ; bin64_to_dec
     7                              <1> ; 功能: 将二进制数转换为十进制字符串
     8                              <1> ; 输入: r8=64位二进制数, rbx=目标缓冲区线性地址
     9                              <1> ; ------------------------------------------------------------
    10                              <1> bin64_to_dec: 
    11 00000000 50                  <1>     push rax
    12 00000001 53                  <1>     push rbx
    13 00000002 51                  <1>     push rcx
    14 00000003 52                  <1>     push rdx
    15 00000004 4150                <1>     push r8
    16                              <1> 
    17 00000006 490FBAE03F          <1>     bt r8, 63                                       ; 检查最高位, 处理正,负数
    18 0000000B 7309                <1>     jnc .begin
    19 0000000D C6032D              <1>     mov byte [rbx], "-"
    20 00000010 49F7D8              <1>     neg r8                                          ; 取反, 将负数转为正数
    21                              <1> 
    22 00000013 48FFC3              <1>     inc rbx
    23                              <1> 
    24                              <1> .begin:
    25 00000016 4C89C0              <1>     mov rax, r8                                     ; rax 是被除数
    26 00000019 41B80A000000        <1>     mov r8, 10
    27 0000001F 4831C9              <1>     xor rcx, rcx                                    ; rcx 是位数
    28                              <1> 
    29                              <1> .next_div:
    30 00000022 4831D2              <1>     xor rdx, rdx                                    ; 使用 128 位除法, 要将 rdx 清零
    31 00000025 49F7F0              <1>     div r8 
    32 00000028 52                  <1>     push rdx                                        ; 保存分解的数位
    33 00000029 48FFC1              <1>     inc rcx 
    34 0000002C 4809C0              <1>     or rax, rax                                     ; 商为 0?
    35 0000002F 7402                <1>     jz .rotate
    36 00000031 EBEF                <1>     jmp .next_div
    37                              <1> 
    38                              <1> .rotate:
    39 00000033 5A                  <1>     pop rdx 
    40 00000034 80C230              <1>     add dl, 0x30                                    ; 将数位转为 ASCII
    41 00000037 8813                <1>     mov [rbx], dl 
    42 00000039 48FFC3              <1>     inc rbx 
    43 0000003C E2F5                <1>     loop .rotate
    44                              <1> 
    45 0000003E C60300              <1>     mov byte [rbx], 0
    46                              <1> 
    47 00000041 4158                <1>     pop r8
    48 00000043 5A                  <1>     pop rdx
    49 00000044 59                  <1>     pop rcx
    50 00000045 5B                  <1>     pop rbx
    51 00000046 58                  <1>     pop rax
    52                              <1> 
    53 00000047 C3                  <1>     ret 
    54                              <1> 
    55                              <1> ; ------------------------------------------------------------
    56                              <1> ; string_concatenates
    57                              <1> ; 功能: 将源字符串连接到目的字符串的尾部
    58                              <1> ; 输入: rsi=源字符串的线性地址, rdi=目的字符串的线性地址
    59                              <1> ; ------------------------------------------------------------
    60                              <1> string_concatenates:
    61 00000048 50                  <1>     push rax
    62 00000049 56                  <1>     push rsi
    63 0000004A 57                  <1>     push rdi
    64                              <1> 
    65                              <1>     
    66                              <1> .r0:                                                ; 先找到 rdi 的结尾
    67 0000004B 803F00              <1>     cmp byte [rdi], 0
    68 0000004E 7405                <1>     jz .r1 
    69 00000050 48FFC7              <1>     inc rdi 
    70 00000053 EBF6                <1>     jmp .r0 
    71                              <1>     
    72                              <1> .r1:                                                ; 再复制源字符串过去
    73 00000055 8A06                <1>     mov al, [rsi]
    74 00000057 8807                <1>     mov [rdi], al 
    75 00000059 3C00                <1>     cmp al, 0
    76 0000005B 7408                <1>     jz .r2 
    77 0000005D 48FFC6              <1>     inc rsi 
    78 00000060 48FFC7              <1>     inc rdi 
    79 00000063 EBF0                <1>     jmp .r1 
    80                              <1>     
    81                              <1> .r2:
    82 00000065 5F                  <1>     pop rdi 
    83 00000066 5E                  <1>     pop rsi 
    84 00000067 58                  <1>     pop rax 
    85                              <1> 
    86 00000068 C3                  <1>     ret 
    25                                  
    26                                      bits 64
    27                                  
    28                                  main:
    29 00000069 B800000000                  mov rax, 0                                  ; 确定当前程序可以使用的显示行, dh=行号
    30 0000006E 0F05                        syscall  
    31                                  
    32 00000070 B200                        mov dl, 0
    33 00000072 41B10F                      mov r9b, 0x0f
    34                                  
    35 00000075 4C8B25(10000000)            mov r12, [rel linear]                       ; 当前程序加载的起始线性地址
    36 0000007C B804000000                  mov rax, 4                                  ; 获取当前进程标识
    37 00000081 0F05                        syscall 
    38 00000083 4989C0                      mov r8, rax 
    39 00000086 498D9C24[86000000]          lea rbx, [r12 + pid]
    40 0000008E E86DFFFFFF                  call bin64_to_dec                           ; 将进程标识转为字符串
    41                                  
    42 00000093 41B800000000                mov r8, 0                                   ; r8 存放累加和
    43 00000099 41BA01000000                mov r10, 1                                  ; r10 存放加数
    44                                  
    45                                  .cusum:
    46 0000009F 4D01D0                      add r8, r10 
    47 000000A2 498D9C24[00010000]          lea rbx, [r12 + cusum]
    48 000000AA E851FFFFFF                  call bin64_to_dec                           ; 本次相加的结果转为字符串
    49                                  
    50 000000AF 4D87D0                      xchg r8, r10 
    51                                  
    52 000000B2 498D9C24[DE000000]          lea rbx, [r12 + addend]
    53 000000BA E841FFFFFF                  call bin64_to_dec                           ; 将本次加数转为字符串
    54                                  
    55 000000BF 4D87D0                      xchg r8, r10 
    56                                  
    57 000000C2 B806000000                  mov rax, 6                                  ; 获取处理器编号
    58 000000C7 0F05                        syscall
    59                                  
    60 000000C9 4150                        push r8 
    61 000000CB 4989C0                      mov r8, rax 
    62 000000CE 498D9C24[AF000000]          lea rbx, [r12 + pcpu]
    63 000000D6 E825FFFFFF                  call bin64_to_dec
    64 000000DB 4158                        pop r8 
    65                                  
    66 000000DD 498DBC24[00000000]          lea rdi, [r12 + app_msg]                    ; 清空缓冲区
    67 000000E5 C60700                      mov byte [rdi], 0
    68                                  
    69                                      ; 链接字符串, 填入 app_msg 中
    70 000000E8 498DB424[80000000]          lea rsi, [r12 + pid_prex]
    71 000000F0 E853FFFFFF                  call string_concatenates 
    72                                  
    73 000000F5 498DB424[86000000]          lea rsi, [r12 + pid]
    74 000000FD E846FFFFFF                  call string_concatenates
    75                                  
    76 00000102 498DB424[A6000000]          lea rsi, [r12 + cpu_prex]
    77 0000010A E839FFFFFF                  call string_concatenates
    78                                  
    79 0000010F 498DB424[AF000000]          lea rsi, [r12 + pcpu]
    80 00000117 E82CFFFFFF                  call string_concatenates
    81                                  
    82 0000011C 498DB424[CF000000]          lea rsi, [r12 + delim]
    83 00000124 E81FFFFFFF                  call string_concatenates
    84                                  
    85 00000129 498DB424[DE000000]          lea rsi, [r12 + addend]
    86 00000131 E812FFFFFF                  call string_concatenates
    87                                  
    88 00000136 498DB424[FE000000]          lea rsi, [r12 + equal]
    89 0000013E E805FFFFFF                  call string_concatenates
    90                                  
    91 00000143 498DB424[00010000]          lea rsi, [r12 + cusum]
    92 0000014B E8F8FEFFFF                  call string_concatenates
    93                                  
    94 00000150 4889FB                      mov rbx, rdi                                ; 显示字符串
    95 00000153 B802000000                  mov rax, 2  
    96 00000158 0F05                        syscall
    97                                  
    98 0000015A 49FFC2                      inc r10 
    99 0000015D 4981FA80969800              cmp r10, 10000000
   100 00000164 0F8E35FFFFFF                jle .cusum
   101                                  
   102 0000016A C3                          ret 
   103                                  
   104                                  start:
   105                                      ; 初始化代码...
   106                                  
   107 0000016B E8F9FEFFFF                  call main
   108                                  
   109                                      ; 清理, 收尾代码
   110                                  
   111 00000170 B805000000                  mov rax, 5                                  ; 终止任务
   112 00000175 0F05                        syscall
   113                                  
   114                                  app_end:
