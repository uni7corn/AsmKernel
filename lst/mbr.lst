     1                                  ; 主引导扇区程序
     2                                  
     3                                  %include "./common/global_defs.asm"
     1                              <1> ; 全局常量定义
     2                              <1> 
     3                              <1> %ifndef _GLOBAL_DEFS_
     4                              <1>     %define _GLOBAL_DEFS_
     5                              <1> 
     6                              <1>     SDA_PHY_ADDR        equ     0x00007e00	; 系统数据区的起始物理地址
     7                              <1>     PML5_PHY_ADDR       equ     0x00009000	; 内核 5 级头表物理地址
     8                              <1>     PML4_PHY_ADDR       equ     0x0000a000	; 内核 4 级头表物理地址
     9                              <1>     PDPT_PHY_ADDR       equ     0x0000b000	; 对应于低端 2MB 的内核页目录指针表物理地址
    10                              <1>     PDT_PHY_ADDR        equ     0x0000c000	; 对应于低端 2MB 的页目录表物理地址
    11                              <1>     PT_PHY_ADDR         equ     0x0000d000	; 对应于低端 2MB 的内核页表的物理地址
    12                              <1>     IDT_PHY_ADDR        equ     0x0000e000	; 中断描述符表的物理地址
    13                              <1>     LDR_PHY_ADDR        equ     0x0000f000	; 用于安装内核加载器的起始物理地址
    14                              <1>     GDT_PHY_ADDR        equ     0x00010000	; 全局描述符表 GDT 的物理地址
    15                              <1>     CORE_PHY_ADDR       equ     0x00020000	; 内核的起始物理地址
    16                              <1>     COR_PDPT_ADDR       equ     0x00100000	; 从这个物理地址开始的 1MB 是内核的 254 个页目录指针表
    17                              <1> 
    18                              <1>     LDR_START_SECTOR    equ     1      	        ; 内核加载器在硬盘上的起始逻辑扇区号
    19                              <1>     COR_START_SECTOR    equ     9      	        ; 内核程序在硬盘上的起始逻辑扇区号
    20                              <1> 
    21                              <1>     ; 虚拟内存空间的高端起始于线性地址 0xffff800000000000
    22                              <1>     UPPER_LINEAR_START  equ     0xffff800000000000  
    23                              <1>     UPPER_CORE_LINEAR   equ     UPPER_LINEAR_START + CORE_PHY_ADDR	    ; 内核的高端线性地址
    24                              <1>     UPPER_TEXT_VIDEO    equ     UPPER_LINEAR_START + 0x000b8000	        ; 文本显示缓冲区的高端起始线性地址
    25                              <1>     UPPER_SDA_LINEAR    equ     UPPER_LINEAR_START + SDA_PHY_ADDR	    ; 系统数据区的高端线性地址
    26                              <1>     UPPER_GDT_LINEAR    equ     UPPER_LINEAR_START + GDT_PHY_ADDR	    ; GDT 的高端线性地址
    27                              <1>     UPPER_IDT_LINEAR    equ     UPPER_LINEAR_START + IDT_PHY_ADDR	    ; IDT 的高端线性地址
    28                              <1> 
    29                              <1>     ; 与全局描述符表有关的选择子定义, 及内存管理有关的常量定义
    30                              <1>     CORE_CODE64_SEL     equ     0x0018	; 内核代码段的描述符选择子(RPL=00)
    31                              <1>     CORE_STACK64_SEL    equ     0x0020	; 内核栈段的描述符选择子(RPL=00)
    32                              <1>     RESVD_DESC_SEL      equ     0x002b	; 保留的描述符选择子
    33                              <1>     USER_CODE64_SEL     equ     0x003b	; 3 特权级代码段的描述符选择子(RPL=11)
    34                              <1>     USER_STACK64_SEL    equ     0x0033	; 3 特权级栈段的描述符选择子(RPL=11)
    35                              <1> 
    36                              <1>     PHY_MEMORY_SIZE     equ     32    	            ; 物理内存大小(MB), 要求至少 3MB
    37                              <1>     CORE_ALLOC_START    equ     0xffff800000200000	; 在虚拟地址空间高端(内核)分配内存时的起始地址
    38                              <1>     USER_ALLOC_START    equ     0x0000000000000000	; 在每个任务虚拟地址空间低端分配内存时的起始地址
    39                              <1> 
    40                              <1>     ; 创建任务时, 需要分配一个物理页作为新任务的 4 级头表, 并分配一个临时的线性地址来初始化这个页
    41                              <1>     NEW_PML4_LINEAR     equ     0xffffff7ffffff000	; 用来映射新任务 4 级头表的线性地址
    42                              <1>     LAPIC_START_ADDR    equ     0xffffff7fffffe000	; LOCAL APIC 寄存器的起始线性地址
    43                              <1>     IOAPIC_START_ADDR   equ     0xffffff7fffffd000	; I/O APIC 寄存器的起始线性地址
    44                              <1>     AP_START_UP_ADDR    equ     0x0000f000 	        ; 应用处理器(AP)启动代码的物理地址
    45                              <1>     SUGG_PREEM_SLICE    equ     55          	    ; 推荐的任务/线程抢占时间片长度(毫秒)
    46                              <1> 
    47                              <1>     ; 多处理器环境下的自旋锁加锁宏。需要两个参数: 寄存器, 以及一个对应宽度的锁变量
    48                              <1>     %macro  SET_SPIN_LOCK 2             ; 两个参数, 分别是寄存器 %1 和锁变量 %2
    49                              <1>             %%spin_lock:
    50                              <1>                     cmp %2, 0           ; 看一眼锁现在是不是 0
    51                              <1>                     je %%get_lock      	; 如果是 0，说明没人占，跳过去抢
    52                              <1>                     pause				; 不是 0，先喘口气（降低 CPU 占用）
    53                              <1>                     jmp %%spin_lock    	; 继续看
    54                              <1>             %%get_lock:
    55                              <1>                     mov %1, 1
    56                              <1>                     xchg %1, %2         ; 用 xchg 的“原子交换”能力抢锁，抢不到就一直循环（自旋）
    57                              <1>                     cmp %1, 0          	; 交换回来的 %2 旧值是 0 吗？
    58                              <1>                     jne %%spin_lock   	; 不是 0 说明别人先插了旗，回到开头重抢
    59                              <1>     %endmacro
    60                              <1> 
    61                              <1> %endif
     4                                  
     5                                  SECTION mbr vstart=0x00007c00
     6 00000000 31C0                        xor ax, ax
     7 00000002 8ED8                        mov ds, ax 
     8 00000004 8EC0                        mov es, ax 
     9 00000006 8ED0                        mov ss, ax 
    10 00000008 BC007C                      mov sp, 0x7c00
    11                                  
    12                                      ; 装入内核加载器
    13                                  
    14                                      ; 为了使用 BIOS 扩展硬盘读功能, 构造所需参数, 见书中 102 页
    15                                      ; 构造地址结构
    16 0000000B 666A00                      push dword 0                            ; 压入起始的逻辑扇区号, 8 字节, 分两个 dword, 小端序
    17 0000000E 666A01                      push dword LDR_START_SECTOR
    18 00000011 68000F                      push word LDR_PHY_ADDR >> 4             ; 压入数据缓冲区逻辑段地址
    19 00000014 6A00                        push word 0                             ; 压入数据缓冲区段内偏移
    20 00000016 6A01                        push word 0x0001                        ; 本次传输的扇区数
    21 00000018 6A10                        push word 0x0010                        ; 保留位固定为 0 以及当前地址结构尺寸
    22                                      ; 其他参数
    23 0000001A 89E6                        mov si, sp
    24 0000001C B442                        mov ah, 0x42                            ; 对应 int 0x13 扩展读功能
    25 0000001E B280                        mov dl, 0x80                            ; 主盘, 0x80 为第一硬盘
    26 00000020 CD13                        int 0x13                                ; 成功则 CF=0, AH=0; 失败则 CF=1, AH=错误代码
    27 00000022 BD[A000]                    mov bp, msg0
    28 00000025 BF0D00                      mov di, msg1 - msg0
    29 00000028 7263                        jc go_err                               ; 读写磁盘失败, 显示信息并停止运行
    30                                  
    31 0000002A 1E                          push ds 
    32                                  
    33 0000002B B9000F                      mov cx, LDR_PHY_ADDR >> 4               ; 切换到加载器所在的段地址
    34 0000002E 8ED9                        mov ds, cx 
    35 00000030 66813E00006C696E6F          cmp dword [0], "lino"                   ; 检查加载器有效标志, 加载器魔数
    36 00000039 BD[AD00]                    mov bp, msg1
    37 0000003C BF1100                      mov di, mend - msg1
    38 0000003F 754C                        jnz go_err                              ; 加载器不存在, 显示信息并停止运行
    39                                  
    40                                      ; 加载器程序长度处理
    41 00000041 66A10400                    mov eax, [4]                            ; 获取整个程序的大小
    42 00000045 6631D2                      xor edx, edx                            ; 将 edx 寄存器清零
    43 00000048 66B900020000                mov ecx, 512
    44 0000004E 66F7F1                      div ecx                                 ; 被除数高位在 edx 中, 低位在 eax 中, 除数是 ecx, 最后的商在 eax 中, 余数在 edx 中
    45                                      ; 处理长度 < 512 字节的情况
    46 00000051 6609C0                      or eax, eax                             
    47 00000054 7427                        jz go_ldr
    48                                      ; 处理长度 >= 512 字节的情况
    49 00000056 6609D2                      or edx, edx                             ; 判读 edx 是否为 0, 不为零, 说面 eax 是少一的, 因为最开始已经读了一个扇区, 正好弥补这里
    50 00000059 7507                        jnz @1                                
    51 0000005B 6648                        dec eax                                 ; edx 为 0, 即没有余数, 反而要将 eax 中的总扇区数减一
    52 0000005D 6609C0                      or eax, eax                             ; 正好等于 512 时, 单独处理
    53 00000060 741B                        jz go_ldr
    54                                  @1:
    55                                      ; 读取剩余扇区
    56 00000062 1F                          pop ds                                  
    57                                  
    58 00000063 894402                      mov word [si + 2], ax                   ; 重新设置要读取的逻辑扇区数
    59 00000066 C744040002                  mov word [si + 4], 512                  ; 重新设置下一个段内偏移量
    60 0000006B 66FF4408                    inc dword [si + 8]                      ; 起始逻辑扇区号加一
    61 0000006F B442                        mov ah, 0x42                            ; 读取
    62 00000071 B280                        mov dl, 0x80
    63 00000073 CD13                        int 0x13
    64                                  
    65 00000075 BD[A000]                    mov bp, msg0
    66 00000078 BF0D00                      mov di, msg1 - msg0
    67 0000007B 7210                        jc go_err                               ; 读写磁盘失败, 显示信息并停止运行
    68                                  
    69                                  go_ldr:
    70 0000007D BC007C                      mov sp, 0x7c00                          ; 恢复栈, 之前用来存 int 0x13 需要的地址结构
    71                                  
    72 00000080 B8000F                      mov ax, LDR_PHY_ADDR >> 4
    73 00000083 8ED8                        mov ds, ax 
    74 00000085 8EC0                        mov es, ax 
    75                                  
    76 00000087 1E                          push ds                                 
    77 00000088 FF360800                    push word [8]                           ; 8 字节偏移出存放内核加载器的入口点地址
    78 0000008C CB                          retf                                    ; 进入加载器执行, 用 retf 来改变 cs 与 ip 寄存器的值。
    79                                  
    80                                  go_err:
    81 0000008D B403                        mov ah, 0x03                            ; 获取光标位置 详细解释见书中 106 页
    82 0000008F B700                        mov bh, 0x00
    83 00000091 CD10                        int 0x10
    84                                  
    85 00000093 89F9                        mov cx, di 
    86 00000095 B80113                      mov ax, 0x1301                          ; 屏幕写字符串, 光标移动
    87 00000098 B700                        mov bh, 0
    88 0000009A B307                        mov bl, 0x07                            ; 常规黑底白字
    89 0000009C CD10                        int 0x10
    90                                  
    91 0000009E FA                          cli 
    92 0000009F F4                          hlt
    93                                  
    94 000000A0 4469736B206572726F-         msg0            db "Disk error.", 0x0d, 0x0a
    94 000000A9 722E0D0A           
    95 000000AD 4D697373696E67206C-         msg1            db "Missing loader.", 0x0d, 0x0a
    95 000000B6 6F616465722E0D0A   
    96                                      mend:
    97                                  
    98 000000BE 00<rep 140h>                times 512 - 2 - ($ - $$) db 0
    99 000001FE 55AA                        db 0x55, 0xaa
