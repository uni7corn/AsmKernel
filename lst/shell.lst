     1                                  ; shell 程序
     2                                  
     3                                  section shell_header                                ; 外壳程序头部
     4 00000000 [3701000000000000]          length  dq shell_end                            ; #0: 外壳程序的总长度（字节数）
     5 00000008 [3201000000000000]          entry   dq start                                ; #8: 外壳入口点
     6 00000010 0000000000000000            linear  dq 0                                    ; #16: 外壳加载的虚拟（线性）地址
     7                                  
     8                                  section shell_data                                  ; 外壳程序数据段
     9 00000000 00<rep 80h>                 shell_msg   times 128 db 0
    10                                  
    11 00000080 5468726561642000            msg0        db "Thread ", 0
    12 00000088 00<rep 20h>                 tid         times 32 db 0                       ; 线程ID的文本
    13 000000A8 203C4F53205348454C-         msg1        db " <OS SHELL> on CPU ", 0
    13 000000B1 4C3E206F6E20435055-
    13 000000BA 2000               
    14 000000BC 00<rep 20h>                 pcpu        times 32 db 0                       ; 处理器编号的文本
    15 000000DC 202D00                      msg2        db " -", 0
    16                                  
    17 000000DF 00<rep 20h>                 time_buff   times 32 db 0                       ; 当前时间的文本
    18                                  
    19                                  section shell_code                                  ; 外壳程序代码段
    20                                  
    21                                  %include "./common/user_static64.asm"
     1                              <1> ; 用户通用代码
     2                              <1> 
     3                              <1>     bits 64 
     4                              <1> 
     5                              <1> ; ------------------------------------------------------------
     6                              <1> ; bin64_to_dec
     7                              <1> ; 功能: 将二进制数转换为十进制字符串
     8                              <1> ; 输入: r8=64位二进制数, rbx=目标缓冲区线性地址
     9                              <1> ; ------------------------------------------------------------
    10                              <1> bin64_to_dec: 
    11 00000000 50                  <1>     push rax
    12 00000001 53                  <1>     push rbx
    13 00000002 51                  <1>     push rcx
    14 00000003 52                  <1>     push rdx
    15 00000004 4150                <1>     push r8
    16                              <1> 
    17 00000006 490FBAE03F          <1>     bt r8, 63                                       ; 检查最高位, 处理正,负数
    18 0000000B 7309                <1>     jnc .begin
    19 0000000D C6032D              <1>     mov byte [rbx], "-"
    20 00000010 49F7D8              <1>     neg r8                                          ; 取反, 将负数转为正数
    21                              <1> 
    22 00000013 48FFC3              <1>     inc rbx
    23                              <1> 
    24                              <1> .begin:
    25 00000016 4C89C0              <1>     mov rax, r8                                     ; rax 是被除数
    26 00000019 41B80A000000        <1>     mov r8, 10
    27 0000001F 4831C9              <1>     xor rcx, rcx                                    ; rcx 是位数
    28                              <1> 
    29                              <1> .next_div:
    30 00000022 4831D2              <1>     xor rdx, rdx                                    ; 使用 128 位除法, 要将 rdx 清零
    31 00000025 49F7F0              <1>     div r8 
    32 00000028 52                  <1>     push rdx                                        ; 保存分解的数位
    33 00000029 48FFC1              <1>     inc rcx 
    34 0000002C 4809C0              <1>     or rax, rax                                     ; 商为 0?
    35 0000002F 7402                <1>     jz .rotate
    36 00000031 EBEF                <1>     jmp .next_div
    37                              <1> 
    38                              <1> .rotate:
    39 00000033 5A                  <1>     pop rdx 
    40 00000034 80C230              <1>     add dl, 0x30                                    ; 将数位转为 ASCII
    41 00000037 8813                <1>     mov [rbx], dl 
    42 00000039 48FFC3              <1>     inc rbx 
    43 0000003C E2F5                <1>     loop .rotate
    44                              <1> 
    45 0000003E C60300              <1>     mov byte [rbx], 0
    46                              <1> 
    47 00000041 4158                <1>     pop r8
    48 00000043 5A                  <1>     pop rdx
    49 00000044 59                  <1>     pop rcx
    50 00000045 5B                  <1>     pop rbx
    51 00000046 58                  <1>     pop rax
    52                              <1> 
    53 00000047 C3                  <1>     ret 
    54                              <1> 
    55                              <1> ; ------------------------------------------------------------
    56                              <1> ; string_concatenates
    57                              <1> ; 功能: 将源字符串连接到目的字符串的尾部
    58                              <1> ; 输入: rsi=源字符串的线性地址, rdi=目的字符串的线性地址
    59                              <1> ; ------------------------------------------------------------
    60                              <1> string_concatenates:
    61 00000048 50                  <1>     push rax
    62 00000049 56                  <1>     push rsi
    63 0000004A 57                  <1>     push rdi
    64                              <1> 
    65                              <1>     
    66                              <1> .r0:                                                ; 先找到 rdi 的结尾
    67 0000004B 803F00              <1>     cmp byte [rdi], 0
    68 0000004E 7405                <1>     jz .r1 
    69 00000050 48FFC7              <1>     inc rdi 
    70 00000053 EBF6                <1>     jmp .r0 
    71                              <1>     
    72                              <1> .r1:                                                ; 再复制源字符串过去
    73 00000055 8A06                <1>     mov al, [rsi]
    74 00000057 8807                <1>     mov [rdi], al 
    75 00000059 3C00                <1>     cmp al, 0
    76 0000005B 7408                <1>     jz .r2 
    77 0000005D 48FFC6              <1>     inc rsi 
    78 00000060 48FFC7              <1>     inc rdi 
    79 00000063 EBF0                <1>     jmp .r1 
    80                              <1>     
    81                              <1> .r2:
    82 00000065 5F                  <1>     pop rdi 
    83 00000066 5E                  <1>     pop rsi 
    84 00000067 58                  <1>     pop rax 
    85                              <1> 
    86 00000068 C3                  <1>     ret 
    22                                  
    23                                      bits 64 
    24                                  
    25                                  main: 
    26                                      ; 以下运行 3 个程序
    27 00000069 41B864000000                mov r8, 100                                     ; LBA 为 100 的位置
    28 0000006F B803000000                  mov rax, 3                                      ; 创建进程
    29 00000074 0F05                        syscall
    30 00000076 0F05                        syscall
    31 00000078 0F05                        syscall
    32                                                            
    33 0000007A B800000000                  mov rax, 0                                      ; 可用行号, dh=行号
    34 0000007F 0F05                        syscall                 
    35 00000081 B200                        mov dl, 0
    36 00000083 41B15F                      mov r9b, 0x5f 
    37                                  
    38 00000086 4C8B25(10000000)            mov r12, [rel linear]
    39                                  
    40                                  _time:
    41 0000008D 498D9C24[DF000000]          lea rbx, [r12 + time_buff]
    42 00000095 B801000000                  mov rax, 1                                      ; 返回当前时间
    43 0000009A 0F05                        syscall 
    44                                  
    45 0000009C B806000000                  mov rax, 6                                      ; 获取当前处理器编号
    46 000000A1 0F05                        syscall
    47 000000A3 4989C0                      mov r8, rax 
    48 000000A6 498D9C24[BC000000]          lea rbx, [r12 + pcpu]
    49 000000AE E84DFFFFFF                  call bin64_to_dec
    50                                  
    51 000000B3 B808000000                  mov rax, 8
    52 000000B8 0F05                        syscall
    53 000000BA 4989C0                      mov r8, rax 
    54 000000BD 498D9C24[88000000]          lea rbx, [r12 + tid]
    55 000000C5 E836FFFFFF                  call bin64_to_dec                               ; 获取线程标识
    56                                  
    57 000000CA 498DBC24[00000000]          lea rdi, [r12 + shell_msg]
    58 000000D2 C60700                      mov byte [rdi], 0
    59                                  
    60 000000D5 498DB424[80000000]          lea rsi, [r12 + msg0]
    61 000000DD E866FFFFFF                  call string_concatenates
    62                                  
    63 000000E2 498DB424[88000000]          lea rsi, [r12 + tid]
    64 000000EA E859FFFFFF                  call string_concatenates
    65                                  
    66 000000EF 498DB424[A8000000]          lea rsi, [r12 + msg1]
    67 000000F7 E84CFFFFFF                  call string_concatenates
    68                                  
    69 000000FC 498DB424[BC000000]          lea rsi, [r12 + pcpu]
    70 00000104 E83FFFFFFF                  call string_concatenates
    71                                  
    72 00000109 498DB424[DC000000]          lea rsi, [r12 + msg2]
    73 00000111 E832FFFFFF                  call string_concatenates
    74                                  
    75 00000116 498DB424[DF000000]          lea rsi, [r12 + time_buff]
    76 0000011E E825FFFFFF                  call string_concatenates
    77                                  
    78 00000123 4889FB                      mov rbx, rdi 
    79 00000126 B802000000                  mov rax, 2                                      ; 打印字符串
    80 0000012B 0F05                        syscall
    81                                  
    82 0000012D E95BFFFFFF                  jmp _time
    83                                  
    84                                  start:
    85 00000132 E832FFFFFF                  call main 
    86                                  
    87                                  
    88                                  shell_end:
